"use strict";(self.webpackChunk_antv_g_site=self.webpackChunk_antv_g_site||[]).push([[2643],{4200:function(n,e,t){t.r(e),t.d(e,{default:function(){return o}});t(67294);var r=t(85956),a=t(11698),s=t(85893);function o(){var n=(0,r.useOutlet)();return(0,s.jsx)(a.w.Provider,{value:{meta:{exampleTopics:[{id:"canvas",title:{zh:"画布",en:"Canvas"},examples:[{demos:[{id:"dom-canvas",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*FfHBTr2ACAkAAAAAAAAAAABkARQnAQ",source:"import { Canvas, CanvasEvent, Circle, HTML } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst $div1 = document.createElement('div');\ndocument.getElementById('container').appendChild($div1);\nconst $div2 = document.createElement('div');\ndocument.getElementById('container').appendChild($div2);\n\n// create a renderer\nconst canvasRenderer1 = new CanvasRenderer();\nconst webglRenderer1 = new WebGLRenderer();\nconst svgRenderer1 = new SVGRenderer();\nconst canvasRenderer2 = new CanvasRenderer();\n\n// create a canvas\nconst canvas1 = new Canvas({\n  container: $div1,\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer1,\n});\n\nconst canvas2 = new Canvas({\n  container: $div2,\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer2,\n});\n\ncanvas1.addEventListener(CanvasEvent.READY, () => {\n  // create a circle\n  const circle1 = new Circle({\n    id: 'circle1',\n    style: {\n      cx: 300,\n      cy: 200,\n      r: 100,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  canvas1.appendChild(circle1);\n  circle1.addEventListener('mouseenter', () => {\n    circle1.attr('fill', '#2FC25B');\n  });\n\n  circle1.addEventListener('mouseleave', () => {\n    circle1.attr('fill', '#1890FF');\n  });\n\n  canvas1.appendChild(\n    new HTML({\n      id: 'html1',\n      style: {\n        x: 100,\n        y: 100,\n        width: 100,\n        height: 100,\n        innerHTML: 'canvas1',\n        // pointerEvents: 'none',\n      },\n    }),\n  );\n});\n\ncanvas2.addEventListener(CanvasEvent.READY, () => {\n  const circle2 = new Circle({\n    id: 'circle2',\n    style: {\n      cx: 300,\n      cy: 200,\n      r: 100,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  canvas2.appendChild(circle2);\n  circle2.addEventListener('mouseenter', () => {\n    circle2.attr('fill', '#2FC25B');\n  });\n\n  circle2.addEventListener('mouseleave', () => {\n    circle2.attr('fill', '#1890FF');\n  });\n\n  // canvas2.appendChild(\n  //   new HTML({\n  //     id: 'html2',\n  //     style: {\n  //       x: 100,\n  //       y: 100,\n  //       width: 100,\n  //       height: 100,\n  //       innerHTML: 'canvas2',\n  //       pointerEvents: 'none',\n  //     },\n  //   }),\n  // );\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas1.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg'])\n  .onChange((renderer) => {\n    canvas1.setRenderer(\n      renderer === 'canvas'\n        ? canvasRenderer1\n        : renderer === 'webgl'\n        ? webglRenderer1\n        : svgRenderer1,\n    );\n  });\nrendererFolder.open();\n",title:{zh:"canvas.container 使用 DOM 元素",en:"Use a DOM element for container"},filename:"dom-canvas.js",isNew:!1},{id:"shared-container",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer1 = new CanvasRenderer();\nconst webglRenderer1 = new WebGLRenderer();\nconst svgRenderer1 = new SVGRenderer();\nconst canvasRenderer2 = new CanvasRenderer();\nconst webglRenderer2 = new WebGLRenderer();\nconst svgRenderer2 = new SVGRenderer();\n\n// create a canvas\nconst canvas1 = new Canvas({\n  container: 'container',\n  width: 500,\n  height: 500,\n  renderer: canvasRenderer1,\n  supportsMutipleCanvasesInOneContainer: true,\n});\n\nconst canvas2 = new Canvas({\n  container: 'container',\n  width: 500,\n  height: 500,\n  renderer: canvasRenderer2,\n  supportsMutipleCanvasesInOneContainer: true,\n});\n\ncanvas1.addEventListener(CanvasEvent.READY, () => {\n  // create a circle\n  const circle1 = new Circle({\n    id: 'circle1',\n    style: {\n      cx: 300,\n      cy: 200,\n      r: 100,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  canvas1.appendChild(circle1);\n  circle1.addEventListener('mouseenter', () => {\n    circle1.attr('fill', '#2FC25B');\n  });\n\n  circle1.addEventListener('mouseleave', () => {\n    circle1.attr('fill', '#1890FF');\n  });\n});\n\ncanvas2.addEventListener(CanvasEvent.READY, () => {\n  const circle2 = new Circle({\n    id: 'circle2',\n    style: {\n      cx: 300,\n      cy: 200,\n      r: 100,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  canvas2.appendChild(circle2);\n  circle2.addEventListener('mouseenter', () => {\n    circle2.attr('fill', '#2FC25B');\n  });\n\n  circle2.addEventListener('mouseleave', () => {\n    circle2.attr('fill', '#1890FF');\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas1.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg'])\n  .onChange((renderer) => {\n    canvas1.setRenderer(\n      renderer === 'canvas'\n        ? canvasRenderer1\n        : renderer === 'webgl'\n        ? webglRenderer1\n        : svgRenderer1,\n    );\n    canvas2.setRenderer(\n      renderer === 'canvas'\n        ? canvasRenderer2\n        : renderer === 'webgl'\n        ? webglRenderer2\n        : svgRenderer2,\n    );\n  });\nrendererFolder.open();\n",title:{zh:"共享同一个 container",en:"Multiple canvases share the same container"},filename:"shared-container.js",isNew:!1},{id:"user-defined-canvas",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport Stats from 'stats.js';\n\nconst $canvas = document.createElement('canvas');\nconst dpr = window.devicePixelRatio;\n$canvas.width = dpr * 600;\n$canvas.height = dpr * 500;\n$canvas.style.width = '600px';\n$canvas.style.height = '500px';\ndocument.getElementById('container').appendChild($canvas);\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\n\n// create a canvas\nconst canvas = new Canvas({\n  canvas: $canvas,\n  renderer: canvasRenderer,\n});\n\nconst circle = new Circle({\n  style: {\n    cx: 300,\n    cy: 200,\n    r: 100,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle);\n  circle.addEventListener('pointerenter', () => {\n    circle.attr('fill', '#2FC25B');\n  });\n\n  circle.addEventListener('pointerleave', () => {\n    circle.attr('fill', '#1890FF');\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n",title:{zh:"使用用户创建的 <canvas>",en:"Use user-defined <canvas>"},filename:"user-defined-canvas.js",isNew:!1},{id:"multi-canvas",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*VSOLRbXqEeMAAAAAAAAAAAAAARQnAQ",source:"import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport SplitPane from 'react-split-pane';\nimport Stats from 'stats.js';\nimport { Canvas, Group } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Mesh, CubeGeometry, MeshBasicMaterial, Plugin as Plugin3D } from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\n\n// scene1 + scene2\nconst TOTAL_WIDTH = 600;\nconst SCENE_HEIGHT = 500;\n\nconst App = function MultiWorld() {\n  let canvas1;\n  let canvas2;\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('container');\n    $wrapper.appendChild($stats);\n\n    // create a webgl renderer\n    const webglRenderer1 = new WebGLRenderer();\n    webglRenderer1.registerPlugin(new Plugin3D());\n    webglRenderer1.registerPlugin(new PluginControl());\n\n    const webglRenderer2 = new WebGLRenderer();\n    webglRenderer2.registerPlugin(new Plugin3D());\n    webglRenderer2.registerPlugin(new PluginControl());\n\n    // create a canvas\n    canvas1 = new Canvas({\n      container: 'container1',\n      width: TOTAL_WIDTH / 2,\n      height: SCENE_HEIGHT,\n      renderer: webglRenderer1,\n    });\n\n    canvas2 = new Canvas({\n      container: 'container2',\n      width: TOTAL_WIDTH / 2,\n      height: SCENE_HEIGHT,\n      renderer: webglRenderer2,\n    });\n\n    // scene 1\n    const camera1 = canvas1.getCamera();\n    camera1\n      .setPosition(150, 20, 500)\n      .setFocalPoint(150, 250, 0)\n      .setPerspective(0.1, 1000, 75, TOTAL_WIDTH / 2 / SCENE_HEIGHT);\n\n    (async () => {\n      await canvas1.ready;\n\n      const plugin1 = webglRenderer1.getPlugin('device-renderer');\n      const device1 = plugin1.getDevice();\n      const map = plugin1.loadTexture(\n        'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*_aqoS73Se3sAAAAAAAAAAAAAARQnAQ',\n      );\n\n      await canvas2.ready;\n      const plugin2 = webglRenderer2.getPlugin('device-renderer');\n      const device2 = plugin2.getDevice();\n\n      const group1 = new Group();\n      const cubeGeometry = new CubeGeometry(device1, {\n        width: 200,\n        height: 200,\n        depth: 200,\n      });\n      const basicMaterial = new MeshBasicMaterial(device1, {\n        map,\n      });\n\n      const cube1 = new Mesh({\n        style: {\n          fill: '#1890FF',\n          opacity: 1,\n          geometry: cubeGeometry,\n          material: basicMaterial,\n        },\n      });\n\n      group1.appendChild(cube1);\n      group1.setPosition(150, 250, 0);\n      canvas1.appendChild(group1);\n\n      // scene2\n      const camera2 = canvas2.getCamera();\n      camera2.setPosition(150, 20, 500).setFocalPoint(150, 250, 0);\n\n      const map2 = plugin2.loadTexture(\n        'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*_aqoS73Se3sAAAAAAAAAAAAAARQnAQ',\n      );\n\n      const cubeGeometry2 = new CubeGeometry(device2, {\n        width: 200,\n        height: 200,\n        depth: 200,\n      });\n      const basicMaterial2 = new MeshBasicMaterial(device2, {\n        map: map2,\n      });\n\n      const cube2 = new Mesh({\n        style: {\n          fill: '#1890FF',\n          opacity: 1,\n          geometry: cubeGeometry2,\n          material: basicMaterial2,\n        },\n      });\n\n      const group2 = new Group();\n      group2.appendChild(cube2);\n      group2.setPosition(150, 250, 0);\n      canvas2.appendChild(group2);\n    })();\n  });\n\n  return (\n    <>\n      <SplitPane\n        split=\"vertical\"\n        defaultSize={TOTAL_WIDTH / 2}\n        onChange={(width) => {\n          canvas1.resize(width, SCENE_HEIGHT);\n          canvas2.resize(TOTAL_WIDTH - width, SCENE_HEIGHT);\n        }}\n      >\n        <div\n          id=\"container1\"\n          style={{\n            width: '100%',\n            height: '100%',\n          }}\n        />\n        <div\n          id=\"container2\"\n          style={{\n            width: '100%',\n            height: '100%',\n          }}\n        />\n      </SplitPane>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"多个画布",en:"Multiple canvas"},filename:"multi-canvas.tsx",isNew:!1},{id:"supports-css-transform",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst $wrapper = document.getElementById('container');\n$wrapper.style.transform = 'scale(1.1)';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a circle\nconst circle = new Circle({\n  style: {\n    cx: 300,\n    cy: 200,\n    r: 100,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    shadowColor: 'black',\n    shadowBlur: 20,\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // add a circle to canvas\n  canvas.appendChild(circle);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"支持在容器上应用 CSS Transform",en:"Support applying CSS Transform on container"},filename:"supports-css-transform.js",isNew:!1},{id:"offscreen-canvas",source:"import { setupTransferableMethodsOnMain } from '@naoak/workerize-transferable';\n// @ts-ignore\nimport Worker from 'workerize-loader?inline!./main.worker.js';\n\nconst worker = new Worker();\n\n// create a canvas in main thread\nconst $canvas = document.createElement('canvas') as HTMLCanvasElement;\nconst dpr = window.devicePixelRatio;\n$canvas.height = dpr * 600;\n$canvas.width = dpr * 500;\n$canvas.style.height = '600px';\n$canvas.style.width = '500px';\ndocument.getElementById('container').appendChild($canvas);\n\nconst { left, top } = $canvas.getBoundingClientRect();\nconst clonePointerEvent = (e: PointerEvent) => {\n  return {\n    cancelable: e.cancelable,\n    pointerId: e.pointerId,\n    width: e.width,\n    height: e.height,\n    isPrimary: e.isPrimary,\n    pointerType: e.pointerType,\n    pressure: e.pressure,\n    tangentialPressure: e.tangentialPressure,\n    tiltX: e.tiltX,\n    tiltY: e.tiltY,\n    twist: e.twist,\n    isTrusted: e.isTrusted,\n    type: e.type,\n    altKey: e.altKey,\n    button: e.button,\n    buttons: e.buttons,\n    clientX: e.clientX - left, // account for $canvas' offset\n    clientY: e.clientY - top,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    movementX: e.movementX,\n    movementY: e.movementY,\n    pageX: e.pageX,\n    pageY: e.pageY,\n    screenX: e.screenX,\n    screenY: e.screenY,\n  };\n};\n\n// listen to pointer events and transfer them to worker\ndocument.addEventListener(\n  'pointermove',\n  (e) => {\n    worker.triggerEvent('pointermove', clonePointerEvent(e));\n  },\n  true,\n);\n$canvas.addEventListener(\n  'pointerdown',\n  (e) => {\n    worker.triggerEvent('pointerdown', clonePointerEvent(e));\n  },\n  true,\n);\n$canvas.addEventListener(\n  'pointerleave',\n  (e) => {\n    worker.triggerEvent('pointerleave', clonePointerEvent(e));\n  },\n  true,\n);\n$canvas.addEventListener(\n  'pointerover',\n  (e) => {\n    worker.triggerEvent('pointerover', clonePointerEvent(e));\n  },\n  true,\n);\nwindow.addEventListener(\n  'pointerup',\n  (e) => {\n    worker.triggerEvent('pointerup', clonePointerEvent(e));\n  },\n  true,\n);\n\n// transfer canvas to worker\nconst offscreen = $canvas.transferControlToOffscreen();\n\nsetupTransferableMethodsOnMain(\n  // worker instance\n  worker,\n  // the name of method which use some transferables\n  {\n    render: {\n      // pick a transferable object from the method parameters\n      pickTransferablesFromParams: (params) => [params[0]],\n    },\n  },\n);\n\n(async () => {\n  // do rendering in WebWorker\n  await worker.render(offscreen, dpr);\n})();\n",title:{zh:"OffscreenCanvas",en:"OffscreenCanvas"},filename:"offscreen-canvas.ts",isNew:!1}],icon:"",id:"container",title:{en:"Canvas Container",zh:"画布容器"},api:null,childrenKey:"demos",order:0},{demos:[{id:"background",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*qq3MR53YLD0AAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// set container's background\nconst $wrapper = document.getElementById('container');\n$wrapper.style.background = 'grey';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n  background: 'rgba(255, 0, 0, 0.5)',\n});\n\n// create a circle\nconst circle = new Circle({\n  style: {\n    cx: 300,\n    cy: 200,\n    r: 100,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // add a circle to canvas\n  canvas.appendChild(circle);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['canvas', 'svg', 'webgl'])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst circleFolder = gui.addFolder('circle');\nconst circleConfig = {\n  r: 100,\n};\ncircleFolder.add(circleConfig, 'r', 50, 200).onChange((r) => {\n  circle.style.r = r;\n});\n",title:{zh:"设置画布背景色",en:"Set background of Canvas"},filename:"background.js",isNew:!1},{id:"resize",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*tJDfSaJOfmgAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport * as lil from 'lil-gui';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport SplitPane from 'react-split-pane';\nimport Stats from 'stats.js';\n\n// scene1 + scene2\nconst TOTAL_WIDTH = 600;\nconst SCENE_HEIGHT = 500;\n\nconst App = function MultiWorld() {\n  let canvas1: Canvas;\n  let canvas2: Canvas;\n  useEffect(() => {\n    const stats = new Stats();\n    stats.showPanel(0);\n    const $stats = stats.dom;\n    $stats.style.position = 'absolute';\n    $stats.style.left = '0px';\n    $stats.style.top = '0px';\n    const $wrapper = document.getElementById('container');\n    $wrapper.appendChild($stats);\n\n    // create a canvas renderer\n    const canvasRenderer1 = new CanvasRenderer();\n    const canvasRenderer2 = new CanvasRenderer();\n    const svgRenderer1 = new SVGRenderer();\n    const svgRenderer2 = new SVGRenderer();\n    const webglRenderer1 = new WebGLRenderer();\n    const webglRenderer2 = new WebGLRenderer();\n    const canvaskitRenderer1 = new CanvaskitRenderer({\n      wasmDir: '/',\n    });\n    const canvaskitRenderer2 = new CanvaskitRenderer({\n      wasmDir: '/',\n    });\n\n    // create a canvas\n    canvas1 = new Canvas({\n      container: 'container1',\n      width: TOTAL_WIDTH / 2,\n      height: SCENE_HEIGHT,\n      renderer: canvasRenderer1,\n    });\n\n    canvas2 = new Canvas({\n      container: 'container2',\n      width: TOTAL_WIDTH / 2,\n      height: SCENE_HEIGHT,\n      renderer: canvasRenderer2,\n    });\n\n    canvas1.addEventListener(CanvasEvent.READY, () => {\n      const circle1 = new Circle({\n        style: {\n          cx: 100,\n          cy: 100,\n          r: 100,\n          fill: 'blue',\n        },\n      });\n      canvas1.appendChild(circle1);\n      circle1.on('mouseenter', () => {\n        circle1.attr('fill', 'yellow');\n      });\n      circle1.on('mouseleave', () => {\n        circle1.attr('fill', 'blue');\n      });\n    });\n\n    canvas2.addEventListener(CanvasEvent.READY, () => {\n      const circle2 = new Circle({\n        style: {\n          cx: 100,\n          cy: 100,\n          r: 100,\n          fill: 'red',\n        },\n      });\n      canvas2.appendChild(circle2);\n      circle2.on('mouseenter', () => {\n        circle2.attr('fill', 'green');\n      });\n      circle2.on('mouseleave', () => {\n        circle2.attr('fill', 'red');\n      });\n    });\n\n    // GUI\n    const gui = new lil.GUI({ autoPlace: false });\n    $wrapper.appendChild(gui.domElement);\n\n    const rendererFolder = gui.addFolder('renderer');\n    const rendererConfig = {\n      renderer: 'canvas',\n      devicePixelRatio: window.devicePixelRatio,\n    };\n    rendererFolder\n      .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg', 'canvaskit'])\n      .onChange((renderer) => {\n        canvas1.setRenderer(\n          renderer === 'canvas'\n            ? canvasRenderer1\n            : renderer === 'webgl'\n            ? webglRenderer1\n            : renderer === 'svg'\n            ? svgRenderer1\n            : canvaskitRenderer1,\n        );\n        canvas2.setRenderer(\n          renderer === 'canvas'\n            ? canvasRenderer2\n            : renderer === 'webgl'\n            ? webglRenderer2\n            : renderer === 'svg'\n            ? svgRenderer2\n            : canvaskitRenderer2,\n        );\n      });\n    rendererFolder.add(rendererConfig, 'devicePixelRatio', 0.5, 5).onChange((dpr) => {\n      canvas1.getConfig().devicePixelRatio = dpr;\n    });\n    rendererFolder.open();\n  });\n\n  return (\n    <>\n      <SplitPane\n        split=\"vertical\"\n        defaultSize={TOTAL_WIDTH / 2}\n        onChange={(width) => {\n          canvas1.resize(width, SCENE_HEIGHT);\n          canvas2.resize(TOTAL_WIDTH - width, SCENE_HEIGHT);\n        }}\n      >\n        <div\n          id=\"container1\"\n          style={{\n            width: '100%',\n            height: '100%',\n          }}\n        />\n        <div\n          id=\"container2\"\n          style={{\n            width: '100%',\n            height: '100%',\n          }}\n        />\n      </SplitPane>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"改变画布大小",en:"Resize canvas"},filename:"resize.tsx",isNew:!1},{id:"rendering-on-demand",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*FfHBTr2ACAkAAAAAAAAAAABkARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Group } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\nsolarSystem\n   |    |\n   |   sun\n   |\n earthOrbit\n   |    |\n   |  earth\n   |\n  moonOrbit\n      |\n     moon\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer({\n  enableAutoRendering: false,\n});\nconst webglRenderer = new WebGLRenderer({\n  enableAutoRendering: false,\n});\nconst svgRenderer = new SVGRenderer({\n  enableAutoRendering: false,\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const solarSystem = new Group({\n    id: 'solarSystem',\n  });\n  const earthOrbit = new Group({\n    id: 'earthOrbit',\n  });\n  const moonOrbit = new Group({\n    id: 'moonOrbit',\n  });\n\n  const sun = new Circle({\n    id: 'sun',\n    style: {\n      r: 100,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  const earth = new Circle({\n    id: 'earth',\n    style: {\n      r: 50,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  const moon = new Circle({\n    id: 'moon',\n    style: {\n      r: 25,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n\n  solarSystem.appendChild(sun);\n  solarSystem.appendChild(earthOrbit);\n  earthOrbit.appendChild(earth);\n  earthOrbit.appendChild(moonOrbit);\n  moonOrbit.appendChild(moon);\n\n  solarSystem.setPosition(300, 250);\n  earthOrbit.translate(100, 0);\n  moonOrbit.translate(100, 0);\n\n  canvas.appendChild(solarSystem);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg'])\n    .onChange((renderer) => {\n      canvas.setRenderer(\n        renderer === 'canvas'\n          ? canvasRenderer\n          : renderer === 'webgl'\n          ? webglRenderer\n          : svgRenderer,\n      );\n    });\n  rendererFolder.open();\n\n  // create a main loop\n  const tick = () => {\n    if (stats) {\n      stats.update();\n    }\n\n    // call `render` in each frame\n    canvas.render();\n\n    solarSystem.rotateLocal(1);\n    earthOrbit.rotateLocal(2);\n\n    requestAnimationFrame(tick);\n  };\n  tick();\n});\n",title:{zh:"按需渲染",en:"Rendering on demand"},filename:"rendering-on-demand.js",isNew:!1},{id:"coordinates",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*kPfcTKwZG90AAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Text, Line } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer({\n  enableDirtyRectangleRenderingDebug: true,\n});\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\nconst camera = canvas.getCamera();\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // add a circle to canvas\n  const circle = new Circle({\n    style: {\n      cx: 300,\n      cy: 200,\n      r: 100,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n      cursor: 'pointer',\n    },\n  });\n\n  canvas.appendChild(circle);\n\n  circle.addEventListener('mouseenter', () => {\n    circle.style.fill = '#2FC25B';\n  });\n\n  circle.addEventListener('mouseleave', () => {\n    circle.style.fill = '#1890FF';\n  });\n\n  const clientText = new Text({\n    style: {\n      fill: '#000',\n      fontSize: 22,\n      text: 'Client: ',\n      textBaseline: 'middle',\n    },\n  });\n  clientText.setPosition(100, 80);\n  canvas.appendChild(clientText);\n\n  const canvasText = clientText.cloneNode();\n  canvasText.style.text = 'Canvas: ';\n  canvasText.setPosition(100, 110);\n  canvas.appendChild(canvasText);\n\n  const viewportText = clientText.cloneNode();\n  viewportText.style.text = 'Viewport: ';\n  viewportText.setPosition(100, 140);\n  canvas.appendChild(viewportText);\n\n  const screenText = clientText.cloneNode();\n  screenText.style.text = 'Screen: ';\n  screenText.setPosition(100, 20);\n  canvas.appendChild(screenText);\n\n  const pageText = clientText.cloneNode();\n  pageText.style.text = 'Page: ';\n  pageText.setPosition(100, 50);\n  canvas.appendChild(pageText);\n\n  const vLine = new Line({\n    style: {\n      stroke: 'black',\n      strokeWidth: 2,\n      pointerEvents: 'none',\n    },\n  });\n  const hLine = new Line({\n    style: {\n      stroke: 'black',\n      strokeWidth: 2,\n      pointerEvents: 'none',\n    },\n  });\n  canvas.appendChild(vLine);\n  canvas.appendChild(hLine);\n\n  canvas.addEventListener('mousemove', (e) => {\n    const screenX = e.screenX;\n    const screenY = e.screenY;\n    screenText.style.text = `Screen: ${screenX}, ${screenY}`;\n\n    const pageX = e.pageX;\n    const pageY = e.pageY;\n    pageText.style.text = `Page: ${pageX}, ${pageY}`;\n\n    const clientX = e.clientX;\n    const clientY = e.clientY;\n    clientText.style.text = `Client: ${clientX}, ${clientY}`;\n\n    const canvasX = e.canvasX;\n    const canvasY = e.canvasY;\n    canvasText.style.text = `Canvas: ${canvasX}, ${canvasY}`;\n\n    const viewportX = e.viewportX;\n    const viewportY = e.viewportY;\n    viewportText.style.text = `Viewport: ${viewportX}, ${viewportY}`;\n\n    // AuxiliaryLine\n    const hStart = { x: 0, y: e.viewportY };\n    const hEnd = { x: canvas.getConfig().width, y: e.viewportY };\n    hLine.style.x1 = canvas.viewport2Canvas(hStart).x;\n    hLine.style.y1 = canvas.viewport2Canvas(hStart).y;\n    hLine.style.x2 = canvas.viewport2Canvas(hEnd).x;\n    hLine.style.y2 = canvas.viewport2Canvas(hEnd).y;\n\n    const vStart = { x: e.viewportX, y: 0 };\n    const vEnd = { x: e.viewportX, y: canvas.getConfig().height };\n    vLine.style.x1 = canvas.viewport2Canvas(vStart).x;\n    vLine.style.y1 = canvas.viewport2Canvas(vStart).y;\n    vLine.style.x2 = canvas.viewport2Canvas(vEnd).x;\n    vLine.style.y2 = canvas.viewport2Canvas(vEnd).y;\n  });\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // display dirty rectangle\n  const $dirtyRectangle = document.createElement('div');\n  $dirtyRectangle.style.cssText = `\n  position: absolute;\n  pointer-events: none;\n  background: rgba(255, 0, 0, 0.5);\n  `;\n  $wrapper.appendChild($dirtyRectangle);\n\n  canvas.addEventListener(CanvasEvent.DIRTY_RECTANGLE, (e) => {\n    const { dirtyRect } = e.detail;\n    const { x, y, width, height } = dirtyRect;\n    const dpr = window.devicePixelRatio;\n\n    // convert from canvas coords to viewport\n    $dirtyRectangle.style.left = `${x / dpr}px`;\n    $dirtyRectangle.style.top = `${y / dpr}px`;\n    $dirtyRectangle.style.width = `${width / dpr}px`;\n    $dirtyRectangle.style.height = `${height / dpr}px`;\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg'])\n    .onChange((renderer) => {\n      canvas.setRenderer(\n        renderer === 'canvas'\n          ? canvasRenderer\n          : renderer === 'webgl'\n          ? webglRenderer\n          : svgRenderer,\n      );\n    });\n  rendererFolder.open();\n\n  const cameraFolder = gui.addFolder('camera actions');\n  const cameraConfig = {\n    x: 300,\n    y: 250,\n    panX: 0,\n    panY: 0,\n    zoom: 1,\n    roll: 0,\n  };\n\n  const origin = camera.getPosition();\n  cameraFolder.add(cameraConfig, 'x', 0, 500).onChange((x) => {\n    const current = camera.getPosition();\n    camera.setPosition(x, current[1]);\n    camera.setFocalPoint(x, current[1]);\n  });\n  cameraFolder.add(cameraConfig, 'y', 0, 500).onChange((y) => {\n    const current = camera.getPosition();\n    camera.setPosition(current[0], y);\n    camera.setFocalPoint(current[0], y);\n  });\n  cameraFolder.add(cameraConfig, 'panX', -300, 300).onChange((panX) => {\n    const current = camera.getPosition();\n    camera.pan(origin[0] + panX - current[0], 0);\n  });\n  cameraFolder.add(cameraConfig, 'panY', -300, 300).onChange((panY) => {\n    const current = camera.getPosition();\n    camera.pan(0, origin[1] + panY - current[1]);\n  });\n  cameraFolder.add(cameraConfig, 'roll', -90, 90).onChange((roll) => {\n    camera.rotate(0, 0, roll);\n  });\n  cameraFolder.add(cameraConfig, 'zoom', 0, 10).onChange((zoom) => {\n    camera.setZoom(zoom);\n  });\n  cameraFolder.open();\n});\n",title:{zh:"坐标系转换",en:"Coordinates"},filename:"coordinates.js",isNew:!1},{id:"element-from-point",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*74P9SbUsM5QAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, Circle, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * Pick target by calling API instead of interactive events.\n * DisplayObject's `interactive` & `visibility` will affect picking but not `opacity`.\n *\n * You can move the red picking point with mouse click or lil-gui.\n *\n * more informations @see /zh/docs/api/builtin-objects/document#elementsfrompoint\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // create a circle\n  const circle1 = new Circle({\n    id: 'circle1',\n    style: {\n      cx: 100,\n      cy: 100,\n      r: 100,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  canvas.appendChild(circle1);\n\n  // clone another circle\n  const circle2 = circle1.cloneNode();\n  circle2.id = 'circle2';\n  circle2.translate(50, 50);\n  canvas.appendChild(circle2);\n\n  const result = new Text({\n    interactive: false, // we don't want picking itself\n    style: {\n      x: 50,\n      y: 300,\n      fontSize: 32,\n      fill: 'black',\n    },\n  });\n  canvas.appendChild(result);\n\n  // represent the picking point\n  const pickingPoint = new Circle({\n    interactive: false, // we don't want picking itself\n    style: {\n      cx: 150,\n      cy: 150,\n      r: 20,\n      fill: '#F04864',\n    },\n  });\n  canvas.appendChild(pickingPoint);\n\n  canvas.addEventListener('click', (e) => {\n    pickingPoint.setLocalPosition(e.canvasX, e.canvasY);\n\n    pickingConfig.x = e.canvasX;\n    pickingConfig.y = e.canvasY;\n  });\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg'])\n    .onChange((renderer) => {\n      canvas.setRenderer(\n        renderer === 'canvas'\n          ? canvasRenderer\n          : renderer === 'webgl'\n          ? webglRenderer\n          : svgRenderer,\n      );\n    });\n  rendererFolder.open();\n\n  const pickingFolder = gui.addFolder('point for picking');\n  const pickingConfig = {\n    x: 150,\n    y: 150,\n    elementFromPoint: async () => {\n      const target = await canvas.document.elementFromPoint(\n        pickingConfig.x,\n        pickingConfig.y,\n      );\n\n      result.style.text = (target && target.id) || 'null';\n    },\n    elementsFromPoint: async () => {\n      const targets = await canvas.document.elementsFromPoint(\n        pickingConfig.x,\n        pickingConfig.y,\n      );\n\n      result.style.text =\n        '[' + targets.map((target) => target.id).join(', ') + ']';\n    },\n  };\n  pickingFolder\n    .add(pickingConfig, 'x', -100, 400)\n    .onChange((x) => {\n      const [_, y] = pickingPoint.getLocalPosition();\n      pickingPoint.setLocalPosition(x, y);\n    })\n    .listen();\n  pickingFolder\n    .add(pickingConfig, 'y', -100, 400)\n    .onChange((y) => {\n      const [x, _] = pickingPoint.getLocalPosition();\n      pickingPoint.setLocalPosition(x, y);\n    })\n    .listen();\n  pickingFolder.add(pickingConfig, 'elementFromPoint').name('elementFromPoint');\n  pickingFolder\n    .add(pickingConfig, 'elementsFromPoint')\n    .name('elementsFromPoint');\n  pickingFolder.open();\n\n  const circle1Folder = gui.addFolder('circle1');\n  const circle1Config = {\n    interactive: true,\n    visibility: 'visible',\n    opacity: 1,\n  };\n  circle1Folder.add(circle1Config, 'interactive').onChange((interactive) => {\n    circle1.interactive = interactive;\n  });\n  circle1Folder\n    .add(circle1Config, 'visibility', ['visible', 'hidden'])\n    .onChange((visibility) => {\n      circle1.style.visibility = visibility;\n    });\n  circle1Folder.add(circle1Config, 'opacity', 0, 1).onChange((opacity) => {\n    circle1.style.opacity = opacity;\n  });\n  const circle2Folder = gui.addFolder('circle2');\n  const circle2Config = {\n    interactive: true,\n    visibility: 'visible',\n    opacity: 1,\n  };\n  circle2Folder.add(circle2Config, 'interactive').onChange((interactive) => {\n    circle2.interactive = interactive;\n  });\n  circle2Folder\n    .add(circle2Config, 'visibility', ['visible', 'hidden'])\n    .onChange((visibility) => {\n      circle2.style.visibility = visibility;\n    });\n  circle2Folder.add(circle2Config, 'opacity', 0, 1).onChange((opacity) => {\n    circle2.style.opacity = opacity;\n  });\n});\n",title:{zh:"通过 API 方式完成拾取",en:"Use picking API"},filename:"element-from-point.js",isNew:!1}],icon:"",id:"canvas-basic",title:{en:"Canvas",zh:"画布基础能力"},api:null,childrenKey:"demos",order:1}],childrenKey:"examples"},{id:"camera",title:{zh:"相机",en:"Camera"},examples:[{demos:[{id:"ortho",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*5cbxQ5CF1GEAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Group } from '@antv/g';\nimport {\n  CubeGeometry,\n  Mesh,\n  MeshBasicMaterial,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\nwebglRenderer.registerPlugin(new Plugin3D());\nwebglRenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\n// create an orthographic camera\nconst camera = canvas.getCamera();\nconst group = new Group();\n\n(async () => {\n  await canvas.ready;\n\n  const plugin = webglRenderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  const map = plugin.loadTexture(\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8TlCRIsKeUkAAAAAAAAAAAAAARQnAQ',\n  );\n\n  const cubeGeometry = new CubeGeometry(device, {\n    width: 200,\n    height: 200,\n    depth: 200,\n  });\n  const basicMaterial = new MeshBasicMaterial(device, {\n    map,\n  });\n\n  const cube = new Mesh({\n    style: {\n      fill: '#1890FF',\n      opacity: 1,\n      geometry: cubeGeometry,\n      material: basicMaterial,\n    },\n  });\n  cube.setPosition(300, 250, 0);\n\n  canvas.appendChild(cube);\n})();\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n  group.rotate(0, 1, 0);\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst cameraFolder = gui.addFolder('orthographic projection');\nconst cameraConfig = {\n  near: 0.1,\n  far: 1000,\n  zoom: 1,\n};\ncameraFolder.add(cameraConfig, 'near', 0, 600).onChange((near) => {\n  camera.setNear(near);\n});\ncameraFolder.add(cameraConfig, 'far', 0, 1000).onChange((far) => {\n  camera.setFar(far);\n});\ncameraFolder.add(cameraConfig, 'zoom', 0, 10).onChange((zoom) => {\n  camera.setZoom(zoom);\n});\ncameraFolder.open();\n",title:{zh:"正交投影相机",en:"Orthographic camera"},filename:"ortho.js",isNew:!1},{id:"perspective",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*wrMTSZeQGvsAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Group } from '@antv/g';\nimport {\n  CubeGeometry,\n  Mesh,\n  MeshBasicMaterial,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a webgl renderer\nconst webglRenderer = new WebGLRenderer();\nwebglRenderer.registerPlugin(new Plugin3D());\nwebglRenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\n// create a perspective camera\nconst camera = canvas.getCamera();\ncamera.setPerspective(0.1, 1000, 75, 600 / 500);\n\nconst group = new Group();\n\n(async () => {\n  await canvas.ready;\n  const plugin = webglRenderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n  const map = plugin.loadTexture(\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8TlCRIsKeUkAAAAAAAAAAAAAARQnAQ',\n  );\n\n  const cubeGeometry = new CubeGeometry(device, {\n    width: 200,\n    height: 200,\n    depth: 200,\n  });\n  const basicMaterial = new MeshBasicMaterial(device, {\n    map,\n  });\n\n  const cube = new Mesh({\n    style: {\n      fill: '#1890FF',\n      opacity: 1,\n      geometry: cubeGeometry,\n      material: basicMaterial,\n    },\n  });\n  cube.setPosition(300, 250, 0);\n\n  canvas.appendChild(cube);\n})();\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n  group.rotate(0, 1, 0);\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\n\nconst cameraFolder = gui.addFolder('perspective');\nconst cameraConfig = {\n  fov: 75,\n  near: 0.1,\n  far: 1000,\n  zoom: 1,\n};\ncameraFolder.add(cameraConfig, 'fov', 0, 180).onChange((fov) => {\n  camera.setFov(fov);\n});\ncameraFolder.add(cameraConfig, 'near', 0, 600).onChange((near) => {\n  camera.setNear(near);\n});\ncameraFolder.add(cameraConfig, 'far', 0, 1000).onChange((far) => {\n  camera.setFar(far);\n});\ncameraFolder.add(cameraConfig, 'zoom', 0, 10).onChange((zoom) => {\n  camera.setZoom(zoom);\n});\ncameraFolder.open();\n",title:{zh:"透视投影相机",en:"Perspective camera"},filename:"perspective.js",isNew:!1}],icon:"",id:"projection-mode",title:{en:"Camera Projection Mode",zh:"相机投影模式"},api:null,childrenKey:"demos",order:1},{demos:[{id:"landmark2",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*EL2XSL5qSQ8AAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst camera = canvas.getCamera();\n\n// create landmarks\ncamera.createLandmark('reset', {\n  position: [300, 250],\n  focalPoint: [300, 250],\n  zoom: 1,\n});\ncamera.createLandmark('look at red circle', {\n  position: [200, 200],\n  focalPoint: [200, 200],\n  zoom: 2,\n  roll: 30,\n});\ncamera.createLandmark('look at green circle', {\n  position: [400, 400],\n  focalPoint: [400, 400],\n  zoom: 2,\n});\n\nconst circle1 = new Circle({\n  style: {\n    cx: 200,\n    cy: 200,\n    r: 50,\n    fill: 'red',\n  },\n});\nconst circle2 = circle1.cloneNode();\ncircle2.style.cx = 400;\ncircle2.style.cy = 400;\ncircle2.style.fill = 'green';\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle1);\n  canvas.appendChild(circle2);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst cameraFolder = gui.addFolder('camera landmarks');\nconst cameraConfig = {\n  goToMark1: () => {\n    camera.gotoLandmark('reset', {\n      duration: 1000,\n      easing: 'ease-in',\n      onfinish: () => {\n        console.log('reset finished');\n      },\n    });\n  },\n  goToMark2: () => {\n    camera.gotoLandmark('look at red circle', {\n      duration: 300,\n      easing: 'linear',\n    });\n  },\n  goToMark3: () => {\n    camera.gotoLandmark('look at green circle', {\n      duration: 300,\n      easing: 'linear',\n    });\n  },\n};\ncameraFolder.add(cameraConfig, 'goToMark1').name('reset');\ncameraFolder.add(cameraConfig, 'goToMark2').name('look at red circle');\ncameraFolder.add(cameraConfig, 'goToMark3').name('look at green circle');\ncameraFolder.open();\n",title:{zh:"2D 场景下的相机动画",en:"Landmark"},filename:"landmark2.js",isNew:!1},{id:"landmark",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*o4eKT4ZQfJcAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Line, CameraType } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshPhongMaterial,\n  SphereGeometry,\n  DirectionalLight,\n  Mesh,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport {\n  forceLink,\n  forceSimulation,\n  forceManyBody,\n  forceCenter,\n} from 'd3-force-3d';\n\n// https://bl.ocks.org/vasturiano/f59675656258d3f490e9faa40828c0e7\nconst dataset = {\n  nodes: [\n    {\n      id: 'Myriel',\n      group: 1,\n    },\n    {\n      id: 'Napoleon',\n      group: 1,\n    },\n    {\n      id: 'Mlle.Baptistine',\n      group: 1,\n    },\n    {\n      id: 'Mme.Magloire',\n      group: 1,\n    },\n    {\n      id: 'CountessdeLo',\n      group: 1,\n    },\n    {\n      id: 'Geborand',\n      group: 1,\n    },\n    {\n      id: 'Champtercier',\n      group: 1,\n    },\n    {\n      id: 'Cravatte',\n      group: 1,\n    },\n    {\n      id: 'Count',\n      group: 1,\n    },\n    {\n      id: 'OldMan',\n      group: 1,\n    },\n    {\n      id: 'Labarre',\n      group: 2,\n    },\n    {\n      id: 'Valjean',\n      group: 2,\n    },\n    {\n      id: 'Marguerite',\n      group: 3,\n    },\n    {\n      id: 'Mme.deR',\n      group: 2,\n    },\n    {\n      id: 'Isabeau',\n      group: 2,\n    },\n    {\n      id: 'Gervais',\n      group: 2,\n    },\n    {\n      id: 'Tholomyes',\n      group: 3,\n    },\n    {\n      id: 'Listolier',\n      group: 3,\n    },\n    {\n      id: 'Fameuil',\n      group: 3,\n    },\n    {\n      id: 'Blacheville',\n      group: 3,\n    },\n    {\n      id: 'Favourite',\n      group: 3,\n    },\n    {\n      id: 'Dahlia',\n      group: 3,\n    },\n    {\n      id: 'Zephine',\n      group: 3,\n    },\n    {\n      id: 'Fantine',\n      group: 3,\n    },\n    {\n      id: 'Mme.Thenardier',\n      group: 4,\n    },\n    {\n      id: 'Thenardier',\n      group: 4,\n    },\n    {\n      id: 'Cosette',\n      group: 5,\n    },\n    {\n      id: 'Javert',\n      group: 4,\n    },\n    {\n      id: 'Fauchelevent',\n      group: 0,\n    },\n    {\n      id: 'Bamatabois',\n      group: 2,\n    },\n    {\n      id: 'Perpetue',\n      group: 3,\n    },\n    {\n      id: 'Simplice',\n      group: 2,\n    },\n    {\n      id: 'Scaufflaire',\n      group: 2,\n    },\n    {\n      id: 'Woman1',\n      group: 2,\n    },\n    {\n      id: 'Judge',\n      group: 2,\n    },\n    {\n      id: 'Champmathieu',\n      group: 2,\n    },\n    {\n      id: 'Brevet',\n      group: 2,\n    },\n    {\n      id: 'Chenildieu',\n      group: 2,\n    },\n    {\n      id: 'Cochepaille',\n      group: 2,\n    },\n    {\n      id: 'Pontmercy',\n      group: 4,\n    },\n    {\n      id: 'Boulatruelle',\n      group: 6,\n    },\n    {\n      id: 'Eponine',\n      group: 4,\n    },\n    {\n      id: 'Anzelma',\n      group: 4,\n    },\n    {\n      id: 'Woman2',\n      group: 5,\n    },\n    {\n      id: 'MotherInnocent',\n      group: 0,\n    },\n    {\n      id: 'Gribier',\n      group: 0,\n    },\n    {\n      id: 'Jondrette',\n      group: 7,\n    },\n    {\n      id: 'Mme.Burgon',\n      group: 7,\n    },\n    {\n      id: 'Gavroche',\n      group: 8,\n    },\n    {\n      id: 'Gillenormand',\n      group: 5,\n    },\n    {\n      id: 'Magnon',\n      group: 5,\n    },\n    {\n      id: 'Mlle.Gillenormand',\n      group: 5,\n    },\n    {\n      id: 'Mme.Pontmercy',\n      group: 5,\n    },\n    {\n      id: 'Mlle.Vaubois',\n      group: 5,\n    },\n    {\n      id: 'Lt.Gillenormand',\n      group: 5,\n    },\n    {\n      id: 'Marius',\n      group: 8,\n    },\n    {\n      id: 'BaronessT',\n      group: 5,\n    },\n    {\n      id: 'Mabeuf',\n      group: 8,\n    },\n    {\n      id: 'Enjolras',\n      group: 8,\n    },\n    {\n      id: 'Combeferre',\n      group: 8,\n    },\n    {\n      id: 'Prouvaire',\n      group: 8,\n    },\n    {\n      id: 'Feuilly',\n      group: 8,\n    },\n    {\n      id: 'Courfeyrac',\n      group: 8,\n    },\n    {\n      id: 'Bahorel',\n      group: 8,\n    },\n    {\n      id: 'Bossuet',\n      group: 8,\n    },\n    {\n      id: 'Joly',\n      group: 8,\n    },\n    {\n      id: 'Grantaire',\n      group: 8,\n    },\n    {\n      id: 'MotherPlutarch',\n      group: 9,\n    },\n    {\n      id: 'Gueulemer',\n      group: 4,\n    },\n    {\n      id: 'Babet',\n      group: 4,\n    },\n    {\n      id: 'Claquesous',\n      group: 4,\n    },\n    {\n      id: 'Montparnasse',\n      group: 4,\n    },\n    {\n      id: 'Toussaint',\n      group: 5,\n    },\n    {\n      id: 'Child1',\n      group: 10,\n    },\n    {\n      id: 'Child2',\n      group: 10,\n    },\n    {\n      id: 'Brujon',\n      group: 4,\n    },\n    {\n      id: 'Mme.Hucheloup',\n      group: 8,\n    },\n  ],\n  links: [\n    {\n      source: 'Napoleon',\n      target: 'Myriel',\n      value: 1,\n    },\n    {\n      source: 'Mlle.Baptistine',\n      target: 'Myriel',\n      value: 8,\n    },\n    {\n      source: 'Mme.Magloire',\n      target: 'Myriel',\n      value: 10,\n    },\n    {\n      source: 'Mme.Magloire',\n      target: 'Mlle.Baptistine',\n      value: 6,\n    },\n    {\n      source: 'CountessdeLo',\n      target: 'Myriel',\n      value: 1,\n    },\n    {\n      source: 'Geborand',\n      target: 'Myriel',\n      value: 1,\n    },\n    {\n      source: 'Champtercier',\n      target: 'Myriel',\n      value: 1,\n    },\n    {\n      source: 'Cravatte',\n      target: 'Myriel',\n      value: 1,\n    },\n    {\n      source: 'Count',\n      target: 'Myriel',\n      value: 2,\n    },\n    {\n      source: 'OldMan',\n      target: 'Myriel',\n      value: 1,\n    },\n    {\n      source: 'Valjean',\n      target: 'Labarre',\n      value: 1,\n    },\n    {\n      source: 'Valjean',\n      target: 'Mme.Magloire',\n      value: 3,\n    },\n    {\n      source: 'Valjean',\n      target: 'Mlle.Baptistine',\n      value: 3,\n    },\n    {\n      source: 'Valjean',\n      target: 'Myriel',\n      value: 5,\n    },\n    {\n      source: 'Marguerite',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Mme.deR',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Isabeau',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Gervais',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Listolier',\n      target: 'Tholomyes',\n      value: 4,\n    },\n    {\n      source: 'Fameuil',\n      target: 'Tholomyes',\n      value: 4,\n    },\n    {\n      source: 'Fameuil',\n      target: 'Listolier',\n      value: 4,\n    },\n    {\n      source: 'Blacheville',\n      target: 'Tholomyes',\n      value: 4,\n    },\n    {\n      source: 'Blacheville',\n      target: 'Listolier',\n      value: 4,\n    },\n    {\n      source: 'Blacheville',\n      target: 'Fameuil',\n      value: 4,\n    },\n    {\n      source: 'Favourite',\n      target: 'Tholomyes',\n      value: 3,\n    },\n    {\n      source: 'Favourite',\n      target: 'Listolier',\n      value: 3,\n    },\n    {\n      source: 'Favourite',\n      target: 'Fameuil',\n      value: 3,\n    },\n    {\n      source: 'Favourite',\n      target: 'Blacheville',\n      value: 4,\n    },\n    {\n      source: 'Dahlia',\n      target: 'Tholomyes',\n      value: 3,\n    },\n    {\n      source: 'Dahlia',\n      target: 'Listolier',\n      value: 3,\n    },\n    {\n      source: 'Dahlia',\n      target: 'Fameuil',\n      value: 3,\n    },\n    {\n      source: 'Dahlia',\n      target: 'Blacheville',\n      value: 3,\n    },\n    {\n      source: 'Dahlia',\n      target: 'Favourite',\n      value: 5,\n    },\n    {\n      source: 'Zephine',\n      target: 'Tholomyes',\n      value: 3,\n    },\n    {\n      source: 'Zephine',\n      target: 'Listolier',\n      value: 3,\n    },\n    {\n      source: 'Zephine',\n      target: 'Fameuil',\n      value: 3,\n    },\n    {\n      source: 'Zephine',\n      target: 'Blacheville',\n      value: 3,\n    },\n    {\n      source: 'Zephine',\n      target: 'Favourite',\n      value: 4,\n    },\n    {\n      source: 'Zephine',\n      target: 'Dahlia',\n      value: 4,\n    },\n    {\n      source: 'Fantine',\n      target: 'Tholomyes',\n      value: 3,\n    },\n    {\n      source: 'Fantine',\n      target: 'Listolier',\n      value: 3,\n    },\n    {\n      source: 'Fantine',\n      target: 'Fameuil',\n      value: 3,\n    },\n    {\n      source: 'Fantine',\n      target: 'Blacheville',\n      value: 3,\n    },\n    {\n      source: 'Fantine',\n      target: 'Favourite',\n      value: 4,\n    },\n    {\n      source: 'Fantine',\n      target: 'Dahlia',\n      value: 4,\n    },\n    {\n      source: 'Fantine',\n      target: 'Zephine',\n      value: 4,\n    },\n    {\n      source: 'Fantine',\n      target: 'Marguerite',\n      value: 2,\n    },\n    {\n      source: 'Fantine',\n      target: 'Valjean',\n      value: 9,\n    },\n    {\n      source: 'Mme.Thenardier',\n      target: 'Fantine',\n      value: 2,\n    },\n    {\n      source: 'Mme.Thenardier',\n      target: 'Valjean',\n      value: 7,\n    },\n    {\n      source: 'Thenardier',\n      target: 'Mme.Thenardier',\n      value: 13,\n    },\n    {\n      source: 'Thenardier',\n      target: 'Fantine',\n      value: 1,\n    },\n    {\n      source: 'Thenardier',\n      target: 'Valjean',\n      value: 12,\n    },\n    {\n      source: 'Cosette',\n      target: 'Mme.Thenardier',\n      value: 4,\n    },\n    {\n      source: 'Cosette',\n      target: 'Valjean',\n      value: 31,\n    },\n    {\n      source: 'Cosette',\n      target: 'Tholomyes',\n      value: 1,\n    },\n    {\n      source: 'Cosette',\n      target: 'Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Javert',\n      target: 'Valjean',\n      value: 17,\n    },\n    {\n      source: 'Javert',\n      target: 'Fantine',\n      value: 5,\n    },\n    {\n      source: 'Javert',\n      target: 'Thenardier',\n      value: 5,\n    },\n    {\n      source: 'Javert',\n      target: 'Mme.Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Javert',\n      target: 'Cosette',\n      value: 1,\n    },\n    {\n      source: 'Fauchelevent',\n      target: 'Valjean',\n      value: 8,\n    },\n    {\n      source: 'Fauchelevent',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Bamatabois',\n      target: 'Fantine',\n      value: 1,\n    },\n    {\n      source: 'Bamatabois',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Bamatabois',\n      target: 'Valjean',\n      value: 2,\n    },\n    {\n      source: 'Perpetue',\n      target: 'Fantine',\n      value: 1,\n    },\n    {\n      source: 'Simplice',\n      target: 'Perpetue',\n      value: 2,\n    },\n    {\n      source: 'Simplice',\n      target: 'Valjean',\n      value: 3,\n    },\n    {\n      source: 'Simplice',\n      target: 'Fantine',\n      value: 2,\n    },\n    {\n      source: 'Simplice',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Scaufflaire',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Woman1',\n      target: 'Valjean',\n      value: 2,\n    },\n    {\n      source: 'Woman1',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Judge',\n      target: 'Valjean',\n      value: 3,\n    },\n    {\n      source: 'Judge',\n      target: 'Bamatabois',\n      value: 2,\n    },\n    {\n      source: 'Champmathieu',\n      target: 'Valjean',\n      value: 3,\n    },\n    {\n      source: 'Champmathieu',\n      target: 'Judge',\n      value: 3,\n    },\n    {\n      source: 'Champmathieu',\n      target: 'Bamatabois',\n      value: 2,\n    },\n    {\n      source: 'Brevet',\n      target: 'Judge',\n      value: 2,\n    },\n    {\n      source: 'Brevet',\n      target: 'Champmathieu',\n      value: 2,\n    },\n    {\n      source: 'Brevet',\n      target: 'Valjean',\n      value: 2,\n    },\n    {\n      source: 'Brevet',\n      target: 'Bamatabois',\n      value: 1,\n    },\n    {\n      source: 'Chenildieu',\n      target: 'Judge',\n      value: 2,\n    },\n    {\n      source: 'Chenildieu',\n      target: 'Champmathieu',\n      value: 2,\n    },\n    {\n      source: 'Chenildieu',\n      target: 'Brevet',\n      value: 2,\n    },\n    {\n      source: 'Chenildieu',\n      target: 'Valjean',\n      value: 2,\n    },\n    {\n      source: 'Chenildieu',\n      target: 'Bamatabois',\n      value: 1,\n    },\n    {\n      source: 'Cochepaille',\n      target: 'Judge',\n      value: 2,\n    },\n    {\n      source: 'Cochepaille',\n      target: 'Champmathieu',\n      value: 2,\n    },\n    {\n      source: 'Cochepaille',\n      target: 'Brevet',\n      value: 2,\n    },\n    {\n      source: 'Cochepaille',\n      target: 'Chenildieu',\n      value: 2,\n    },\n    {\n      source: 'Cochepaille',\n      target: 'Valjean',\n      value: 2,\n    },\n    {\n      source: 'Cochepaille',\n      target: 'Bamatabois',\n      value: 1,\n    },\n    {\n      source: 'Pontmercy',\n      target: 'Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Boulatruelle',\n      target: 'Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Eponine',\n      target: 'Mme.Thenardier',\n      value: 2,\n    },\n    {\n      source: 'Eponine',\n      target: 'Thenardier',\n      value: 3,\n    },\n    {\n      source: 'Anzelma',\n      target: 'Eponine',\n      value: 2,\n    },\n    {\n      source: 'Anzelma',\n      target: 'Thenardier',\n      value: 2,\n    },\n    {\n      source: 'Anzelma',\n      target: 'Mme.Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Woman2',\n      target: 'Valjean',\n      value: 3,\n    },\n    {\n      source: 'Woman2',\n      target: 'Cosette',\n      value: 1,\n    },\n    {\n      source: 'Woman2',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'MotherInnocent',\n      target: 'Fauchelevent',\n      value: 3,\n    },\n    {\n      source: 'MotherInnocent',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Gribier',\n      target: 'Fauchelevent',\n      value: 2,\n    },\n    {\n      source: 'Mme.Burgon',\n      target: 'Jondrette',\n      value: 1,\n    },\n    {\n      source: 'Gavroche',\n      target: 'Mme.Burgon',\n      value: 2,\n    },\n    {\n      source: 'Gavroche',\n      target: 'Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Gavroche',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Gavroche',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Gillenormand',\n      target: 'Cosette',\n      value: 3,\n    },\n    {\n      source: 'Gillenormand',\n      target: 'Valjean',\n      value: 2,\n    },\n    {\n      source: 'Magnon',\n      target: 'Gillenormand',\n      value: 1,\n    },\n    {\n      source: 'Magnon',\n      target: 'Mme.Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Mlle.Gillenormand',\n      target: 'Gillenormand',\n      value: 9,\n    },\n    {\n      source: 'Mlle.Gillenormand',\n      target: 'Cosette',\n      value: 2,\n    },\n    {\n      source: 'Mlle.Gillenormand',\n      target: 'Valjean',\n      value: 2,\n    },\n    {\n      source: 'Mme.Pontmercy',\n      target: 'Mlle.Gillenormand',\n      value: 1,\n    },\n    {\n      source: 'Mme.Pontmercy',\n      target: 'Pontmercy',\n      value: 1,\n    },\n    {\n      source: 'Mlle.Vaubois',\n      target: 'Mlle.Gillenormand',\n      value: 1,\n    },\n    {\n      source: 'Lt.Gillenormand',\n      target: 'Mlle.Gillenormand',\n      value: 2,\n    },\n    {\n      source: 'Lt.Gillenormand',\n      target: 'Gillenormand',\n      value: 1,\n    },\n    {\n      source: 'Lt.Gillenormand',\n      target: 'Cosette',\n      value: 1,\n    },\n    {\n      source: 'Marius',\n      target: 'Mlle.Gillenormand',\n      value: 6,\n    },\n    {\n      source: 'Marius',\n      target: 'Gillenormand',\n      value: 12,\n    },\n    {\n      source: 'Marius',\n      target: 'Pontmercy',\n      value: 1,\n    },\n    {\n      source: 'Marius',\n      target: 'Lt.Gillenormand',\n      value: 1,\n    },\n    {\n      source: 'Marius',\n      target: 'Cosette',\n      value: 21,\n    },\n    {\n      source: 'Marius',\n      target: 'Valjean',\n      value: 19,\n    },\n    {\n      source: 'Marius',\n      target: 'Tholomyes',\n      value: 1,\n    },\n    {\n      source: 'Marius',\n      target: 'Thenardier',\n      value: 2,\n    },\n    {\n      source: 'Marius',\n      target: 'Eponine',\n      value: 5,\n    },\n    {\n      source: 'Marius',\n      target: 'Gavroche',\n      value: 4,\n    },\n    {\n      source: 'BaronessT',\n      target: 'Gillenormand',\n      value: 1,\n    },\n    {\n      source: 'BaronessT',\n      target: 'Marius',\n      value: 1,\n    },\n    {\n      source: 'Mabeuf',\n      target: 'Marius',\n      value: 1,\n    },\n    {\n      source: 'Mabeuf',\n      target: 'Eponine',\n      value: 1,\n    },\n    {\n      source: 'Mabeuf',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Enjolras',\n      target: 'Marius',\n      value: 7,\n    },\n    {\n      source: 'Enjolras',\n      target: 'Gavroche',\n      value: 7,\n    },\n    {\n      source: 'Enjolras',\n      target: 'Javert',\n      value: 6,\n    },\n    {\n      source: 'Enjolras',\n      target: 'Mabeuf',\n      value: 1,\n    },\n    {\n      source: 'Enjolras',\n      target: 'Valjean',\n      value: 4,\n    },\n    {\n      source: 'Combeferre',\n      target: 'Enjolras',\n      value: 15,\n    },\n    {\n      source: 'Combeferre',\n      target: 'Marius',\n      value: 5,\n    },\n    {\n      source: 'Combeferre',\n      target: 'Gavroche',\n      value: 6,\n    },\n    {\n      source: 'Combeferre',\n      target: 'Mabeuf',\n      value: 2,\n    },\n    {\n      source: 'Prouvaire',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Prouvaire',\n      target: 'Enjolras',\n      value: 4,\n    },\n    {\n      source: 'Prouvaire',\n      target: 'Combeferre',\n      value: 2,\n    },\n    {\n      source: 'Feuilly',\n      target: 'Gavroche',\n      value: 2,\n    },\n    {\n      source: 'Feuilly',\n      target: 'Enjolras',\n      value: 6,\n    },\n    {\n      source: 'Feuilly',\n      target: 'Prouvaire',\n      value: 2,\n    },\n    {\n      source: 'Feuilly',\n      target: 'Combeferre',\n      value: 5,\n    },\n    {\n      source: 'Feuilly',\n      target: 'Mabeuf',\n      value: 1,\n    },\n    {\n      source: 'Feuilly',\n      target: 'Marius',\n      value: 1,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Marius',\n      value: 9,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Enjolras',\n      value: 17,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Combeferre',\n      value: 13,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Gavroche',\n      value: 7,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Mabeuf',\n      value: 2,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Eponine',\n      value: 1,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Feuilly',\n      value: 6,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Prouvaire',\n      value: 3,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Combeferre',\n      value: 5,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Gavroche',\n      value: 5,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Courfeyrac',\n      value: 6,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Mabeuf',\n      value: 2,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Enjolras',\n      value: 4,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Feuilly',\n      value: 3,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Prouvaire',\n      value: 2,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Marius',\n      value: 1,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Marius',\n      value: 5,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Courfeyrac',\n      value: 12,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Gavroche',\n      value: 5,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Bahorel',\n      value: 4,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Enjolras',\n      value: 10,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Feuilly',\n      value: 6,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Prouvaire',\n      value: 2,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Combeferre',\n      value: 9,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Mabeuf',\n      value: 1,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Joly',\n      target: 'Bahorel',\n      value: 5,\n    },\n    {\n      source: 'Joly',\n      target: 'Bossuet',\n      value: 7,\n    },\n    {\n      source: 'Joly',\n      target: 'Gavroche',\n      value: 3,\n    },\n    {\n      source: 'Joly',\n      target: 'Courfeyrac',\n      value: 5,\n    },\n    {\n      source: 'Joly',\n      target: 'Enjolras',\n      value: 5,\n    },\n    {\n      source: 'Joly',\n      target: 'Feuilly',\n      value: 5,\n    },\n    {\n      source: 'Joly',\n      target: 'Prouvaire',\n      value: 2,\n    },\n    {\n      source: 'Joly',\n      target: 'Combeferre',\n      value: 5,\n    },\n    {\n      source: 'Joly',\n      target: 'Mabeuf',\n      value: 1,\n    },\n    {\n      source: 'Joly',\n      target: 'Marius',\n      value: 2,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Bossuet',\n      value: 3,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Enjolras',\n      value: 3,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Combeferre',\n      value: 1,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Courfeyrac',\n      value: 2,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Joly',\n      value: 2,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Bahorel',\n      value: 1,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Feuilly',\n      value: 1,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Prouvaire',\n      value: 1,\n    },\n    {\n      source: 'MotherPlutarch',\n      target: 'Mabeuf',\n      value: 3,\n    },\n    {\n      source: 'Gueulemer',\n      target: 'Thenardier',\n      value: 5,\n    },\n    {\n      source: 'Gueulemer',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Gueulemer',\n      target: 'Mme.Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Gueulemer',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Gueulemer',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Gueulemer',\n      target: 'Eponine',\n      value: 1,\n    },\n    {\n      source: 'Babet',\n      target: 'Thenardier',\n      value: 6,\n    },\n    {\n      source: 'Babet',\n      target: 'Gueulemer',\n      value: 6,\n    },\n    {\n      source: 'Babet',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Babet',\n      target: 'Mme.Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Babet',\n      target: 'Javert',\n      value: 2,\n    },\n    {\n      source: 'Babet',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Babet',\n      target: 'Eponine',\n      value: 1,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Thenardier',\n      value: 4,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Babet',\n      value: 4,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Gueulemer',\n      value: 4,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Mme.Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Eponine',\n      value: 1,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Enjolras',\n      value: 1,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Babet',\n      value: 2,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Gueulemer',\n      value: 2,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Claquesous',\n      value: 2,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Eponine',\n      value: 1,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Toussaint',\n      target: 'Cosette',\n      value: 2,\n    },\n    {\n      source: 'Toussaint',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Toussaint',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Child1',\n      target: 'Gavroche',\n      value: 2,\n    },\n    {\n      source: 'Child2',\n      target: 'Gavroche',\n      value: 2,\n    },\n    {\n      source: 'Child2',\n      target: 'Child1',\n      value: 3,\n    },\n    {\n      source: 'Brujon',\n      target: 'Babet',\n      value: 3,\n    },\n    {\n      source: 'Brujon',\n      target: 'Gueulemer',\n      value: 3,\n    },\n    {\n      source: 'Brujon',\n      target: 'Thenardier',\n      value: 3,\n    },\n    {\n      source: 'Brujon',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Brujon',\n      target: 'Eponine',\n      value: 1,\n    },\n    {\n      source: 'Brujon',\n      target: 'Claquesous',\n      value: 1,\n    },\n    {\n      source: 'Brujon',\n      target: 'Montparnasse',\n      value: 1,\n    },\n    {\n      source: 'Mme.Hucheloup',\n      target: 'Bossuet',\n      value: 1,\n    },\n    {\n      source: 'Mme.Hucheloup',\n      target: 'Joly',\n      value: 1,\n    },\n    {\n      source: 'Mme.Hucheloup',\n      target: 'Grantaire',\n      value: 1,\n    },\n    {\n      source: 'Mme.Hucheloup',\n      target: 'Bahorel',\n      value: 1,\n    },\n    {\n      source: 'Mme.Hucheloup',\n      target: 'Courfeyrac',\n      value: 1,\n    },\n    {\n      source: 'Mme.Hucheloup',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Mme.Hucheloup',\n      target: 'Enjolras',\n      value: 1,\n    },\n  ],\n};\n\n// start 3d force simulation\nconst simulation = forceSimulation(dataset.nodes, 3)\n  .force(\n    'link',\n    forceLink().id(function (d) {\n      return d.id;\n    }),\n  )\n  .force('charge', forceManyBody())\n  .force('center', forceCenter(0, 0));\nsimulation.nodes(dataset.nodes);\nsimulation.force('link').links(dataset.links);\nsimulation.tick(1000);\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  // create a sphere geometry\n  const sphereGeometry = new SphereGeometry(device, {\n    radius: 10,\n    latitudeBands: 32,\n    longitudeBands: 32,\n  });\n  // create a material with Phong lighting model\n  const material = new MeshPhongMaterial(device, {\n    shininess: 30,\n  });\n\n  // @see https://antv.vision/en/docs/specification/language/palette#%E5%88%86%E7%B1%BB%E8%89%B2%E6%9D%BF\n  const colorPalette = [\n    '#5B8FF9',\n    '#CDDDFD',\n    '#61DDAA',\n    '#CDF3E4',\n    '#65789B',\n    '#F6BD16',\n    '#7262fd',\n    '#78D3F8',\n    '#9661BC',\n    '#F6903D',\n    '#008685',\n    '#F08BB4',\n  ];\n  dataset.nodes.forEach((node) => {\n    const fill = colorPalette[node.group];\n    // create a mesh\n    const sphere = new Mesh({\n      id: node.id,\n      style: {\n        fill,\n        opacity: 1,\n        geometry: sphereGeometry,\n        material,\n        cursor: 'pointer',\n      },\n    });\n    sphere.setPosition(node.x + 300, node.y + 250, node.z);\n    canvas.appendChild(sphere);\n\n    sphere.addEventListener('mouseenter', () => {\n      sphere.style.fill = 'red';\n    });\n    sphere.addEventListener('mouseleave', () => {\n      sphere.style.fill = fill;\n    });\n  });\n\n  dataset.links.forEach((edge) => {\n    const { source, target } = edge;\n    const line = new Line({\n      style: {\n        x1: source.x + 300,\n        y1: source.y + 250,\n        z1: source.z,\n        x2: target.x + 300,\n        y2: target.y + 250,\n        z2: target.z,\n        stroke: 'black',\n        lineWidth: 2,\n        opacity: 0.5,\n        isBillboard: true, // 始终面向屏幕\n      },\n    });\n    canvas.appendChild(line);\n  });\n\n  // add a directional light into scene\n  const light = new DirectionalLight({\n    style: {\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n\n  // adjust camera's position\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 1000, 45, 600 / 500);\n\n  // create landmarks\n  camera.createLandmark('reset', {\n    position: [300, 250, 500],\n    focalPoint: [300, 250, 0],\n    zoom: 1,\n  });\n  camera.createLandmark('landmark1', {\n    position: [200, 200, 300],\n    focalPoint: [200, 200, 0],\n    zoom: 1,\n    roll: 30,\n  });\n  camera.createLandmark('landmark2', {\n    position: [400, 400, 200],\n    focalPoint: [400, 400, 0],\n    zoom: 0.75,\n  });\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const cameraFolder = gui.addFolder('camera landmarks');\n  const cameraConfig = {\n    type: 'Exploring',\n    goToMark1: () => {\n      camera.gotoLandmark('reset', {\n        duration: 1000,\n        easing: 'ease-in',\n        onfinish: () => {\n          console.log('reset finished');\n        },\n      });\n    },\n    goToMark2: () => {\n      camera.gotoLandmark('landmark1', {\n        duration: 300,\n        easing: 'linear',\n      });\n    },\n    goToMark3: () => {\n      camera.gotoLandmark('landmark2', {\n        duration: 1000,\n        easing: 'linear',\n      });\n    },\n    // shot1: () => {\n    //   const sphere1 = canvas.document.getElementById('Valjean');\n    //   camera.shot(sphere1);\n    // },\n    // shot2: () => {\n    //   const sphere2 = canvas.document.getElementById('Bahorel');\n    //   camera.shot(sphere2);\n    // },\n  };\n  cameraFolder.add(cameraConfig, 'goToMark1').name('reset');\n  cameraFolder.add(cameraConfig, 'goToMark2').name('landmark1');\n  cameraFolder.add(cameraConfig, 'goToMark3').name('landmark2');\n  const types = ['Orbiting', 'Exploring', 'Tracking'];\n  const enums = [\n    CameraType.ORBITING,\n    CameraType.EXPLORING,\n    CameraType.TRACKING,\n  ];\n  cameraFolder.add(cameraConfig, 'type', types).onChange((type) => {\n    const index = types.indexOf(type);\n    camera.setType(enums[index]);\n  });\n  // cameraFolder.add(cameraConfig, 'shot1').name('shot1');\n  // cameraFolder.add(cameraConfig, 'shot2').name('shot2');\n  cameraFolder.open();\n})();\n",title:{zh:"3D 场景下的相机动画",en:"Landmark"},filename:"landmark.js",isNew:!1}],icon:"",id:"camera-animation",title:{en:"Camera Animation",zh:"相机动画"},api:null,childrenKey:"demos",order:2},{demos:[{id:"action",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*goX8QqgVSMEAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Group, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// get camera\nconst camera = canvas.getCamera();\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const solarSystem = new Group({\n    id: 'solarSystem',\n  });\n  const earthOrbit = new Group({\n    id: 'earthOrbit',\n  });\n  const moonOrbit = new Group({\n    id: 'moonOrbit',\n  });\n\n  const sun = new Circle({\n    id: 'sun',\n    style: {\n      r: 100,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  const sunLabel = new Text({\n    style: {\n      fontSize: 30,\n      text: 'Sun',\n      fill: 'white',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    },\n  });\n  sun.appendChild(sunLabel);\n  const earth = new Circle({\n    id: 'earth',\n    style: {\n      r: 50,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  const earthLabel = new Text({\n    style: {\n      fontSize: 20,\n      text: 'Earth',\n      fill: 'white',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    },\n  });\n  earth.appendChild(earthLabel);\n  const moon = new Circle({\n    id: 'moon',\n    style: {\n      r: 25,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  const moonLabel = new Text({\n    style: {\n      fontSize: 10,\n      text: 'Moon',\n      fill: 'white',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    },\n  });\n  moon.appendChild(moonLabel);\n\n  solarSystem.appendChild(sun);\n  solarSystem.appendChild(earthOrbit);\n  earthOrbit.appendChild(earth);\n  earthOrbit.appendChild(moonOrbit);\n  moonOrbit.appendChild(moon);\n\n  solarSystem.setPosition(300, 250);\n  earthOrbit.translate(100, 0);\n  moonOrbit.translate(100, 0);\n\n  canvas.appendChild(solarSystem);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n    solarSystem.rotateLocal(1);\n    earthOrbit.rotateLocal(2);\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg'])\n    .onChange((renderer) => {\n      canvas.setRenderer(\n        renderer === 'canvas'\n          ? canvasRenderer\n          : renderer === 'webgl'\n          ? webglRenderer\n          : svgRenderer,\n      );\n    });\n  rendererFolder.open();\n\n  const cameraFolder = gui.addFolder('camera actions');\n  const cameraConfig = {\n    panX: 0,\n    panY: 0,\n    zoom: 1,\n    roll: 0,\n  };\n\n  const origin = camera.getPosition();\n  cameraFolder.add(cameraConfig, 'panX', -300, 300).onChange((panX) => {\n    const current = camera.getPosition();\n    camera.pan(origin[0] + panX - current[0], 0);\n  });\n  cameraFolder.add(cameraConfig, 'panY', -300, 300).onChange((panY) => {\n    const current = camera.getPosition();\n    camera.pan(0, origin[1] + panY - current[1]);\n  });\n  cameraFolder.add(cameraConfig, 'roll', -90, 90).onChange((roll) => {\n    camera.rotate(0, 0, roll);\n  });\n  cameraFolder.add(cameraConfig, 'zoom', 0, 10).onChange((zoom) => {\n    camera.setZoom(zoom);\n  });\n  cameraFolder.open();\n});\n",title:{zh:"相机动作",en:"Camera actions"},filename:"action.js",isNew:!1},{id:"view-offset",screenshot:"https://mdn.alipayobjects.com/antforest/afts/img/A*4C_tQLZJ_24AAAAAAAAAAAAADrd2AQ/Dec-13-2022%2014-05-16.gif",source:"import { Canvas, CanvasEvent, Group } from '@antv/g';\nimport {\n  CubeGeometry,\n  Mesh,\n  MeshBasicMaterial,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\nwebglRenderer.registerPlugin(new Plugin3D());\nwebglRenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\n// create an orthographic camera\nconst camera = canvas.getCamera();\nconst group = new Group();\n\n(async () => {\n  await canvas.ready;\n  const plugin = webglRenderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n  const map = plugin.loadTexture(\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8TlCRIsKeUkAAAAAAAAAAAAAARQnAQ',\n  );\n\n  const cubeGeometry = new CubeGeometry(device, {\n    width: 200,\n    height: 200,\n    depth: 200,\n  });\n  const basicMaterial = new MeshBasicMaterial(device, {\n    map,\n  });\n\n  const cube = new Mesh({\n    style: {\n      fill: '#1890FF',\n      opacity: 1,\n      geometry: cubeGeometry,\n      material: basicMaterial,\n    },\n  });\n  cube.setPosition(300, 250, 0);\n\n  canvas.appendChild(cube);\n})();\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n  group.rotate(0, 1, 0);\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst cameraFolder = gui.addFolder('set view offset');\nconst cameraConfig = {\n  fullWidth: 600,\n  fullHeight: 500,\n  x: 0,\n  y: 0,\n  width: 600,\n  height: 500,\n  clearViewOffset: () => {\n    camera.clearViewOffset();\n    cameraConfig.x = 0;\n    cameraConfig.y = 0;\n    cameraConfig.width = 600;\n    cameraConfig.height = 500;\n  },\n};\ncameraFolder\n  .add(cameraConfig, 'x', 0, 600)\n  .onChange((x) => {\n    camera.setViewOffset(\n      cameraConfig.fullWidth,\n      cameraConfig.fullHeight,\n      x,\n      cameraConfig.y,\n      cameraConfig.width,\n      cameraConfig.height,\n    );\n  })\n  .listen();\ncameraFolder\n  .add(cameraConfig, 'y', 0, 500)\n  .onChange((y) => {\n    camera.setViewOffset(\n      cameraConfig.fullWidth,\n      cameraConfig.fullHeight,\n      cameraConfig.x,\n      y,\n      cameraConfig.width,\n      cameraConfig.height,\n    );\n  })\n  .listen();\ncameraFolder\n  .add(cameraConfig, 'width', 0, 1200)\n  .onChange((width) => {\n    camera.setViewOffset(\n      cameraConfig.fullWidth,\n      cameraConfig.fullHeight,\n      cameraConfig.x,\n      cameraConfig.y,\n      width,\n      cameraConfig.height,\n    );\n  })\n  .listen();\ncameraFolder\n  .add(cameraConfig, 'height', 0, 1000)\n  .onChange((height) => {\n    camera.setViewOffset(\n      cameraConfig.fullWidth,\n      cameraConfig.fullHeight,\n      cameraConfig.x,\n      cameraConfig.y,\n      cameraConfig.width,\n      height,\n    );\n  })\n  .listen();\ncameraFolder.add(cameraConfig, 'clearViewOffset').name('clearViewOffset');\ncameraFolder.open();\n",title:{zh:"View Offset",en:"View Offset"},filename:"view-offset.js",isNew:!1},{id:"zoom-by-point",screenshot:"https://gw.alipayobjects.com/zos/raptor/1667978070897/Nov-09-2022%25252015-13-27.gif",source:"import { Canvas, CanvasEvent, Ellipse } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport Hammer from 'hammerjs';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 500,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst camera = canvas.getCamera();\n\nconst ellipse = new Ellipse({\n  style: {\n    cx: 250,\n    cy: 250,\n    rx: 100,\n    ry: 150,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(ellipse);\n});\n\n// handle mouse wheel event\nconst bindWheelHandler = () => {\n  // update Camera's zoom\n  // @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\n  const minZoom = 0;\n  const maxZoom = Infinity;\n  canvas\n    .getContextService()\n    .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n    .addEventListener(\n      'wheel',\n      (e) => {\n        e.preventDefault();\n\n        const { x, y } = canvas.client2Viewport({ x: e.clientX, y: e.clientY });\n\n        let zoom;\n        if (e.deltaY < 0) {\n          zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() / 0.95));\n        } else {\n          zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() * 0.95));\n        }\n\n        camera.setZoomByViewportPoint(zoom, [x, y]);\n      },\n      { passive: false },\n    );\n};\n\n// use hammer.js\nconst hammer = new Hammer(canvas);\nhammer.on('pan', (ev) => {\n  camera.pan(\n    (-ev.deltaX / Math.pow(2, camera.getZoom())) * 0.5,\n    (-ev.deltaY / Math.pow(2, camera.getZoom())) * 0.5,\n  );\n});\n\nbindWheelHandler();\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n    bindWheelHandler();\n  });\nrendererFolder.open();\n\nconst cameraFolder = gui.addFolder('camera actions');\nconst cameraConfig = {\n  panX: 0,\n  panY: 0,\n  zoom: 1,\n  roll: 0,\n};\n\nconst origin = camera.getPosition();\ncameraFolder.add(cameraConfig, 'panX', -300, 300).onChange((panX) => {\n  const current = camera.getPosition();\n  camera.pan(origin[0] + panX - current[0], 0);\n});\ncameraFolder.add(cameraConfig, 'panY', -300, 300).onChange((panY) => {\n  const current = camera.getPosition();\n  camera.pan(0, origin[1] + panY - current[1]);\n});\ncameraFolder.add(cameraConfig, 'roll', -90, 90).onChange((roll) => {\n  camera.rotate(0, 0, roll);\n});\ncameraFolder.add(cameraConfig, 'zoom', 0, 10).onChange((zoom) => {\n  camera.setZoom(zoom);\n});\ncameraFolder.open();\n",title:{zh:"以指定视点缩放",en:"Zoom by specified viewport point"},filename:"zoom-by-point.js",isNew:!1},{id:"minmax-distance",source:"import { Canvas, CanvasEvent, Group } from '@antv/g';\nimport {\n  CubeGeometry,\n  Mesh,\n  MeshBasicMaterial,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a webgl renderer\nconst webglRenderer = new WebGLRenderer();\nwebglRenderer.registerPlugin(new Plugin3D());\nwebglRenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\n// create a perspective camera\nconst camera = canvas.getCamera();\ncamera.setPerspective(0.1, 1000, 75, 600 / 500);\ncamera.setMinDistance(200);\ncamera.setMaxDistance(500);\n\nconst group = new Group();\n\n(async () => {\n  await canvas.ready;\n  const plugin = webglRenderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n  const map = plugin.loadTexture(\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8TlCRIsKeUkAAAAAAAAAAAAAARQnAQ',\n  );\n\n  const cubeGeometry = new CubeGeometry(device, {\n    width: 200,\n    height: 200,\n    depth: 200,\n  });\n  const basicMaterial = new MeshBasicMaterial(device, {\n    map,\n  });\n\n  const cube = new Mesh({\n    style: {\n      fill: '#1890FF',\n      opacity: 1,\n      geometry: cubeGeometry,\n      material: basicMaterial,\n    },\n  });\n  cube.setPosition(300, 250, 0);\n\n  canvas.appendChild(cube);\n})();\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n  group.rotate(0, 1, 0);\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\n\nconst cameraFolder = gui.addFolder('perspective');\nconst cameraConfig = {\n  fov: 75,\n  near: 0.1,\n  far: 1000,\n  zoom: 1,\n};\ncameraFolder.add(cameraConfig, 'fov', 0, 180).onChange((fov) => {\n  camera.setFov(fov);\n});\ncameraFolder.add(cameraConfig, 'near', 0, 600).onChange((near) => {\n  camera.setNear(near);\n});\ncameraFolder.add(cameraConfig, 'far', 0, 1000).onChange((far) => {\n  camera.setFar(far);\n});\ncameraFolder.add(cameraConfig, 'zoom', 0, 10).onChange((zoom) => {\n  camera.setZoom(zoom);\n});\ncameraFolder.open();\n",title:{zh:"相机到视点的最小最大距离",en:"Min/max distance from camera's position to focal point"},filename:"minmax-distance.js",isNew:!1}],icon:"",id:"camera-action",title:{en:"Camera Action",zh:"相机动作"},api:null,childrenKey:"demos",order:10}],childrenKey:"examples"},{id:"shape",title:{zh:"基本图形",en:"Shape"},examples:[{demos:[{id:"circle",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*FfHBTr2ACAkAAAAAAAAAAABkARQnAQ",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a circle\nconst circle = new Circle({\n  style: {\n    cx: 300,\n    cy: 200,\n    r: 100,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    shadowColor: 'black',\n    shadowBlur: 20,\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // add a circle to canvas\n  canvas.appendChild(circle);\n});\n\n// use AntV G devtools\nwindow.__g_instances__ = [canvas];\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst circleFolder = gui.addFolder('circle');\nconst circleConfig = {\n  cx: 300,\n  cy: 200,\n  r: 100,\n  fill: '#1890FF',\n  stroke: '#F04864',\n  lineWidth: 4,\n  lineDash: 0,\n  lineDashOffset: 0,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  shadowType: 'outer',\n  shadowColor: '#000',\n  shadowBlur: 20,\n  shadowOffsetX: 0,\n  shadowOffsetY: 0,\n  increasedLineWidthForHitTesting: 0,\n  cursor: 'pointer',\n  pointerEvents: 'auto',\n  visibility: 'visible',\n};\ncircleFolder.add(circleConfig, 'cx', 0, 600).onChange((cx) => {\n  circle.style.cx = cx;\n});\ncircleFolder.add(circleConfig, 'cy', 0, 600).onChange((cy) => {\n  circle.style.cy = cy;\n});\ncircleFolder.add(circleConfig, 'r', 50, 200).onChange((r) => {\n  circle.style.r = r;\n});\ncircleFolder.addColor(circleConfig, 'fill').onChange((color) => {\n  circle.style.fill = color;\n});\ncircleFolder.addColor(circleConfig, 'stroke').onChange((color) => {\n  circle.attr('stroke', color);\n});\ncircleFolder\n  .add(circleConfig, 'shadowType', ['inner', 'outer'])\n  .onChange((shadowType) => {\n    circle.attr('shadowType', shadowType);\n  });\ncircleFolder.addColor(circleConfig, 'shadowColor').onChange((color) => {\n  circle.attr('shadowColor', color);\n});\ncircleFolder.add(circleConfig, 'shadowBlur', 0, 100).onChange((shadowBlur) => {\n  circle.style.shadowBlur = shadowBlur;\n});\ncircleFolder\n  .add(circleConfig, 'shadowOffsetX', -50, 50)\n  .onChange((shadowOffsetX) => {\n    circle.style.shadowOffsetX = shadowOffsetX;\n  });\ncircleFolder\n  .add(circleConfig, 'shadowOffsetY', -50, 50)\n  .onChange((shadowOffsetY) => {\n    circle.style.shadowOffsetY = shadowOffsetY;\n  });\ncircleFolder.add(circleConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n  circle.style.lineWidth = lineWidth;\n});\ncircleFolder.add(circleConfig, 'lineDash', 0, 100).onChange((lineDash) => {\n  circle.style.lineDash = [lineDash];\n});\ncircleFolder\n  .add(circleConfig, 'lineDashOffset', 0, 100)\n  .onChange((lineDashOffset) => {\n    circle.style.lineDashOffset = lineDashOffset;\n  });\ncircleFolder.add(circleConfig, 'fillOpacity', 0, 1, 0.1).onChange((opacity) => {\n  circle.style.fillOpacity = opacity;\n});\ncircleFolder\n  .add(circleConfig, 'strokeOpacity', 0, 1, 0.1)\n  .onChange((opacity) => {\n    circle.style.strokeOpacity = opacity;\n  });\ncircleFolder\n  .add(circleConfig, 'increasedLineWidthForHitTesting', 0, 200)\n  .onChange((increasedLineWidthForHitTesting) => {\n    circle.style.increasedLineWidthForHitTesting =\n      increasedLineWidthForHitTesting;\n  });\ncircleFolder\n  .add(circleConfig, 'cursor', [\n    'default',\n    'pointer',\n    'help',\n    'progress',\n    'text',\n    'move',\n  ])\n  .onChange((cursor) => {\n    circle.style.cursor = cursor;\n  });\ncircleFolder\n  .add(circleConfig, 'pointerEvents', [\n    'none',\n    'auto',\n    'stroke',\n    'fill',\n    'painted',\n    'visible',\n    'visiblestroke',\n    'visiblefill',\n    'visiblepainted',\n    'all',\n  ])\n  .onChange((pointerEvents) => {\n    circle.style.pointerEvents = pointerEvents;\n  });\ncircleFolder\n  .add(circleConfig, 'visibility', ['visible', 'hidden'])\n  .onChange((visibility) => {\n    circle.style.visibility = visibility;\n  });\n\nconst transformFolder = gui.addFolder('transform');\nconst transformConfig = {\n  localPositionX: 0,\n  localPositionY: 0,\n  localScale: 1,\n  localEulerAngles: 0,\n  transformOrigin: 'left top',\n};\ntransformFolder\n  .add(transformConfig, 'transformOrigin', [\n    'left top',\n    'center',\n    'right bottom',\n    '50% 50%',\n    '50px 50px',\n  ])\n  .onChange((transformOrigin) => {\n    circle.style.transformOrigin = transformOrigin;\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionX', 0, 600)\n  .onChange((localPositionX) => {\n    const [lx, ly] = circle.getLocalPosition();\n    circle.setLocalPosition(localPositionX, ly);\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionY', 0, 500)\n  .onChange((localPositionY) => {\n    const [lx, ly] = circle.getLocalPosition();\n    circle.setLocalPosition(lx, localPositionY);\n  });\ntransformFolder\n  .add(transformConfig, 'localScale', 0.2, 5)\n  .onChange((localScale) => {\n    circle.setLocalScale(localScale);\n  });\ntransformFolder\n  .add(transformConfig, 'localEulerAngles', 0, 360)\n  .onChange((localEulerAngles) => {\n    circle.setLocalEulerAngles(localEulerAngles);\n  });\ntransformFolder.open();\n",title:{zh:"圆",en:"Circle"},filename:"circle.js",isNew:!1},{id:"gradient",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*WK1jQIIUP0cAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst linearGradient = 'l(0) 0:#ffffff 0.5:#7ec2f3 1:#1890ff';\nconst radialGradient = 'r(0.5, 0.5, 1) 0:#ffffff 1:#1890ff';\nconst pattern =\n  'p(a) https://gw.alipayobjects.com/zos/rmsportal/ibtwzHXSxomqbZCPMLqS.png';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a circle\nconst circle = new Circle({\n  style: {\n    cx: 300,\n    cy: 200,\n    r: 100,\n    fill: linearGradient,\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // add a circle to canvas\n  canvas.appendChild(circle);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst circleFolder = gui.addFolder('circle');\nconst circleConfig = {\n  r: 100,\n  fill: 'linear',\n  stroke: '#F04864',\n  lineWidth: 4,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  anchorX: 0.5,\n  anchorY: 0.5,\n};\ncircleFolder.add(circleConfig, 'r', 50, 200).onChange((radius) => {\n  circle.style.r = radius;\n});\ncircleFolder\n  .add(circleConfig, 'fill', ['linear', 'radial', 'pattern'])\n  .onChange((color) => {\n    if (color === 'linear') {\n      circle.style.fill = linearGradient;\n    } else if (color === 'radial') {\n      circle.style.fill = radialGradient;\n    } else if (color === 'pattern') {\n      circle.style.fill = pattern;\n    }\n  });\ncircleFolder.addColor(circleConfig, 'stroke').onChange((color) => {\n  circle.attr('stroke', color);\n});\ncircleFolder.add(circleConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n  circle.attr('lineWidth', lineWidth);\n});\ncircleFolder.add(circleConfig, 'fillOpacity', 0, 1, 0.1).onChange((opacity) => {\n  circle.attr('fillOpacity', opacity);\n});\ncircleFolder\n  .add(circleConfig, 'strokeOpacity', 0, 1, 0.1)\n  .onChange((opacity) => {\n    circle.attr('strokeOpacity', opacity);\n  });\ncircleFolder.open();\n\nconst transformFolder = gui.addFolder('transform');\nconst transformConfig = {\n  localPositionX: 200,\n  localPositionY: 100,\n  localScale: 1,\n  localEulerAngles: 0,\n  transformOrigin: 'left top',\n  anchorX: 0,\n  anchorY: 0,\n};\ntransformFolder\n  .add(transformConfig, 'transformOrigin', [\n    'left top',\n    'center',\n    'right bottom',\n    '50% 50%',\n    '50px 50px',\n  ])\n  .onChange((transformOrigin) => {\n    circle.style.transformOrigin = transformOrigin;\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionX', 0, 600)\n  .onChange((localPositionX) => {\n    const [lx, ly] = circle.getLocalPosition();\n    circle.setLocalPosition(localPositionX, ly);\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionY', 0, 500)\n  .onChange((localPositionY) => {\n    const [lx, ly] = circle.getLocalPosition();\n    circle.setLocalPosition(lx, localPositionY);\n  });\ntransformFolder\n  .add(transformConfig, 'localScale', 0.2, 5)\n  .onChange((localScale) => {\n    circle.setLocalScale(localScale);\n  });\ntransformFolder\n  .add(transformConfig, 'localEulerAngles', 0, 360)\n  .onChange((localEulerAngles) => {\n    circle.setLocalEulerAngles(localEulerAngles);\n  });\ntransformFolder.add(transformConfig, 'anchorX', 0, 1).onChange((anchorX) => {\n  circle.style.anchor = [anchorX, transformConfig.anchorY];\n});\ntransformFolder.add(transformConfig, 'anchorY', 0, 1).onChange((anchorY) => {\n  circle.style.anchor = [transformConfig.anchorX, anchorY];\n});\ntransformFolder.open();\n",title:{zh:"带渐变色和模式的圆",en:"Circle with gradient & pattern"},filename:"gradient.js",isNew:!1},{id:"filter",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8BomR52SOm4AAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst blur = 'blur(5px)';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a circle\nconst circle = new Circle({\n  style: {\n    cx: 300,\n    cy: 200,\n    r: 100,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    filter: blur,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // add a circle to canvas\n  canvas.appendChild(circle);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst circleFolder = gui.addFolder('circle');\nconst circleConfig = {\n  r: 100,\n  fill: '#1890FF',\n  stroke: '#F04864',\n  lineWidth: 4,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n};\ncircleFolder.add(circleConfig, 'r', 50, 200).onChange((radius) => {\n  circle.style.r = radius;\n});\ncircleFolder.addColor(circleConfig, 'fill').onChange((color) => {\n  circle.style.fill = color;\n});\ncircleFolder.addColor(circleConfig, 'stroke').onChange((color) => {\n  circle.attr('stroke', color);\n});\ncircleFolder.add(circleConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n  circle.attr('lineWidth', lineWidth);\n});\ncircleFolder.add(circleConfig, 'fillOpacity', 0, 1, 0.1).onChange((opacity) => {\n  circle.attr('fillOpacity', opacity);\n});\ncircleFolder\n  .add(circleConfig, 'strokeOpacity', 0, 1, 0.1)\n  .onChange((opacity) => {\n    circle.attr('strokeOpacity', opacity);\n  });\n\nconst blurFolder = gui.addFolder('blur');\nconst blurConfig = {\n  enable: true,\n  radius: 5,\n};\nblurFolder.add(blurConfig, 'enable').onChange(() => {\n  circle.style.filter = generateFilter();\n});\nblurFolder.add(blurConfig, 'radius', 0, 20).onChange(() => {\n  circle.style.filter = generateFilter();\n});\nblurFolder.open();\n\nconst brightnessFolder = gui.addFolder('brightness');\nconst brightnessConfig = {\n  enable: false,\n  brightness: 1,\n};\nbrightnessFolder.add(brightnessConfig, 'enable').onChange(() => {\n  circle.style.filter = generateFilter();\n});\nbrightnessFolder.add(brightnessConfig, 'brightness', 0, 4, 0.1).onChange(() => {\n  circle.style.filter = generateFilter();\n});\nbrightnessFolder.open();\n\nconst dropShadowFolder = gui.addFolder('drop-shadow');\nconst dropShadowConfig = {\n  enable: false,\n  offsetX: 0,\n  offsetY: 0,\n  radius: 0,\n  color: '#000',\n};\ndropShadowFolder.add(dropShadowConfig, 'enable').onChange(() => {\n  circle.style.filter = generateFilter();\n});\ndropShadowFolder.add(dropShadowConfig, 'offsetX', -10, 10).onChange(() => {\n  circle.style.filter = generateFilter();\n});\ndropShadowFolder.add(dropShadowConfig, 'offsetY', -10, 10).onChange(() => {\n  circle.style.filter = generateFilter();\n});\ndropShadowFolder.add(dropShadowConfig, 'radius', 0, 10).onChange(() => {\n  circle.style.filter = generateFilter();\n});\ndropShadowFolder.addColor(dropShadowConfig, 'color').onChange(() => {\n  circle.style.filter = generateFilter();\n});\ndropShadowFolder.open();\n\nconst contrastFolder = gui.addFolder('contrast');\nconst contrastConfig = {\n  enable: false,\n  contrast: 1,\n};\ncontrastFolder.add(contrastConfig, 'enable').onChange(() => {\n  circle.style.filter = generateFilter();\n});\ncontrastFolder.add(contrastConfig, 'contrast', 0, 4, 0.1).onChange(() => {\n  circle.style.filter = generateFilter();\n});\ncontrastFolder.open();\n\nconst grayscaleFolder = gui.addFolder('grayscale');\nconst grayscaleConfig = {\n  enable: false,\n  grayscale: 0,\n};\ngrayscaleFolder.add(grayscaleConfig, 'enable').onChange(() => {\n  circle.style.filter = generateFilter();\n});\ngrayscaleFolder.add(grayscaleConfig, 'grayscale', 0, 1, 0.1).onChange(() => {\n  circle.style.filter = generateFilter();\n});\ngrayscaleFolder.open();\n\nconst sepiaFolder = gui.addFolder('sepia');\nconst sepiaConfig = {\n  enable: false,\n  sepia: 0,\n};\nsepiaFolder.add(sepiaConfig, 'enable').onChange(() => {\n  circle.style.filter = generateFilter();\n});\nsepiaFolder.add(sepiaConfig, 'sepia', 0, 1, 0.1).onChange(() => {\n  circle.style.filter = generateFilter();\n});\nsepiaFolder.open();\n\nconst saturateFolder = gui.addFolder('saturate');\nconst saturateConfig = {\n  enable: false,\n  saturate: 0,\n};\nsaturateFolder.add(saturateConfig, 'enable').onChange(() => {\n  circle.style.filter = generateFilter();\n});\nsaturateFolder.add(saturateConfig, 'saturate', 0, 1, 0.1).onChange(() => {\n  circle.style.filter = generateFilter();\n});\nsaturateFolder.open();\n\nconst hueRotateFolder = gui.addFolder('hue-rotate');\nconst hueRotateConfig = {\n  enable: false,\n  angle: 0,\n};\nhueRotateFolder.add(hueRotateConfig, 'enable').onChange(() => {\n  circle.style.filter = generateFilter();\n});\nhueRotateFolder.add(hueRotateConfig, 'angle', 0, 360).onChange(() => {\n  circle.style.filter = generateFilter();\n});\nhueRotateFolder.open();\n\nconst invertFolder = gui.addFolder('invert');\nconst invertConfig = {\n  enable: false,\n  amount: 0,\n};\ninvertFolder.add(invertConfig, 'enable').onChange(() => {\n  circle.style.filter = generateFilter();\n});\ninvertFolder.add(invertConfig, 'amount', 0, 1, 0.1).onChange(() => {\n  circle.style.filter = generateFilter();\n});\ninvertFolder.open();\n\nconst generateFilter = () => {\n  return [\n    blurConfig.enable ? `blur(${blurConfig.radius}px)` : '',\n    brightnessConfig.enable ? `brightness(${brightnessConfig.brightness})` : '',\n    dropShadowConfig.enable\n      ? `drop-shadow(${dropShadowConfig.offsetX}px ${dropShadowConfig.offsetY}px ${dropShadowConfig.radius}px ${dropShadowConfig.color})`\n      : '',\n    contrastConfig.enable ? `contrast(${contrastConfig.contrast})` : '',\n    grayscaleConfig.enable ? `grayscale(${grayscaleConfig.grayscale})` : '',\n    sepiaConfig.enable ? `sepia(${sepiaConfig.sepia})` : '',\n    saturateConfig.enable ? `saturate(${saturateConfig.saturate})` : '',\n    hueRotateConfig.enable ? `hue-rotate(${hueRotateConfig.angle}deg)` : '',\n    invertConfig.enable ? `invert(${invertConfig.amount})` : '',\n  ].join(' ');\n};\n",title:{zh:"带滤镜的圆",en:"Circle with filter"},filename:"filter.js",isNew:!1}],icon:"",id:"circle",title:{en:"Circle",zh:"圆"},api:null,childrenKey:"demos",order:0},{demos:[{id:"ellipse",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8eoKRbfOwgAAAAAAAAAAAABkARQnAQ",source:"import { Canvas, CanvasEvent, Ellipse } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst ellipse = new Ellipse({\n  style: {\n    cx: 300,\n    cy: 200,\n    rx: 100,\n    ry: 150,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(ellipse);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst ellipseFolder = gui.addFolder('ellipse');\nconst ellipseConfig = {\n  cx: 300,\n  cy: 200,\n  rx: 100,\n  ry: 150,\n  fill: '#1890FF',\n  stroke: '#F04864',\n  lineWidth: 4,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  increasedLineWidthForHitTesting: 0,\n  cursor: 'pointer',\n  shadowColor: '#fff',\n  shadowBlur: 0,\n  shadowOffsetX: 0,\n  shadowOffsetY: 0,\n  pointerEvents: 'auto',\n  visibility: 'visible',\n};\nellipseFolder.add(ellipseConfig, 'cx', 0, 600).onChange((cx) => {\n  ellipse.style.cx = cx;\n});\nellipseFolder.add(ellipseConfig, 'cy', 0, 600).onChange((cy) => {\n  ellipse.style.cy = cy;\n});\nellipseFolder.add(ellipseConfig, 'rx', 50, 200).onChange((rx) => {\n  ellipse.style.rx = rx;\n});\nellipseFolder.add(ellipseConfig, 'ry', 50, 200).onChange((ry) => {\n  ellipse.style.ry = ry;\n});\nellipseFolder.addColor(ellipseConfig, 'fill').onChange((color) => {\n  ellipse.style.fill = color;\n});\nellipseFolder.addColor(ellipseConfig, 'stroke').onChange((color) => {\n  ellipse.style.stroke = color;\n});\nellipseFolder.add(ellipseConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n  ellipse.style.lineWidth = lineWidth;\n});\nellipseFolder\n  .add(ellipseConfig, 'fillOpacity', 0, 1, 0.1)\n  .onChange((opacity) => {\n    ellipse.style.fillOpacity = opacity;\n  });\nellipseFolder\n  .add(ellipseConfig, 'strokeOpacity', 0, 1, 0.1)\n  .onChange((opacity) => {\n    ellipse.style.strokeOpacity = opacity;\n  });\nellipseFolder.open();\nellipseFolder\n  .add(ellipseConfig, 'increasedLineWidthForHitTesting', 0, 200)\n  .onChange((increasedLineWidthForHitTesting) => {\n    ellipse.style.increasedLineWidthForHitTesting =\n      increasedLineWidthForHitTesting;\n  });\nellipseFolder\n  .add(ellipseConfig, 'cursor', [\n    'default',\n    'pointer',\n    'help',\n    'progress',\n    'text',\n    'move',\n  ])\n  .onChange((cursor) => {\n    ellipse.style.cursor = cursor;\n  });\nellipseFolder.addColor(ellipseConfig, 'shadowColor').onChange((color) => {\n  ellipse.attr('shadowColor', color);\n});\nellipseFolder\n  .add(ellipseConfig, 'shadowBlur', 0, 100)\n  .onChange((shadowBlur) => {\n    ellipse.style.shadowBlur = shadowBlur;\n  });\nellipseFolder\n  .add(ellipseConfig, 'shadowOffsetX', -50, 50)\n  .onChange((shadowOffsetX) => {\n    ellipse.style.shadowOffsetX = shadowOffsetX;\n  });\nellipseFolder\n  .add(ellipseConfig, 'shadowOffsetY', -50, 50)\n  .onChange((shadowOffsetY) => {\n    ellipse.style.shadowOffsetY = shadowOffsetY;\n  });\nellipseFolder\n  .add(ellipseConfig, 'pointerEvents', [\n    'none',\n    'auto',\n    'stroke',\n    'fill',\n    'painted',\n    'visible',\n    'visiblestroke',\n    'visiblefill',\n    'visiblepainted',\n    'all',\n  ])\n  .onChange((pointerEvents) => {\n    ellipse.style.pointerEvents = pointerEvents;\n  });\nellipseFolder\n  .add(ellipseConfig, 'visibility', ['visible', 'hidden'])\n  .onChange((visibility) => {\n    ellipse.style.visibility = visibility;\n  });\n\nconst transformFolder = gui.addFolder('transform');\nconst transformConfig = {\n  localPositionX: 0,\n  localPositionY: 0,\n  localScale: 1,\n  localEulerAngles: 0,\n  transformOrigin: 'left top',\n};\ntransformFolder\n  .add(transformConfig, 'transformOrigin', [\n    'left top',\n    'center',\n    'right bottom',\n    '50% 50%',\n    '50px 50px',\n  ])\n  .onChange((transformOrigin) => {\n    ellipse.style.transformOrigin = transformOrigin;\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionX', 0, 600)\n  .onChange((localPositionX) => {\n    const [lx, ly] = ellipse.getLocalPosition();\n    ellipse.setLocalPosition(localPositionX, ly);\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionY', 0, 500)\n  .onChange((localPositionY) => {\n    const [lx, ly] = ellipse.getLocalPosition();\n    ellipse.setLocalPosition(lx, localPositionY);\n  });\ntransformFolder\n  .add(transformConfig, 'localScale', 0.2, 5)\n  .onChange((localScale) => {\n    ellipse.setLocalScale(localScale);\n  });\ntransformFolder\n  .add(transformConfig, 'localEulerAngles', 0, 360)\n  .onChange((localEulerAngles) => {\n    ellipse.setLocalEulerAngles(localEulerAngles);\n  });\ntransformFolder.open();\n",title:{zh:"椭圆",en:"Ellipse"},filename:"ellipse.js",isNew:!1}],icon:"",id:"ellipse",title:{en:"Ellipse",zh:"椭圆"},api:null,childrenKey:"demos",order:1},{demos:[{id:"rect",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*owKfQKVFG1wAAAAAAAAAAABkARQnAQ",source:"import { Canvas, CanvasEvent, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst rect = new Rect({\n  style: {\n    x: 100,\n    y: 100,\n    width: 300,\n    height: 200,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    radius: [0, 4, 8, 16],\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(rect);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst rectFolder = gui.addFolder('rect');\nconst rectConfig = {\n  x: 200,\n  y: 100,\n  width: 300,\n  height: 200,\n  fill: '#1890FF',\n  stroke: '#F04864',\n  lineWidth: 4,\n  lineDash: 0,\n  lineDashOffset: 0,\n  radiusTL: 0,\n  radiusTR: 4,\n  radiusBR: 8,\n  radiusBL: 16,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  increasedLineWidthForHitTesting: 0,\n  cursor: 'pointer',\n  shadowColor: '#fff',\n  shadowBlur: 0,\n  shadowOffsetX: 0,\n  shadowOffsetY: 0,\n  pointerEvents: 'auto',\n  visibility: 'visible',\n};\nrectFolder.add(rectConfig, 'x', 0, 400).onChange((x) => {\n  rect.style.x = x;\n});\nrectFolder.add(rectConfig, 'y', 0, 400).onChange((y) => {\n  rect.style.y = y;\n});\nrectFolder.add(rectConfig, 'width', -400, 400).onChange((width) => {\n  rect.style.width = width;\n});\nrectFolder.add(rectConfig, 'height', -400, 400).onChange((height) => {\n  rect.style.height = height;\n});\nrectFolder.addColor(rectConfig, 'fill').onChange((color) => {\n  rect.style.fill = color;\n});\nrectFolder.addColor(rectConfig, 'stroke').onChange((color) => {\n  rect.style.stroke = color;\n});\nrectFolder.add(rectConfig, 'radiusTL', 0, 20).onChange((radiusTL) => {\n  rect.style.radius = [\n    radiusTL,\n    rectConfig.radiusTR,\n    rectConfig.radiusBR,\n    rectConfig.radiusBL,\n  ];\n});\nrectFolder.add(rectConfig, 'radiusTR', 0, 20).onChange((radiusTR) => {\n  rect.style.radius = [\n    rectConfig.radiusTL,\n    radiusTR,\n    rectConfig.radiusBR,\n    rectConfig.radiusBL,\n  ];\n});\nrectFolder.add(rectConfig, 'radiusBR', 0, 20).onChange((radiusBR) => {\n  rect.style.radius = [\n    rectConfig.radiusTL,\n    rectConfig.radiusTR,\n    radiusBR,\n    rectConfig.radiusBL,\n  ];\n});\nrectFolder.add(rectConfig, 'radiusBL', 0, 20).onChange((radiusBL) => {\n  rect.style.radius = [\n    rectConfig.radiusTL,\n    rectConfig.radiusTR,\n    rectConfig.radiusBR,\n    radiusBL,\n  ];\n});\nrectFolder.add(rectConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n  rect.style.lineWidth = lineWidth;\n});\nrectFolder.add(rectConfig, 'lineDash', 0, 100).onChange((lineDash) => {\n  rect.style.lineDash = [lineDash];\n});\nrectFolder\n  .add(rectConfig, 'lineDashOffset', 0, 100)\n  .onChange((lineDashOffset) => {\n    rect.style.lineDashOffset = lineDashOffset;\n  });\nrectFolder.add(rectConfig, 'fillOpacity', 0, 1, 0.1).onChange((opacity) => {\n  rect.style.fillOpacity = opacity;\n});\nrectFolder.add(rectConfig, 'strokeOpacity', 0, 1, 0.1).onChange((opacity) => {\n  rect.style.strokeOpacity = opacity;\n});\nrectFolder\n  .add(rectConfig, 'increasedLineWidthForHitTesting', 0, 200)\n  .onChange((increasedLineWidthForHitTesting) => {\n    rect.style.increasedLineWidthForHitTesting =\n      increasedLineWidthForHitTesting;\n  });\nrectFolder\n  .add(rectConfig, 'cursor', [\n    'default',\n    'pointer',\n    'help',\n    'progress',\n    'text',\n    'move',\n  ])\n  .onChange((cursor) => {\n    rect.style.cursor = cursor;\n  });\nrectFolder.addColor(rectConfig, 'shadowColor').onChange((color) => {\n  rect.attr('shadowColor', color);\n});\nrectFolder.add(rectConfig, 'shadowBlur', 0, 100).onChange((shadowBlur) => {\n  rect.style.shadowBlur = shadowBlur;\n});\nrectFolder\n  .add(rectConfig, 'shadowOffsetX', -50, 50)\n  .onChange((shadowOffsetX) => {\n    rect.style.shadowOffsetX = shadowOffsetX;\n  });\nrectFolder\n  .add(rectConfig, 'shadowOffsetY', -50, 50)\n  .onChange((shadowOffsetY) => {\n    rect.style.shadowOffsetY = shadowOffsetY;\n  });\nrectFolder\n  .add(rectConfig, 'pointerEvents', [\n    'none',\n    'auto',\n    'stroke',\n    'fill',\n    'painted',\n    'visible',\n    'visiblestroke',\n    'visiblefill',\n    'visiblepainted',\n    'all',\n  ])\n  .onChange((pointerEvents) => {\n    rect.style.pointerEvents = pointerEvents;\n  });\nrectFolder\n  .add(rectConfig, 'visibility', ['visible', 'hidden'])\n  .onChange((visibility) => {\n    rect.style.visibility = visibility;\n  });\nrectFolder.open();\n\nconst transformFolder = gui.addFolder('transform');\nconst transformConfig = {\n  localPositionX: 0,\n  localPositionY: 0,\n  localScale: 1,\n  localEulerAngles: 0,\n  transformOrigin: 'left top',\n};\ntransformFolder\n  .add(transformConfig, 'transformOrigin', [\n    'left top',\n    'center',\n    'right bottom',\n    '50% 50%',\n    '50px 50px',\n  ])\n  .onChange((transformOrigin) => {\n    rect.style.transformOrigin = transformOrigin;\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionX', 0, 600)\n  .onChange((localPositionX) => {\n    const [lx, ly] = rect.getLocalPosition();\n    rect.setLocalPosition(localPositionX, ly);\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionY', 0, 500)\n  .onChange((localPositionY) => {\n    const [lx, ly] = rect.getLocalPosition();\n    rect.setLocalPosition(lx, localPositionY);\n  });\ntransformFolder\n  .add(transformConfig, 'localScale', 0.2, 5)\n  .onChange((localScale) => {\n    rect.setLocalScale(localScale);\n  });\ntransformFolder\n  .add(transformConfig, 'localEulerAngles', 0, 360)\n  .onChange((localEulerAngles) => {\n    rect.setLocalEulerAngles(localEulerAngles);\n  });\ntransformFolder.open();\n",title:{zh:"矩形",en:"Rectangle"},filename:"rect.js",isNew:!1}],icon:"",id:"rect",title:{en:"Rect",zh:"矩形"},api:null,childrenKey:"demos",order:2},{demos:[{id:"image",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*OIAmRpwhNWYAAAAAAAAAAABkARQnAQ",source:"import { Canvas, CanvasEvent, Image } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst image = new Image({\n  style: {\n    x: 200,\n    y: 100,\n    width: 200,\n    height: 200,\n    src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n    cursor: 'pointer',\n    pointerEvents: 'pixels',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(image);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst imageFolder = gui.addFolder('image');\nconst config = {\n  x: 200,\n  y: 100,\n  width: 200,\n  height: 200,\n  opacity: 1,\n  src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n  pointerEvents: 'auto',\n  visibility: 'visible',\n};\nimageFolder.add(config, 'x', 0, 400).onChange((x) => {\n  image.style.x = x;\n});\nimageFolder.add(config, 'y', 0, 400).onChange((y) => {\n  image.style.y = y;\n});\nimageFolder.add(config, 'width', 0, 400).onChange((width) => {\n  image.style.width = width;\n});\nimageFolder.add(config, 'height', 0, 400).onChange((height) => {\n  image.style.height = height;\n});\nimageFolder.add(config, 'opacity', 0, 1, 0.1).onChange((opacity) => {\n  image.style.opacity = opacity;\n});\nimageFolder\n  .add(config, 'src', [\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8eoKRbfOwgAAAAAAAAAAAABkARQnAQ',\n  ])\n  .onChange((src) => {\n    image.style.img = src;\n  });\nimageFolder\n  .add(config, 'pointerEvents', [\n    'none',\n    'auto',\n    'stroke',\n    'fill',\n    'painted',\n    'visible',\n    'visiblestroke',\n    'visiblefill',\n    'visiblepainted',\n    'all',\n  ])\n  .onChange((pointerEvents) => {\n    image.style.pointerEvents = pointerEvents;\n  });\nimageFolder\n  .add(config, 'visibility', ['visible', 'hidden'])\n  .onChange((visibility) => {\n    image.style.visibility = visibility;\n  });\nimageFolder.open();\n\nconst transformFolder = gui.addFolder('transform');\nconst transformConfig = {\n  localPositionX: 0,\n  localPositionY: 0,\n  localScaleX: 1,\n  localScaleY: 1,\n  localEulerAngles: 0,\n  skewX: 0,\n  skewY: 0,\n  transformOrigin: 'left top',\n};\ntransformFolder\n  .add(transformConfig, 'transformOrigin', [\n    'left top',\n    'center',\n    'right bottom',\n    '50% 50%',\n    '50px 50px',\n  ])\n  .onChange((transformOrigin) => {\n    image.style.transformOrigin = transformOrigin;\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionX', 0, 600)\n  .onChange((localPositionX) => {\n    const [lx, ly] = image.getLocalPosition();\n    image.setLocalPosition(localPositionX, ly);\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionY', 0, 500)\n  .onChange((localPositionY) => {\n    const [lx, ly] = image.getLocalPosition();\n    image.setLocalPosition(lx, localPositionY);\n  });\ntransformFolder\n  .add(transformConfig, 'localScaleX', -5, 5)\n  .onChange((localScaleX) => {\n    if (localScaleX === 0) {\n      localScaleX = 0.0001;\n    }\n    image.setLocalScale(localScaleX, transformConfig.localScaleY);\n  });\ntransformFolder\n  .add(transformConfig, 'localScaleY', -5, 5)\n  .onChange((localScaleY) => {\n    if (localScaleY === 0) {\n      localScaleY = 0.0001;\n    }\n    image.setLocalScale(transformConfig.localScaleX, localScaleY);\n  });\ntransformFolder\n  .add(transformConfig, 'localEulerAngles', 0, 360)\n  .onChange((localEulerAngles) => {\n    image.setLocalEulerAngles(localEulerAngles);\n  });\ntransformFolder.add(transformConfig, 'skewX', -180, 180).onChange((skewX) => {\n  image.setLocalSkew(\n    skewX * (Math.PI / 180),\n    transformConfig.skewY * (Math.PI / 180),\n  );\n});\ntransformFolder.add(transformConfig, 'skewY', -180, 180).onChange((skewY) => {\n  image.setLocalSkew(\n    transformConfig.skewX * (Math.PI / 180),\n    skewY * (Math.PI / 180),\n  );\n});\ntransformFolder.open();\n",title:{zh:"图片",en:"Image"},filename:"image.js",isNew:!1},{id:"image-keep-aspect-ratio",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*OIAmRpwhNWYAAAAAAAAAAABkARQnAQ",source:"import { Canvas, CanvasEvent, Image } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst image = new Image({\n  style: {\n    x: 200,\n    y: 100,\n    width: 200,\n    keepAspectRatio: true,\n    src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n    cursor: 'pointer',\n    pointerEvents: 'pixels',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(image);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst imageFolder = gui.addFolder('image');\nconst config = {\n  x: 200,\n  y: 100,\n  width: 200,\n  height: 200,\n  opacity: 1,\n  src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n  pointerEvents: 'auto',\n  visibility: 'visible',\n};\nimageFolder.add(config, 'x', 0, 400).onChange((x) => {\n  image.style.x = x;\n});\nimageFolder.add(config, 'y', 0, 400).onChange((y) => {\n  image.style.y = y;\n});\nimageFolder.add(config, 'width', 0, 400).onChange((width) => {\n  image.style.width = width;\n});\nimageFolder.add(config, 'height', 0, 400).onChange((height) => {\n  image.style.height = height;\n});\nimageFolder.add(config, 'opacity', 0, 1, 0.1).onChange((opacity) => {\n  image.style.opacity = opacity;\n});\nimageFolder\n  .add(config, 'src', [\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8eoKRbfOwgAAAAAAAAAAAABkARQnAQ',\n  ])\n  .onChange((src) => {\n    image.style.img = src;\n  });\nimageFolder\n  .add(config, 'pointerEvents', [\n    'none',\n    'auto',\n    'stroke',\n    'fill',\n    'painted',\n    'visible',\n    'visiblestroke',\n    'visiblefill',\n    'visiblepainted',\n    'all',\n  ])\n  .onChange((pointerEvents) => {\n    image.style.pointerEvents = pointerEvents;\n  });\nimageFolder\n  .add(config, 'visibility', ['visible', 'hidden'])\n  .onChange((visibility) => {\n    image.style.visibility = visibility;\n  });\nimageFolder.open();\n\nconst transformFolder = gui.addFolder('transform');\nconst transformConfig = {\n  localPositionX: 0,\n  localPositionY: 0,\n  localScaleX: 1,\n  localScaleY: 1,\n  localEulerAngles: 0,\n  skewX: 0,\n  skewY: 0,\n  transformOrigin: 'left top',\n};\ntransformFolder\n  .add(transformConfig, 'transformOrigin', [\n    'left top',\n    'center',\n    'right bottom',\n    '50% 50%',\n    '50px 50px',\n  ])\n  .onChange((transformOrigin) => {\n    image.style.transformOrigin = transformOrigin;\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionX', 0, 600)\n  .onChange((localPositionX) => {\n    const [lx, ly] = image.getLocalPosition();\n    image.setLocalPosition(localPositionX, ly);\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionY', 0, 500)\n  .onChange((localPositionY) => {\n    const [lx, ly] = image.getLocalPosition();\n    image.setLocalPosition(lx, localPositionY);\n  });\ntransformFolder\n  .add(transformConfig, 'localScaleX', -5, 5)\n  .onChange((localScaleX) => {\n    if (localScaleX === 0) {\n      localScaleX = 0.0001;\n    }\n    image.setLocalScale(localScaleX, transformConfig.localScaleY);\n  });\ntransformFolder\n  .add(transformConfig, 'localScaleY', -5, 5)\n  .onChange((localScaleY) => {\n    if (localScaleY === 0) {\n      localScaleY = 0.0001;\n    }\n    image.setLocalScale(transformConfig.localScaleX, localScaleY);\n  });\ntransformFolder\n  .add(transformConfig, 'localEulerAngles', 0, 360)\n  .onChange((localEulerAngles) => {\n    image.setLocalEulerAngles(localEulerAngles);\n  });\ntransformFolder.add(transformConfig, 'skewX', -180, 180).onChange((skewX) => {\n  image.setLocalSkew(\n    skewX * (Math.PI / 180),\n    transformConfig.skewY * (Math.PI / 180),\n  );\n});\ntransformFolder.add(transformConfig, 'skewY', -180, 180).onChange((skewY) => {\n  image.setLocalSkew(\n    transformConfig.skewX * (Math.PI / 180),\n    skewY * (Math.PI / 180),\n  );\n});\ntransformFolder.open();\n",title:{zh:"使用保持宽高比",en:"Keep aspect ratio"},filename:"image-keep-aspect-ratio.js",isNew:!1}],icon:"",id:"image",title:{en:"Image",zh:"图片"},api:null,childrenKey:"demos",order:3},{demos:[{id:"line",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*7YsyTJDA_CMAAAAAAAAAAABkARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Image, Line, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a line\nconst line1 = new Line({\n  style: {\n    x1: 200,\n    y1: 100,\n    x2: 400,\n    y2: 100,\n    stroke: '#1890FF',\n    lineWidth: 2,\n    cursor: 'pointer',\n  },\n});\n\nconst line2 = new Line({\n  style: {\n    x1: 200,\n    y1: 150,\n    x2: 400,\n    y2: 150,\n    lineWidth: 2,\n    lineDash: [10, 10],\n    stroke: '#F04864',\n  },\n});\nconst line3 = new Line({\n  style: {\n    x1: 200,\n    y1: 200,\n    x2: 400,\n    y2: 200,\n    lineWidth: 2,\n    stroke: 'l(0) 0:#F04864 0.5:#7EC2F3 1:#1890FF',\n  },\n});\n\nconst arrowMarker = new Path({\n  style: {\n    d: 'M 10,10 L -10,0 L 10,-10 Z',\n    stroke: '#1890FF',\n    transformOrigin: 'center',\n  },\n});\nconst circleMarker = new Circle({\n  style: {\n    r: 10,\n    stroke: '#1890FF',\n  },\n});\nconst imageMarker = new Image({\n  style: {\n    x: -25,\n    y: -25,\n    width: 50,\n    height: 50,\n    transformOrigin: 'center',\n    transform: 'rotate(90deg)',\n    src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n  },\n});\n\nconst arrowLine = new Line({\n  style: {\n    x1: 200,\n    y1: 250,\n    x2: 400,\n    y2: 250,\n    stroke: '#1890FF',\n    lineWidth: 2,\n    cursor: 'pointer',\n    markerStart: arrowMarker,\n    markerEnd: circleMarker,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(line1);\n  canvas.appendChild(line2);\n  canvas.appendChild(line3);\n  canvas.appendChild(arrowLine);\n\n  line2.animate([{ lineDashOffset: -20 }, { lineDashOffset: 0 }], {\n    duration: 1500,\n    iterations: Infinity,\n  });\n\n  line3.animate(\n    [\n      { x1: 200, lineWidth: 2 },\n      { x1: 0, lineWidth: 10 },\n    ],\n    {\n      duration: 1500,\n      iterations: Infinity,\n      easing: 'cubic-bezier(0.250, 0.460, 0.450, 0.940)',\n    },\n  );\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\n\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst lineFolder = gui.addFolder('line1');\nconst lineConfig = {\n  stroke: '#1890FF',\n  lineWidth: 2,\n  lineJoin: 'miter',\n  lineCap: 'butt',\n  strokeOpacity: 1,\n  x1: 200,\n  y1: 100,\n  x2: 400,\n  y2: 100,\n  lineDash: 0,\n  lineDashOffset: 0,\n  increasedLineWidthForHitTesting: 0,\n  cursor: 'pointer',\n  shadowColor: '#fff',\n  shadowBlur: 0,\n  shadowOffsetX: 0,\n  shadowOffsetY: 0,\n  pointerEvents: 'auto',\n  visibility: 'visible',\n};\nlineFolder\n  .add(lineConfig, 'lineJoin', ['miter', 'round', 'bevel'])\n  .onChange((lineJoin) => {\n    line1.style.lineJoin = lineJoin;\n  });\nlineFolder\n  .add(lineConfig, 'lineCap', ['butt', 'round', 'square'])\n  .onChange((lineCap) => {\n    line1.style.lineCap = lineCap;\n  });\nlineFolder.add(lineConfig, 'lineDash', 0, 100).onChange((lineDash) => {\n  line1.style.lineDash = [lineDash];\n});\nlineFolder\n  .add(lineConfig, 'lineDashOffset', 0, 100)\n  .onChange((lineDashOffset) => {\n    line1.style.lineDashOffset = lineDashOffset;\n  });\nlineFolder.add(lineConfig, 'x1', 0, 400).onChange((x1) => {\n  line1.style.x1 = x1;\n});\nlineFolder.add(lineConfig, 'y1', 0, 400).onChange((y1) => {\n  line1.style.y1 = y1;\n});\nlineFolder.add(lineConfig, 'x2', 0, 400).onChange((x2) => {\n  line1.style.x2 = x2;\n});\nlineFolder.add(lineConfig, 'y2', 0, 400).onChange((y2) => {\n  line1.style.y2 = y2;\n});\nlineFolder.addColor(lineConfig, 'stroke').onChange((color) => {\n  line1.style.stroke = color;\n});\nlineFolder.add(lineConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n  line1.style.lineWidth = lineWidth;\n});\nlineFolder.add(lineConfig, 'strokeOpacity', 0, 1, 0.1).onChange((opacity) => {\n  line1.style.strokeOpacity = opacity;\n});\nlineFolder\n  .add(lineConfig, 'increasedLineWidthForHitTesting', 0, 200)\n  .onChange((increasedLineWidthForHitTesting) => {\n    line1.style.increasedLineWidthForHitTesting =\n      increasedLineWidthForHitTesting;\n  });\nlineFolder\n  .add(lineConfig, 'cursor', [\n    'default',\n    'pointer',\n    'help',\n    'progress',\n    'text',\n    'move',\n  ])\n  .onChange((cursor) => {\n    line1.style.cursor = cursor;\n  });\nlineFolder.addColor(lineConfig, 'shadowColor').onChange((color) => {\n  line1.attr('shadowColor', color);\n});\nlineFolder.add(lineConfig, 'shadowBlur', 0, 100).onChange((shadowBlur) => {\n  line1.style.shadowBlur = shadowBlur;\n});\nlineFolder\n  .add(lineConfig, 'shadowOffsetX', -50, 50)\n  .onChange((shadowOffsetX) => {\n    line1.style.shadowOffsetX = shadowOffsetX;\n  });\nlineFolder\n  .add(lineConfig, 'shadowOffsetY', -50, 50)\n  .onChange((shadowOffsetY) => {\n    line1.style.shadowOffsetY = shadowOffsetY;\n  });\nlineFolder\n  .add(lineConfig, 'pointerEvents', [\n    'none',\n    'auto',\n    'stroke',\n    'fill',\n    'painted',\n    'visible',\n    'visiblestroke',\n    'visiblefill',\n    'visiblepainted',\n    'all',\n  ])\n  .onChange((pointerEvents) => {\n    line1.style.pointerEvents = pointerEvents;\n  });\nlineFolder\n  .add(lineConfig, 'visibility', ['visible', 'hidden'])\n  .onChange((visibility) => {\n    line1.style.visibility = visibility;\n  });\n\nconst transformFolder = gui.addFolder('transform');\nconst transformConfig = {\n  localPositionX: 0,\n  localPositionY: 0,\n  localScale: 1,\n  localEulerAngles: 0,\n  transformOrigin: 'left top',\n};\ntransformFolder\n  .add(transformConfig, 'transformOrigin', [\n    'left top',\n    'center',\n    'right bottom',\n    '50% 50%',\n    '50px 50px',\n  ])\n  .onChange((transformOrigin) => {\n    line1.style.transformOrigin = transformOrigin;\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionX', 0, 600)\n  .onChange((localPositionX) => {\n    const [lx, ly] = line1.getLocalPosition();\n    line1.setLocalPosition(localPositionX, ly);\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionY', 0, 500)\n  .onChange((localPositionY) => {\n    const [lx, ly] = line1.getLocalPosition();\n    line1.setLocalPosition(lx, localPositionY);\n  });\ntransformFolder\n  .add(transformConfig, 'localScale', 0.2, 5)\n  .onChange((localScale) => {\n    line1.setLocalScale(localScale);\n  });\ntransformFolder\n  .add(transformConfig, 'localEulerAngles', 0, 360)\n  .onChange((localEulerAngles) => {\n    line1.setLocalEulerAngles(localEulerAngles);\n  });\ntransformFolder.close();\n\nconst markerFolder = gui.addFolder('marker');\nconst markerConfig = {\n  markerStart: 'path',\n  markerEnd: 'circle',\n  markerStartOffset: 0,\n  markerEndOffset: 0,\n  x1: 200,\n  y1: 250,\n  x2: 400,\n  y2: 250,\n};\nmarkerFolder\n  .add(markerConfig, 'markerStart', ['path', 'circle', 'image', 'null'])\n  .onChange((markerStartStr) => {\n    let markerStart;\n    if (markerStartStr === 'path') {\n      markerStart = arrowMarker;\n    } else if (markerStartStr === 'circle') {\n      markerStart = circleMarker;\n    } else if (markerStartStr === 'image') {\n      markerStart = imageMarker;\n    } else {\n      markerStart = null;\n    }\n\n    arrowLine.style.markerStart = markerStart;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerEnd', ['path', 'circle', 'image', 'null'])\n  .onChange((markerEndStr) => {\n    let markerEnd;\n    if (markerEndStr === 'path') {\n      markerEnd = arrowMarker;\n    } else if (markerEndStr === 'circle') {\n      markerEnd = circleMarker;\n    } else if (markerEndStr === 'image') {\n      markerEnd = imageMarker;\n    } else {\n      markerEnd = null;\n    }\n\n    arrowLine.style.markerEnd = markerEnd;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerStartOffset', -20, 20)\n  .onChange((markerStartOffset) => {\n    arrowLine.style.markerStartOffset = markerStartOffset;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerEndOffset', -20, 20)\n  .onChange((markerEndOffset) => {\n    arrowLine.style.markerEndOffset = markerEndOffset;\n  });\nmarkerFolder.add(markerConfig, 'x1', 0, 400).onChange((x1) => {\n  arrowLine.style.x1 = x1;\n});\nmarkerFolder.add(markerConfig, 'y1', 0, 400).onChange((y1) => {\n  arrowLine.style.y1 = y1;\n});\nmarkerFolder.add(markerConfig, 'x2', 0, 400).onChange((x2) => {\n  arrowLine.style.x2 = x2;\n});\nmarkerFolder.add(markerConfig, 'y2', 0, 400).onChange((y2) => {\n  arrowLine.style.y2 = y2;\n});\nmarkerFolder.open();\n",title:{zh:"直线",en:"Line"},filename:"line.js",isNew:!1},{id:"marker",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*X5W_TYz-2SIAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Image, Line, Path, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin } from '@antv/g-plugin-dragndrop';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * Draw arrows with marker, ported from\n * @see https://g6.antv.vision/zh/examples/item/arrows#built-in-arrows\n */\n\nconst plugin = new Plugin();\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\ncanvasRenderer.registerPlugin(plugin);\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\ncanvaskitRenderer.registerPlugin(plugin);\nconst webglRenderer = new WebGLRenderer();\nwebglRenderer.registerPlugin(plugin);\nconst svgRenderer = new SVGRenderer();\nsvgRenderer.registerPlugin(plugin);\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n/**\n * Arrow with triangle marker\n */\nconst arrowMarker = new Path({\n  style: {\n    d: 'M 10,10 L -10,0 L 10,-10 Z',\n    stroke: '#1890FF',\n    transformOrigin: 'center',\n  },\n});\nconst handle1 = new Circle({\n  id: 'handle1',\n  style: {\n    draggable: true,\n    cursor: 'move',\n    fill: '#DEE9FF',\n    stroke: '#5B8FF9',\n    r: 10,\n    cx: 100,\n    cy: 50,\n  },\n});\nconst handle2 = handle1.cloneNode();\nhandle2.id = 'handle2';\nhandle2.style.cx = 300;\nhandle2.style.cy = 50;\nconst arrow1 = new Line({\n  style: {\n    x1: 100,\n    y1: 50,\n    x2: 300,\n    y2: 50,\n    stroke: '#F6BD16',\n    lineWidth: 6,\n    markerEnd: arrowMarker,\n    markerEndOffset: 28,\n  },\n});\n\n/**\n * Arrow with rect marker\n */\nconst rectMarker = new Rect({\n  style: {\n    x: -10,\n    y: -10,\n    width: 20,\n    height: 20,\n    fill: '#F6BD16',\n    transformOrigin: 'center',\n  },\n});\nconst handle3 = handle1.cloneNode();\nhandle3.id = 'handle3';\nhandle3.style.cx = 100;\nhandle3.style.cy = 150;\nconst handle4 = handle1.cloneNode();\nhandle4.id = 'handle4';\nhandle4.style.cx = 300;\nhandle4.style.cy = 150;\nconst arrow2 = new Line({\n  style: {\n    x1: 100,\n    y1: 150,\n    x2: 300,\n    y2: 150,\n    stroke: '#F6BD16',\n    lineWidth: 6,\n    markerEnd: rectMarker,\n    markerEndOffset: 28,\n  },\n});\n\n/**\n * Arrow with image marker\n */\nconst imageMarker = new Image({\n  style: {\n    x: -25,\n    y: -25,\n    width: 50,\n    height: 50,\n    src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n    transformOrigin: 'center',\n    transform: 'rotate(90deg)',\n  },\n});\nconst handle5 = handle1.cloneNode();\nhandle5.id = 'handle5';\nhandle5.style.cx = 100;\nhandle5.style.cy = 250;\nconst handle6 = handle1.cloneNode();\nhandle6.id = 'handle6';\nhandle6.style.cx = 300;\nhandle6.style.cy = 250;\nconst arrow3 = new Line({\n  style: {\n    x1: 100,\n    y1: 250,\n    x2: 300,\n    y2: 250,\n    stroke: '#F6BD16',\n    lineWidth: 6,\n    markerEnd: imageMarker,\n    markerEndOffset: 40,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(arrow1);\n  canvas.appendChild(handle1);\n  canvas.appendChild(handle2);\n\n  canvas.appendChild(arrow2);\n  canvas.appendChild(handle3);\n  canvas.appendChild(handle4);\n\n  canvas.appendChild(arrow3);\n  canvas.appendChild(handle5);\n  canvas.appendChild(handle6);\n\n  let shiftX = 0;\n  let shiftY = 0;\n  function moveAt(target, canvasX, canvasY) {\n    const newPosX = canvasX - shiftX;\n    const newPosY = canvasY - shiftY;\n    target.style.cx = newPosX;\n    target.style.cy = newPosY;\n\n    // re-define arrow\n    if (target.id === 'handle1') {\n      arrow1.style.x1 = newPosX;\n      arrow1.style.y1 = newPosY;\n    } else if (target.id === 'handle2') {\n      arrow1.style.x2 = newPosX;\n      arrow1.style.y2 = newPosY;\n    } else if (target.id === 'handle3') {\n      arrow2.style.x1 = newPosX;\n      arrow2.style.y1 = newPosY;\n    } else if (target.id === 'handle4') {\n      arrow2.style.x2 = newPosX;\n      arrow2.style.y2 = newPosY;\n    } else if (target.id === 'handle5') {\n      arrow3.style.x1 = newPosX;\n      arrow3.style.y1 = newPosY;\n    } else if (target.id === 'handle6') {\n      arrow3.style.x2 = newPosX;\n      arrow3.style.y2 = newPosY;\n    }\n  }\n\n  canvas.addEventListener('dragstart', function (e) {\n    const { cx, cy } = e.target.style;\n    shiftX = e.canvasX - cx;\n    shiftY = e.canvasY - cy;\n\n    moveAt(e.target, e.canvasX, e.canvasY);\n  });\n  canvas.addEventListener('drag', function (e) {\n    moveAt(e.target, e.canvasX, e.canvasY);\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"标记图形",en:"Marker"},filename:"marker.js",isNew:!1},{id:"thin-line",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*FNTzSp46rwgAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Line, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a line\nconst line1 = new Line({\n  style: {\n    x1: 200,\n    y1: 100,\n    x2: 400,\n    y2: 100,\n    stroke: '#1890FF',\n    lineWidth: 0.1,\n    cursor: 'pointer',\n  },\n});\nconst line2 = line1.cloneNode();\nconst line3 = line1.cloneNode();\nconst line4 = line1.cloneNode();\nline2.style.lineWidth = 0.5;\nline3.style.lineWidth = 1;\nline4.style.lineWidth = 2;\nline2.translate(0, 50);\nline3.translate(0, 100);\nline4.translate(0, 150);\n\nconst path = new Path({\n  style: {\n    lineWidth: 0.5,\n    stroke: '#54BECC',\n    d: 'M 0,40 C 5.5555555555555545,40,22.222222222222218,44.44444444444445,33.33333333333333,40 C 44.444444444444436,35.55555555555556,55.55555555555554,14.66666666666667,66.66666666666666,13.333333333333336 C 77.77777777777777,12.000000000000002,88.88888888888887,32,100,32 C 111.11111111111113,32,122.22222222222221,14.66666666666667,133.33333333333331,13.333333333333336 C 144.44444444444443,12.000000000000002,155.55555555555557,24,166.66666666666669,24 C 177.7777777777778,24,188.8888888888889,11.111111111111114,200,13.333333333333336 C 211.1111111111111,15.555555555555557,222.22222222222226,35.111111111111114,233.33333333333334,37.333333333333336 C 244.44444444444443,39.55555555555555,255.55555555555551,31.22222222222223,266.66666666666663,26.66666666666667 C 277.77777777777777,22.111111111111114,294.4444444444444,12.777777777777779,300,10',\n    transform: 'translate(100, 100)',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(line1);\n  canvas.appendChild(line2);\n  canvas.appendChild(line3);\n  canvas.appendChild(line4);\n  canvas.appendChild(path);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\n\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"绘制宽度小于 1px 的线",en:"Thin Line"},filename:"thin-line.js",isNew:!1}],icon:"",id:"line",title:{en:"Line",zh:"直线"},api:null,childrenKey:"demos",order:4},{demos:[{id:"polyline",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*bo4rRK0U8PIAAAAAAAAAAABkARQnAQ",source:"import { Canvas, CanvasEvent, Polyline } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a line\nconst points = [\n  [50, 50],\n  [100, 50],\n  [100, 100],\n  [150, 100],\n  [150, 150],\n  [200, 150],\n  [200, 200],\n  [250, 200],\n  [250, 250],\n  [300, 250],\n  [300, 300],\n  [350, 300],\n  [350, 350],\n  [400, 350],\n  [400, 400],\n  [450, 400],\n];\nconst polyline = new Polyline({\n  style: {\n    points,\n    stroke: '#1890FF',\n    lineWidth: 20,\n    lineCap: 'round',\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(polyline);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst lineFolder = gui.addFolder('polyline');\nconst lineConfig = {\n  stroke: '#1890FF',\n  lineWidth: 2,\n  lineJoin: 'miter',\n  lineCap: 'butt',\n  lineDash: 0,\n  lineDashOffset: 0,\n  strokeOpacity: 1,\n  firstPointX: 50,\n  firstPointY: 50,\n  visible: true,\n  increasedLineWidthForHitTesting: 0,\n  cursor: 'pointer',\n  shadowColor: '#fff',\n  shadowBlur: 0,\n  shadowOffsetX: 0,\n  shadowOffsetY: 0,\n};\nlineFolder.add(lineConfig, 'firstPointX', 0, 200).onChange((firstPointX) => {\n  const newPoints = [...points];\n  newPoints[0] = [firstPointX, lineConfig.firstPointY];\n  polyline.style.points = newPoints;\n});\nlineFolder.add(lineConfig, 'firstPointY', 0, 200).onChange((firstPointY) => {\n  const newPoints = [...points];\n  newPoints[0] = [lineConfig.firstPointX, firstPointY];\n  polyline.style.points = newPoints;\n});\nlineFolder.addColor(lineConfig, 'stroke').onChange((color) => {\n  polyline.attr('stroke', color);\n});\nlineFolder.add(lineConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n  polyline.attr('lineWidth', lineWidth);\n});\nlineFolder\n  .add(lineConfig, 'lineJoin', ['miter', 'round', 'bevel'])\n  .onChange((lineJoin) => {\n    polyline.attr('lineJoin', lineJoin);\n  });\nlineFolder\n  .add(lineConfig, 'lineCap', ['butt', 'round', 'square'])\n  .onChange((lineCap) => {\n    polyline.attr('lineCap', lineCap);\n  });\nlineFolder.add(lineConfig, 'lineDash', 0, 100).onChange((lineDash) => {\n  polyline.style.lineDash = [lineDash];\n});\nlineFolder\n  .add(lineConfig, 'lineDashOffset', 0, 100)\n  .onChange((lineDashOffset) => {\n    polyline.style.lineDashOffset = lineDashOffset;\n  });\nlineFolder.add(lineConfig, 'strokeOpacity', 0, 1, 0.1).onChange((opacity) => {\n  polyline.attr('strokeOpacity', opacity);\n});\nlineFolder.add(lineConfig, 'visible').onChange((visible) => {\n  if (visible) {\n    polyline.style.visibility = 'visible';\n    // polyline.show();\n  } else {\n    polyline.style.visibility = 'hidden';\n    // polyline.hide();\n  }\n});\nlineFolder\n  .add(lineConfig, 'increasedLineWidthForHitTesting', 0, 50)\n  .onChange((increasedLineWidthForHitTesting) => {\n    polyline.style.increasedLineWidthForHitTesting =\n      increasedLineWidthForHitTesting;\n  });\nlineFolder\n  .add(lineConfig, 'cursor', [\n    'default',\n    'pointer',\n    'help',\n    'progress',\n    'text',\n    'move',\n  ])\n  .onChange((cursor) => {\n    polyline.style.cursor = cursor;\n  });\nlineFolder.addColor(lineConfig, 'shadowColor').onChange((color) => {\n  polyline.attr('shadowColor', color);\n});\nlineFolder.add(lineConfig, 'shadowBlur', 0, 100).onChange((shadowBlur) => {\n  polyline.style.shadowBlur = shadowBlur;\n});\nlineFolder\n  .add(lineConfig, 'shadowOffsetX', -50, 50)\n  .onChange((shadowOffsetX) => {\n    polyline.style.shadowOffsetX = shadowOffsetX;\n  });\nlineFolder\n  .add(lineConfig, 'shadowOffsetY', -50, 50)\n  .onChange((shadowOffsetY) => {\n    polyline.style.shadowOffsetY = shadowOffsetY;\n  });\n\nconst transformFolder = gui.addFolder('transform');\nconst transformConfig = {\n  localPositionX: 0,\n  localPositionY: 0,\n  localScale: 1,\n  localEulerAngles: 0,\n  transformOrigin: 'left top',\n};\ntransformFolder\n  .add(transformConfig, 'transformOrigin', [\n    'left top',\n    'center',\n    'right bottom',\n    '50% 50%',\n    '50px 50px',\n  ])\n  .onChange((transformOrigin) => {\n    polyline.style.transformOrigin = transformOrigin;\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionX', 0, 600)\n  .onChange((localPositionX) => {\n    const [lx, ly] = polyline.getLocalPosition();\n    polyline.setLocalPosition(localPositionX, ly);\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionY', 0, 500)\n  .onChange((localPositionY) => {\n    const [lx, ly] = polyline.getLocalPosition();\n    polyline.setLocalPosition(lx, localPositionY);\n  });\ntransformFolder\n  .add(transformConfig, 'localScale', 0.2, 5)\n  .onChange((localScale) => {\n    polyline.setLocalScale(localScale);\n  });\ntransformFolder\n  .add(transformConfig, 'localEulerAngles', 0, 360)\n  .onChange((localEulerAngles) => {\n    polyline.setLocalEulerAngles(localEulerAngles);\n  });\ntransformFolder.close();\n",title:{zh:"折线",en:"Polyline"},filename:"polyline.js",isNew:!1},{id:"marker",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*ZoM4QIkPU2oAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, Circle, Image, Path, Polyline } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a line\nconst points = [\n  [50, 50],\n  [100, 50],\n  [100, 100],\n  [150, 100],\n  [150, 150],\n  [200, 150],\n  [200, 200],\n  [250, 200],\n  [250, 250],\n  [300, 250],\n  [300, 300],\n  [350, 300],\n  [350, 350],\n  [400, 350],\n  [400, 400],\n  [450, 400],\n];\nconst polyline = new Polyline({\n  style: {\n    points,\n    stroke: '#1890FF',\n    lineWidth: 2,\n    cursor: 'pointer',\n  },\n});\n\nconst arrowMarker = new Path({\n  style: {\n    d: 'M 10,10 L -10,0 L 10,-10 Z',\n    stroke: '#1890FF',\n    transformOrigin: 'center',\n  },\n});\nconst circleMarker = new Circle({\n  style: {\n    r: 10,\n    stroke: '#1890FF',\n  },\n});\nconst imageMarker = new Image({\n  style: {\n    x: -25,\n    y: -25,\n    width: 50,\n    height: 50,\n    transformOrigin: 'center',\n    transform: 'rotate(90deg)',\n    src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(polyline);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst markerFolder = gui.addFolder('marker');\nconst markerConfig = {\n  markerStart: 'null',\n  markerEnd: 'null',\n  markerMid: 'null',\n  markerStartOffset: 0,\n  markerEndOffset: 0,\n};\nmarkerFolder\n  .add(markerConfig, 'markerStart', ['path', 'circle', 'image', 'null'])\n  .onChange((markerStartStr) => {\n    let markerStart;\n    if (markerStartStr === 'path') {\n      markerStart = arrowMarker.cloneNode();\n    } else if (markerStartStr === 'circle') {\n      markerStart = circleMarker.cloneNode();\n    } else if (markerStartStr === 'image') {\n      markerStart = imageMarker.cloneNode();\n    } else {\n      markerStart = null;\n    }\n\n    polyline.style.markerStart = markerStart;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerMid', ['path', 'circle', 'image', 'null'])\n  .onChange((markerMidStr) => {\n    let markerMid;\n    if (markerMidStr === 'path') {\n      markerMid = arrowMarker.cloneNode();\n    } else if (markerMidStr === 'circle') {\n      markerMid = circleMarker.cloneNode();\n    } else if (markerMidStr === 'image') {\n      markerMid = imageMarker.cloneNode();\n    } else {\n      markerMid = null;\n    }\n\n    polyline.style.markerMid = markerMid;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerEnd', ['path', 'circle', 'image', 'null'])\n  .onChange((markerEndStr) => {\n    let markerEnd;\n    if (markerEndStr === 'path') {\n      markerEnd = arrowMarker.cloneNode();\n    } else if (markerEndStr === 'circle') {\n      markerEnd = circleMarker.cloneNode();\n    } else if (markerEndStr === 'image') {\n      markerEnd = imageMarker.cloneNode();\n    } else {\n      markerEnd = null;\n    }\n\n    polyline.style.markerEnd = markerEnd;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerStartOffset', -20, 20)\n  .onChange((markerStartOffset) => {\n    polyline.style.markerStartOffset = markerStartOffset;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerEndOffset', -20, 20)\n  .onChange((markerEndOffset) => {\n    polyline.style.markerEndOffset = markerEndOffset;\n  });\nmarkerFolder.open();\n",title:{zh:"标记图形",en:"Marker"},filename:"marker.js",isNew:!1}],icon:"",id:"polyline",title:{en:"Polyline",zh:"折线"},api:null,childrenKey:"demos",order:5},{demos:[{id:"polygon",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*ooeZRJF65nIAAAAAAAAAAABkARQnAQ",source:"import { Canvas, CanvasEvent, Polygon } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a polygon\nconst polygon = new Polygon({\n  style: {\n    points: [\n      [200, 100],\n      [400, 100],\n      [400 + 200 * Math.sin(Math.PI / 6), 100 + 200 * Math.cos(Math.PI / 6)],\n      [400, 100 + 200 * Math.cos(Math.PI / 6) * 2],\n      [200, 100 + 200 * Math.cos(Math.PI / 6) * 2],\n      [200 - 200 * Math.sin(Math.PI / 6), 100 + 200 * Math.cos(Math.PI / 6)],\n    ],\n    fill: '#C6E5FF',\n    stroke: '#1890FF',\n    lineWidth: 2,\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // add a polygon to canvas\n  canvas.appendChild(polygon);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst polygonFolder = gui.addFolder('polygon');\nconst polygonConfig = {\n  fill: '#C6E5FF',\n  stroke: '#1890FF',\n  lineWidth: 2,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  lineDash: 0,\n  lineDashOffset: 0,\n  increasedLineWidthForHitTesting: 0,\n  cursor: 'pointer',\n  shadowColor: '#fff',\n  shadowBlur: 0,\n  shadowOffsetX: 0,\n  shadowOffsetY: 0,\n  pointerEvents: 'auto',\n  visibility: 'visible',\n};\npolygonFolder.addColor(polygonConfig, 'fill').onChange((color) => {\n  polygon.style.fill = color;\n});\npolygonFolder.addColor(polygonConfig, 'stroke').onChange((color) => {\n  polygon.style.stroke = color;\n});\npolygonFolder.add(polygonConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n  polygon.style.lineWidth = lineWidth;\n});\npolygonFolder.add(polygonConfig, 'lineDash', 0, 100).onChange((lineDash) => {\n  polygon.style.lineDash = [lineDash];\n});\npolygonFolder\n  .add(polygonConfig, 'lineDashOffset', 0, 100)\n  .onChange((lineDashOffset) => {\n    polygon.style.lineDashOffset = lineDashOffset;\n  });\npolygonFolder\n  .add(polygonConfig, 'fillOpacity', 0, 1, 0.1)\n  .onChange((opacity) => {\n    polygon.style.fillOpacity = opacity;\n  });\npolygonFolder\n  .add(polygonConfig, 'strokeOpacity', 0, 1, 0.1)\n  .onChange((opacity) => {\n    polygon.style.strokeOpacity = opacity;\n  });\npolygonFolder\n  .add(polygonConfig, 'increasedLineWidthForHitTesting', 0, 200)\n  .onChange((increasedLineWidthForHitTesting) => {\n    polygon.style.increasedLineWidthForHitTesting =\n      increasedLineWidthForHitTesting;\n  });\npolygonFolder\n  .add(polygonConfig, 'cursor', [\n    'default',\n    'pointer',\n    'help',\n    'progress',\n    'text',\n    'move',\n  ])\n  .onChange((cursor) => {\n    polygon.style.cursor = cursor;\n  });\npolygonFolder.addColor(polygonConfig, 'shadowColor').onChange((color) => {\n  polygon.attr('shadowColor', color);\n});\npolygonFolder\n  .add(polygonConfig, 'shadowBlur', 0, 100)\n  .onChange((shadowBlur) => {\n    polygon.style.shadowBlur = shadowBlur;\n  });\npolygonFolder\n  .add(polygonConfig, 'shadowOffsetX', -50, 50)\n  .onChange((shadowOffsetX) => {\n    polygon.style.shadowOffsetX = shadowOffsetX;\n  });\npolygonFolder\n  .add(polygonConfig, 'shadowOffsetY', -50, 50)\n  .onChange((shadowOffsetY) => {\n    polygon.style.shadowOffsetY = shadowOffsetY;\n  });\npolygonFolder\n  .add(polygonConfig, 'pointerEvents', [\n    'none',\n    'auto',\n    'stroke',\n    'fill',\n    'painted',\n    'visible',\n    'visiblestroke',\n    'visiblefill',\n    'visiblepainted',\n    'all',\n  ])\n  .onChange((pointerEvents) => {\n    polygon.style.pointerEvents = pointerEvents;\n  });\npolygonFolder\n  .add(polygonConfig, 'visibility', ['visible', 'hidden'])\n  .onChange((visibility) => {\n    polygon.style.visibility = visibility;\n  });\n\nconst transformFolder = gui.addFolder('transform');\nconst transformConfig = {\n  localPositionX: 0,\n  localPositionY: 0,\n  localScale: 1,\n  localEulerAngles: 0,\n  transformOrigin: 'left top',\n};\ntransformFolder\n  .add(transformConfig, 'transformOrigin', [\n    'left top',\n    'center',\n    'right bottom',\n    '50% 50%',\n    '50px 50px',\n  ])\n  .onChange((transformOrigin) => {\n    polygon.style.transformOrigin = transformOrigin;\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionX', 0, 600)\n  .onChange((localPositionX) => {\n    const [lx, ly] = polygon.getLocalPosition();\n    polygon.setLocalPosition(localPositionX, ly);\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionY', 0, 500)\n  .onChange((localPositionY) => {\n    const [lx, ly] = polygon.getLocalPosition();\n    polygon.setLocalPosition(lx, localPositionY);\n  });\ntransformFolder\n  .add(transformConfig, 'localScale', 0.2, 5)\n  .onChange((localScale) => {\n    polygon.setLocalScale(localScale);\n  });\ntransformFolder\n  .add(transformConfig, 'localEulerAngles', 0, 360)\n  .onChange((localEulerAngles) => {\n    polygon.setLocalEulerAngles(localEulerAngles);\n  });\ntransformFolder.close();\n",title:{zh:"多边形",en:"Polygon"},filename:"polygon.js",isNew:!1},{id:"marker",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*4OujQbUBUd0AAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, Circle, Image, Path, Polygon } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a polygon\nconst polygon = new Polygon({\n  style: {\n    points: [\n      [200, 100],\n      [400, 100],\n      [400 + 200 * Math.sin(Math.PI / 6), 100 + 200 * Math.cos(Math.PI / 6)],\n      [400, 100 + 200 * Math.cos(Math.PI / 6) * 2],\n      [200, 100 + 200 * Math.cos(Math.PI / 6) * 2],\n      [200 - 200 * Math.sin(Math.PI / 6), 100 + 200 * Math.cos(Math.PI / 6)],\n    ],\n    fill: '#C6E5FF',\n    stroke: '#1890FF',\n    lineWidth: 2,\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // add a polygon to canvas\n  canvas.appendChild(polygon);\n});\n\nconst arrowMarker = new Path({\n  style: {\n    d: 'M 10,10 L -10,0 L 10,-10 Z',\n    stroke: '#1890FF',\n    transformOrigin: 'center',\n  },\n});\nconst circleMarker = new Circle({\n  style: {\n    r: 10,\n    stroke: '#1890FF',\n  },\n});\nconst imageMarker = new Image({\n  style: {\n    x: -25,\n    y: -25,\n    width: 50,\n    height: 50,\n    transformOrigin: 'center',\n    transform: 'rotate(90deg)',\n    src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n  },\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst markerFolder = gui.addFolder('marker');\nconst markerConfig = {\n  markerStart: 'null',\n  markerEnd: 'null',\n  markerMid: 'null',\n  markerStartOffset: 0,\n  markerEndOffset: 0,\n};\nmarkerFolder\n  .add(markerConfig, 'markerStart', ['path', 'circle', 'image', 'null'])\n  .onChange((markerStartStr) => {\n    let markerStart;\n    if (markerStartStr === 'path') {\n      markerStart = arrowMarker.cloneNode();\n    } else if (markerStartStr === 'circle') {\n      markerStart = circleMarker.cloneNode();\n    } else if (markerStartStr === 'image') {\n      markerStart = imageMarker.cloneNode();\n    } else {\n      markerStart = null;\n    }\n\n    polygon.style.markerStart = markerStart;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerMid', ['path', 'circle', 'image', 'null'])\n  .onChange((markerMidStr) => {\n    let markerMid;\n    if (markerMidStr === 'path') {\n      markerMid = arrowMarker.cloneNode();\n    } else if (markerMidStr === 'circle') {\n      markerMid = circleMarker.cloneNode();\n    } else if (markerMidStr === 'image') {\n      markerMid = imageMarker.cloneNode();\n    } else {\n      markerMid = null;\n    }\n\n    polygon.style.markerMid = markerMid;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerEnd', ['path', 'circle', 'image', 'null'])\n  .onChange((markerEndStr) => {\n    let markerEnd;\n    if (markerEndStr === 'path') {\n      markerEnd = arrowMarker.cloneNode();\n    } else if (markerEndStr === 'circle') {\n      markerEnd = circleMarker.cloneNode();\n    } else if (markerEndStr === 'image') {\n      markerEnd = imageMarker.cloneNode();\n    } else {\n      markerEnd = null;\n    }\n\n    polygon.style.markerEnd = markerEnd;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerStartOffset', -20, 20)\n  .onChange((markerStartOffset) => {\n    polygon.style.markerStartOffset = markerStartOffset;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerEndOffset', -20, 20)\n  .onChange((markerEndOffset) => {\n    polygon.style.markerEndOffset = markerEndOffset;\n  });\nmarkerFolder.open();\n",title:{zh:"标记图形",en:"Marker"},filename:"marker.js",isNew:!1},{id:"fillrule",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*VVoJSrtsmO0AAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, Polygon } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst star = new Polygon({\n  style: {\n    points: '50,0 21,90 98,35 2,35 79,90',\n    fill: '#C6E5FF',\n    stroke: '#1890FF',\n    lineWidth: 2,\n    transform: 'translate(120px, 0)',\n  },\n});\nconst star2 = new Polygon({\n  style: {\n    points: '50,0 21,90 98,35 2,35 79,90',\n    fill: '#C6E5FF',\n    fillRule: 'evenodd',\n    stroke: '#1890FF',\n    lineWidth: 2,\n    transform: 'translate(220px, 0)',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(star);\n  canvas.appendChild(star2);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"填充算法",en:"Fillrule"},filename:"fillrule.js",isNew:!1}],icon:"",id:"polygon",title:{en:"Polygon",zh:"多边形"},api:null,childrenKey:"demos",order:6},{demos:[{id:"path",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*p7WOQ4-tspIAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nfunction getCirclePath(cx, cy, rx, ry) {\n  return [\n    ['M', cx - rx, ry],\n    ['A', rx, ry, 0, 1, 0, cx + rx, ry],\n    ['A', rx, ry, 0, 1, 0, cx - rx, ry],\n    ['Z'],\n  ];\n}\n\nconst circlePath = new Path({\n  style: {\n    d: getCirclePath(200, 0, 100, 100),\n    lineWidth: 10,\n    stroke: '#54BECC',\n    fill: '#F04864',\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circlePath);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst circleFolder = gui.addFolder('circle');\nconst circleConfig = {\n  r: 100,\n  lineWidth: 1,\n  lineDash: 0,\n  lineDashOffset: 0,\n  shadowColor: '#fff',\n  shadowBlur: 0,\n  shadowOffsetX: 0,\n  shadowOffsetY: 0,\n  pointerEvents: 'auto',\n  visibility: 'visible',\n};\ncircleFolder.add(circleConfig, 'r', 0, 200).onChange((r) => {\n  circlePath.style.d = getCirclePath(200, 0, r, r);\n});\ncircleFolder.add(circleConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n  circlePath.style.lineWidth = lineWidth;\n});\ncircleFolder.add(circleConfig, 'lineDash', 0, 100).onChange((lineDash) => {\n  circlePath.style.lineDash = [lineDash];\n});\ncircleFolder\n  .add(circleConfig, 'lineDashOffset', 0, 100)\n  .onChange((lineDashOffset) => {\n    circlePath.style.lineDashOffset = lineDashOffset;\n  });\ncircleFolder.addColor(circleConfig, 'shadowColor').onChange((color) => {\n  circlePath.attr('shadowColor', color);\n});\ncircleFolder.add(circleConfig, 'shadowBlur', 0, 100).onChange((shadowBlur) => {\n  circlePath.style.shadowBlur = shadowBlur;\n});\ncircleFolder\n  .add(circleConfig, 'shadowOffsetX', -50, 50)\n  .onChange((shadowOffsetX) => {\n    circlePath.style.shadowOffsetX = shadowOffsetX;\n  });\ncircleFolder\n  .add(circleConfig, 'shadowOffsetY', -50, 50)\n  .onChange((shadowOffsetY) => {\n    circlePath.style.shadowOffsetY = shadowOffsetY;\n  });\ncircleFolder\n  .add(circleConfig, 'pointerEvents', [\n    'none',\n    'auto',\n    'stroke',\n    'fill',\n    'painted',\n    'visible',\n    'visiblestroke',\n    'visiblefill',\n    'visiblepainted',\n    'all',\n  ])\n  .onChange((pointerEvents) => {\n    circlePath.style.pointerEvents = pointerEvents;\n  });\ncircleFolder\n  .add(circleConfig, 'visibility', ['visible', 'hidden'])\n  .onChange((visibility) => {\n    circlePath.style.visibility = visibility;\n  });\ncircleFolder.open();\n",title:{zh:"路径样式",en:"Style of path"},filename:"path.js",isNew:!1},{id:"l-command",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*w8O1R5RGv9gAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst line = new Path({\n  style: {\n    d: [\n      ['M', 100, 100],\n      ['L', 200, 100],\n    ],\n    stroke: '#F04864',\n    lineDash: [10],\n  },\n});\n\nconst polyline = new Path({\n  style: {\n    d: [\n      ['M', 57.06339097770921, -18.541019662496844],\n      ['L', 13.225168176580645, -18.202882373436317],\n      ['L', 3.67394039744206e-15, -60],\n      ['L', -13.225168176580643, -18.202882373436317],\n      ['L', -57.06339097770921, -18.54101966249685],\n      ['L', -21.398771616640953, 6.952882373436324],\n      ['L', -35.267115137548394, 48.54101966249684],\n      ['L', -4.133182947122317e-15, 22.5],\n      ['L', 35.26711513754837, 48.54101966249685],\n      ['L', 21.398771616640953, 6.952882373436322],\n      ['Z'],\n    ],\n    stroke: '#1890FF',\n    lineWidth: 1,\n  },\n});\npolyline.translate(100, 250);\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(line);\n  canvas.appendChild(polyline);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"包含 L 命令",en:"Path with L commands"},filename:"l-command.js",isNew:!1},{id:"a-command",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*iwBNR5uP3J4AAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst path = new Path({\n  style: {\n    transform: 'translate(0, 100)',\n    lineWidth: 10,\n    lineJoin: 'round',\n    stroke: '#54BECC',\n    cursor: 'pointer',\n    d:\n      'M 100,300' +\n      'l 50,-25' +\n      'a25,25 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'a25,50 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'a25,75 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'a25,100 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'l 0, 200,' +\n      'z',\n  },\n});\n\nconst arrowMarker = new Path({\n  style: {\n    d: 'M 10,10 L -10,0 L 10,-10 Z',\n    stroke: '#1890FF',\n    transformOrigin: 'center',\n  },\n});\nconst arc = new Path({\n  style: {\n    d: 'M 100 100 A 90 90 0 0 1 100 300',\n    stroke: 'black',\n    markerStart: arrowMarker,\n    markerEnd: arrowMarker,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(path);\n  canvas.appendChild(arc);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst markerFolder = gui.addFolder('marker');\nconst markerConfig = {\n  markerStartOffset: 0,\n  markerEndOffset: 0,\n};\nmarkerFolder\n  .add(markerConfig, 'markerStartOffset', -20, 20)\n  .onChange((markerStartOffset) => {\n    arc.style.markerStartOffset = markerStartOffset;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerEndOffset', -20, 20)\n  .onChange((markerEndOffset) => {\n    arc.style.markerEndOffset = markerEndOffset;\n  });\nmarkerFolder.open();\n",title:{zh:"包含 A 命令",en:"Path with A commands"},filename:"a-command.js",isNew:!1},{id:"multi-segments",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*AO0jT40V6S0AAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst path = new Path({\n  style: {\n    d: 'M 0 395.708 L 0.308 394.171 L 0.616 391.627 L 0.924 390.84 L 1.847 390.928 L 2.463 391.168 L 2.771 390.498 L 3.079 390.49 L 3.387 390.192 L 4.311 387.925 L 4.619 387.094 L 4.926 385.768 L 4.926 385.433 L 5.234 384.413 L 6.158 383.961 L 6.466 385.302 L 6.774 385.433 L 7.082 383.902 L 7.39 383.48 L 8.313 382.051 L 8.621 380.915 L 8.929 381.388 L 9.237 382.992 L 9.545 380.856 L 10.777 380.324 L 11.084 377.103 L 11.392 375.34 L 12.008 377.373 L 12.932 375.238 L 13.24 374.261 L 13.548 373.554 L 13.856 373.241 L 14.163 372.935 L 14.779 376.068 L 15.087 375.93 L 15.395 378.029 L 15.703 377.118 L 16.011 375.842 L 16.935 372.497 L 17.243 373.54 L 17.55 375.077 L 17.858 373.365 L 18.166 374.02 L 19.09 374.501 L 19.398 376.462 L 19.706 374.829 L 20.014 375.799 L 20.322 374.72 L 21.553 375.289 L 21.861 370.982 L 22.477 366.915 L 22.785 367.243 L 23.708 368.679 L 23.708 367.207 L 24.016 367.177 L 24.324 365.953 L 24.632 363.286 L 25.556 363.016 L 25.864 362.426 L 26.172 363.002 L 26.48 361.632 L 26.787 358.899 L 27.711 358.935 L 28.019 365.356 L 28.327 363.628 L 28.635 357.259 L 28.943 358.826 L 29.866 360.589 L 30.174 367.637 L 30.79 365.275 L 31.098 364.19 L 31.406 367.571 L 32.33 365.093 L 32.638 365.254 L 32.946 365.997 L 33.253 371.55 L 33.253 372.563 L 34.177 370.53 L 34.485 373.27 L 34.793 376.28 L 35.101 378.357 L 35.409 374.706 L 36.332 374.589 L 36.64 370.69 L 36.948 367.09 L 37.256 368.139 L 37.564 365.057 L 38.488 367.279 L 38.796 371.237 L 39.104 365.946 L 39.411 364.364 L 39.719 362.739 L 41.259 358.6 L 41.567 363.993 L 41.875 365.268 L 42.183 367.629 L 42.798 364.029 L 43.106 364.918 L 43.414 363.927 L 43.722 363.672 L 44.03 362.499 L 44.954 362.79 L 45.262 360.961 L 45.569 361.07 L 45.877 361.406 L 46.185 358.607 L 47.109 355.597 L 47.417 352.027 L 47.725 352.325 L 48.033 351.065 L 48.341 351.815 L 49.572 349.724 L 49.88 348.186 L 50.188 348.572 L 50.496 349.797 L 50.804 346 L 51.728 341.292 L 52.035 341.328 L 52.035 342.108 L 52.343 345.431 L 52.651 341.773 L 53.575 341.97 L 53.883 340.075 L 54.191 337.765 L 54.499 337.218 L 54.807 339.463 L 55.73 336.591 L 56.038 327.992 L 56.346 328.16 L 56.654 330.455 L 56.962 329.056 L 57.886 328.772 L 58.193 327.38 L 58.501 325.23 L 59.117 327.059 L 59.425 326.746 L 60.349 327.978 L 60.657 323.889 L 60.965 327.89 L 61.272 335.783 L 61.58 343.143 L 62.196 351.604 L 62.504 339.798 L 62.812 342.604 L 63.12 343.923 L 63.428 342.4 L 64.351 344.178 L 64.659 340.607 L 64.967 340.891 L 65.583 338.647 L 66.507 337.918 L 66.815 336.264 L 67.123 332.321 L 67.431 329.355 L 67.738 330.863 L 68.97 333.312 L 69.278 332.62 L 69.586 328.473 L 69.894 325.23 L 70.202 322.06 L 70.817 322.126 L 71.125 326.258 L 71.433 324.567 L 71.741 323.86 L 72.049 324.909 L 72.973 329.275 L 73.281 330.31 L 73.589 330.208 L 73.896 327.227 L 74.204 322.344 L 75.128 318.781 L 75.744 318.671 L 76.052 318.948 L 76.36 318.03 L 77.283 319.305 M 105.918 354.687 L 106.226 356.173 L 106.534 353.171 L 106.842 352.099 L 107.766 350.052 L 108.074 352.274 L 108.381 353.295 L 108.381 351.028 L 108.689 356.428 L 109.613 355.962 L 109.921 355.525 L 110.229 351.648 L 110.537 351.072 L 110.845 346.299 L 111.768 341.11 L 112.076 346.911 L 112.384 344.95 L 112.692 340.541 L 113 339.966 L 113.924 338.136 L 114.232 336.089 L 114.54 336.89 L 115.155 332.481 L 115.463 331.796 L 116.387 329.034 L 116.695 327.628 L 117.003 330.594 L 117.311 328.794 L 117.619 329.967 L 118.234 326.535 L 118.542 325.223 L 118.85 327.919 L 119.158 325.39 L 119.466 326.928 L 120.39 329.858 L 120.698 328.182 L 121.005 333.8 L 121.313 334.631 L 121.621 331.629 L 122.853 327.795 L 123.161 327.373 L 123.469 327.606 L 123.777 326.105 L 125.008 328.036 L 125.316 328.568 L 125.624 328.699 L 125.932 325.609 L 126.24 328.371 L 127.163 331.308 L 127.163 328.371 L 127.471 331.891 L 127.779 337.393 L 128.087 338.042 L 129.011 334.784 L 129.319 331.439 L 129.627 333.392 L 129.935 331.825 L 130.243 335.928 L 131.166 337.466 L 131.474 337.4 L 131.782 334.383 L 132.09 341.037 L 132.398 339.703 L 133.322 341.634 L 133.937 336.358 L 134.245 341.095 L 134.553 339.681 L 135.785 336.008 L 136.093 332.809 L 136.401 336.672 L 136.401 334.937 L 136.708 337.889 L 137.632 336.941 L 137.94 340.031 L 138.248 337.721 L 138.556 338.45 L 138.864 343.303 L 139.787 342.473 L 140.095 345.584 L 140.403 342.494 L 140.711 347.763 L 141.019 345.511 L 141.943 351.137 L 142.251 349.184 L 142.559 347.144 L 142.866 347.822 L 143.482 349.49 L 144.406 351.99 L 144.714 346.59 L 145.022 344.003 L 145.33 344.455 L 145.638 340.097 L 146.253 337.174 L 146.561 334.864 L 146.869 332.991 L 147.177 332.977 L 147.485 335.586 L 148.409 335.841 L 148.717 337.196 L 149.025 335.513 L 149.332 336.642 L 149.64 334.821 L 150.564 337.911 L 150.872 337.116 L 151.18 336.366 L 151.488 337.043 L 151.796 340.111 L 153.335 342.545 L 153.643 341.984 L 153.951 346.167 L 154.259 346.925 L 155.183 348.572 L 155.49 353.12 L 155.49 353.171 L 155.798 352.413 L 156.106 355.117 L 157.03 361.369 L 157.338 361.719 L 157.646 370.501 L 157.954 365.939 L 158.262 360.968 L 159.185 368.154 L 159.493 371.222 L 159.801 369.859 L 160.109 367.513 L 160.417 370.202 L 161.341 386.949 L 161.649 380.827 L 162.264 384.136 L 162.572 390.709 L 162.88 392.917 L 163.804 392.137 L 164.112 398.682 L 164.42 398.223 L 164.728 398.988 L 164.728 393.114 L 165.651 383.305 L 165.959 387.809 L 166.267 392.276 L 166.575 389.405 L 166.883 392.677 L 167.807 391.919 L 168.114 396.984 L 168.422 393.063 L 168.73 392.072 L 169.038 393.42 L 169.962 396.546 L 170.27 390.848 L 170.578 387.466 L 170.886 382.736 L 171.193 385.251 L 172.425 385.71 L 172.733 382.773 L 173.041 388.377 L 173.349 391.438 L 173.657 392.065 L 174.272 393.784 L 174.58 394.593 L 174.888 397.982 L 175.196 393.376 L 175.504 397.895 L 176.428 399.425 L 176.736 398.135 L 177.044 400.773 L 177.351 405 L 177.659 403.477 L 178.583 395.92 L 178.891 397.487 L 179.199 394.426 L 179.507 394.426 L 179.815 396.124 L 181.046 398.849 L 181.354 396.269 L 181.662 393.77 L 181.97 397.042 L 182.278 395.154 L 183.202 390.986 L 183.51 390.738 L 183.51 392.086 L 183.817 394.426 L 184.125 392.043 L 185.049 394.608 L 185.357 394.112 L 185.665 398.682 L 185.973 398.485 L 186.281 398.07 L 187.204 401.174 L 187.512 400.708 L 187.82 401.684 L 188.128 401.684 L 188.436 401.123 L 189.36 400.54 L 189.668 400.773 L 189.975 401.458 M 218.302 384.449 L 218.61 381.519 L 218.918 379.129 L 219.842 377.336 L 220.15 379.851 L 220.458 378.889 L 220.766 376.52 L 220.766 376.52 L 221.689 376.046 L 221.997 377.438 L 222.305 377.927 L 222.613 375.15 L 222.921 373.714 L 223.845 375.842 L 224.153 374.924 L 224.46 375.106 L 224.768 372.271 L 225.076 373.365 L 226 372.76 L 226.308 373.365 L 226.616 372.461 L 226.924 371.958 L 227.54 370.931 L 228.463 367.411 L 228.771 366.944 L 229.079 367.097 L 229.387 369.604 L 229.695 369.509 L 230.311 369.233 L 230.619 372.986 L 230.926 376.578 L 231.234 374.057 L 231.542 374.443 L 232.466 371.361 L 232.774 370.778 L 233.082 371.929 L 233.39 373.161 L 233.698 374.385 L 234.929 368.351 L 235.237 366.696 L 235.545 365.224 L 235.853 364.685 L 237.084 362.105 L 237.392 362.003 L 237.7 360.939 L 238.008 358.906 L 238.316 358.228 L 239.24 358.826 L 239.548 359.649 L 239.548 361.449 L 239.856 361.668 L 240.163 363.84 L 241.087 364.481 L 241.395 364.292 L 241.703 364.853 L 242.011 364.634 L 242.319 362.011 L 243.243 363.548 L 243.55 365.997 L 243.858 364.386 L 244.166 361.734 L 244.474 359.853 L 245.398 360.196 L 245.706 359.861 L 246.322 359.569 L 246.629 361.617 L 246.937 361.617 L 247.861 362.645 L 248.169 364.984 L 248.477 363.658 L 248.785 364.284 L 248.785 362.71 L 249.708 359.926 L 250.016 359.977 L 250.324 356.618 L 250.632 356.151 L 250.94 353.069 L 251.864 352.223 L 252.172 353.244 L 252.48 349.432 L 252.787 348.645 L 253.095 347.064 L 254.019 346.984 L 254.327 347.056 L 254.635 347.035 L 254.943 345.023 L 255.251 344.586 L 256.482 342.371 L 256.79 343.012 L 257.098 343.332 L 257.406 344.207 L 257.714 343.041 L 258.33 343.617 L 258.946 343.187 L 259.253 340.92 L 259.561 342.115 L 260.485 347.355 L 260.793 344.141 L 261.101 343.704 L 261.409 342.443 L 261.717 340.337 L 262.64 340.454 L 262.948 340.206 L 263.256 341.656 L 263.564 340.17 L 263.872 339.732 L 264.796 341.073 L 265.411 343.194 L 265.719 343.281 L 266.027 342.283 L 266.335 339.543 L 267.567 337.634 L 267.875 338.938 L 267.875 337.903 L 268.183 338.195 L 269.106 337.058 L 269.414 336.008 L 269.722 331.119 L 270.03 329.165 L 270.338 328.823 L 271.262 329.552 L 271.569 329.216 L 271.877 328.473 L 272.185 329.697 L 272.493 330.754 L 273.417 327.999 L 273.725 328.561 L 274.033 328.582 L 274.649 331.855 L 274.956 328.91 L 275.88 328.094 L 276.188 325.186 L 276.496 325.012 L 276.804 325.726 L 277.112 324.851 L 277.728 324.603 L 278.035 325.179 L 278.343 324.254 L 278.651 324.786 L 278.959 326.615 L 279.883 325.296 L 280.191 318.81 L 280.499 314.321 L 280.807 314.117 L 281.114 315.035 L 282.038 316.099 L 282.346 319.823 L 282.654 323.445 L 282.962 320.566 L 283.27 326.287 L 284.501 325.697 L 284.809 326.105 L 285.117 324.603 L 285.425 322.257 L 285.733 322.031 L 286.657 316.842 L 286.657 315.734 L 286.965 315.538 L 287.272 316.456 L 287.58 314.663 L 288.504 313.074 L 288.812 312.805 L 289.12 313.563 L 289.428 317.534 L 289.736 317.964 L 290.659 313.621 L 290.967 314.67 L 291.275 314.853 L 291.583 314.853 L 291.891 317.476 L 292.815 317.972 L 293.431 320.114 L 293.738 320.654 L 294.046 320.471 L 294.354 322.774 L 295.278 325.959 L 295.586 325.288 L 295.894 319.509 L 295.894 320.508 L 296.202 321.79 L 297.125 320.107 L 297.433 322.155 L 297.741 321.528 L 298.049 323.838 L 298.357 321.237 L 299.281 319.196 L 299.589 317.644 L 299.896 316.376 L 300.204 311.318 L 300.512 311.318 L 301.436 309.445 L 301.744 311.274 L 302.052 309.423 L 302.36 310.087 M 330.687 291.693 L 330.995 291.693 L 331.918 289.856 L 332.226 289.091 L 332.534 288.319 L 332.842 288.792 L 333.15 287.451 L 333.766 287.087 L 334.074 286.985 L 334.381 284.609 L 334.689 282.255 L 334.997 283.363 L 335.921 283.603 L 336.229 285.411 L 336.537 274.749 L 336.845 269.466 L 337.153 266.288 L 338.076 267.257 L 338.384 272.694 L 338.692 273.015 L 339 267.884 L 339.308 273.386 L 340.54 269.553 L 340.847 275.143 L 341.155 277.11 L 341.463 284.201 L 341.771 291.773 L 342.387 278.56 L 342.695 276.717 L 343.003 272.658 L 343.311 275.376 L 343.619 278.684 L 344.542 278.393 L 344.85 279.748 L 345.158 282.678 L 345.466 290.388 L 345.774 287.065 L 346.698 283.829 L 347.005 284.952 L 347.313 285.761 L 347.621 279.027 L 347.929 276.454 L 348.853 276.454 L 349.469 273.576 L 349.777 271.302 L 350.084 271.907 L 350.392 277.125 L 351.316 280.783 L 351.624 281.956 L 351.932 286.424 L 351.932 281.097 L 352.24 278.91 L 353.163 278.349 L 353.471 274.407 L 353.779 268.897 L 354.087 265.53 L 354.395 263.927 L 355.319 266.769 L 355.627 264.087 L 355.935 266.186 L 356.243 267.622 L 356.55 269.298 L 357.474 268.132 L 357.782 276.972 L 358.09 280.353 L 358.706 282.576 L 359.014 283.698 L 359.937 283.698 L 360.245 282.467 L 360.553 275.157 L 360.861 275.573 L 361.169 274.458 L 361.785 276.163 L 362.093 280.156 L 362.401 279.479 L 362.708 280.412 L 363.016 281.541 L 363.94 284.689 L 364.248 280.091 L 364.556 278.378 L 364.864 274.895 L 365.172 274.224 L 366.095 274.705 L 366.403 271.207 L 366.711 273.481 L 367.019 275.558 L 367.327 276.185 L 368.559 272.832 L 368.866 272.774 L 369.174 272.009 L 369.482 272.942 L 369.79 274.115 L 370.714 272.905 L 370.714 274.611 L 371.022 281.33 L 371.33 280.164 L 371.638 282.124 L 372.561 283.188 L 372.869 280.033 L 373.177 279.231 L 373.485 281.556 L 373.793 281.731 L 374.717 284.529 L 375.025 288.807 L 375.332 286.65 L 375.64 288.552 L 375.948 287.575 L 376.872 286.934 L 377.18 286.497 L 377.796 281.228 L 378.104 279.887 L 378.411 275.077 L 379.335 275.077 L 379.643 275.777 L 379.951 272.053 L 380.259 271.943 L 380.259 271.696 L 381.183 269.05 L 381.49 268.307 L 381.798 266.733 L 382.106 262.105 L 382.414 262.98 L 383.338 257.252 L 383.646 256.858 L 383.954 253.958 L 384.262 253.105 L 384.569 250.627 L 385.493 251.473 L 385.801 254.606 L 386.109 254.235 L 386.417 256.873 L 387.033 257.769 L 387.956 260.597 L 388.264 253.09 L 388.572 252.908 L 388.88 252.886 L 389.188 249.352 L 389.804 248.412 L 390.112 246.094 L 390.42 244.928 L 390.728 243.347 L 391.035 234.288 L 391.959 231.913 L 392.267 238.114 L 392.575 237.356 L 392.883 238.093 L 393.191 239.586 L 394.114 238.588 L 394.422 239.164 L 394.73 239.324 L 395.038 241.212 L 395.346 244.316 L 396.578 241.984 L 396.886 238.209 L 397.193 235.702 L 397.501 231.716 L 397.809 232.547 L 398.733 231.461 L 399.041 233.312 L 399.041 231.891 L 399.349 232.889 L 399.657 239.178 L 400.58 239.9 L 400.888 243.872 L 401.196 244.666 L 401.504 238.887 L 401.812 240.126 L 402.736 235.294 L 403.044 238.668 L 403.351 234.245 L 403.967 234.099 L 404.891 232.736 L 405.199 236.905 L 405.815 233.079 L 406.123 231.803 L 406.431 232.321 L 407.354 230.346 L 407.662 231.76 L 407.97 229.719 L 408.278 230.63 L 408.278 230.047 L 409.202 229.238 L 409.51 230.244 L 409.817 230.193 L 410.125 229.544 L 410.433 230.011 L 411.357 228.845 L 411.665 227.394 L 411.973 226.695 L 412.281 227.832 L 413.512 227.045 L 413.82 226.469 L 414.128 226.6 L 414.436 227.788 L 414.744 228.59 M 443.071 212.557 L 443.995 215.013 L 444.302 216.689 L 444.61 217.308 L 444.918 217.279 L 445.226 219.48 L 445.842 222.585 L 446.15 221.419 L 446.458 218.7 L 446.766 221.404 L 447.074 225.019 L 447.997 221.819 L 448.305 217.44 L 448.613 214.124 L 448.921 208.082 L 450.153 206.399 L 450.46 208.286 L 450.768 208.483 L 451.076 210.961 L 451.384 208.498 L 452.616 211.303 L 452.924 209.904 L 453.232 208.906 L 453.54 210.961 L 453.847 211.026 L 454.771 210.341 L 454.771 208.993 L 455.079 210.611 L 455.387 211.092 L 455.695 215.516 L 456.619 220.763 L 456.926 218.693 L 457.234 215.975 L 457.542 215.494 L 457.85 219.363 L 458.774 219.961 L 459.082 221.572 L 459.39 218.227 L 459.698 219.524 L 460.005 217.767 L 461.237 210.174 L 461.853 211.865 L 462.161 211.435 L 462.469 213.373 L 463.392 217.308 L 463.7 221.681 L 464.008 221.535 L 464.316 222.082 L 464.316 226.155 L 465.24 225.645 L 465.548 221.389 L 465.856 225.536 L 466.163 226.695 L 466.471 230.266 L 467.395 233.866 L 467.703 226.593 L 468.011 228.553 L 468.319 222.271 L 468.627 225.828 L 469.55 221.681 L 469.858 219.334 L 470.166 220.223 L 470.474 219.036 L 471.09 213.504 L 472.322 209.008 L 472.629 207.31 L 472.937 203.345 L 473.245 201.516 L 473.861 205.677 L 474.169 205.86 L 474.477 202.748 L 474.785 202.93 L 475.093 197.719 L 476.016 191.248 L 476.324 189.025 L 476.632 181.701 L 476.94 181.417 L 477.248 177.037 L 478.172 173.248 L 478.48 169.669 L 478.787 177.555 L 479.095 178.116 L 479.403 179.092 L 480.635 174.523 L 480.943 180.236 L 481.251 177.569 L 481.559 188.646 L 481.866 191.379 L 482.79 206.253 L 483.098 191.095 L 483.098 198.616 L 483.406 191.321 L 483.714 188.923 L 484.638 184.245 L 484.946 186.38 L 485.253 186.409 L 485.561 196.896 L 485.869 204.198 L 486.793 203.899 L 487.101 191.394 L 487.409 189.514 L 487.717 191.306 L 488.025 184.121 L 488.948 179.464 L 489.256 179.449 L 489.564 183.21 L 490.18 185.979 L 490.488 191.066 L 491.719 186.919 L 492.027 183.866 L 492.335 183.713 L 492.643 188.566 L 493.259 186.773 L 493.567 183.363 L 493.875 179.952 L 494.183 177.285 L 494.49 171.79 L 495.414 163.679 L 495.722 162.353 L 496.03 163.307 L 496.338 170.828 L 496.646 169.021 L 497.569 169.844 L 497.877 172.694 L 498.185 174.334 L 498.493 179.027 L 498.801 185.768 L 500.033 190.665 L 500.341 192.195 L 500.649 188.005 L 500.956 188.646 L 501.264 194.163 L 501.88 180.309 L 502.188 171.943 L 502.496 170.559 L 502.804 166.011 L 503.112 156.122 L 504.035 157.587 L 504.343 155.947 L 504.651 173.16 L 504.959 175.572 L 505.267 177.351 L 506.191 167.95 L 506.499 173.78 L 506.807 171.717 L 507.114 168.737 L 507.422 168.547 L 508.346 168.671 L 508.962 174.698 L 509.27 174.042 L 509.578 169.917 L 509.886 171.98 L 510.809 172.351 L 511.117 167.614 L 511.425 175.594 L 511.425 182.926 L 511.733 183.363 L 512.657 187.269 L 512.965 180.295 L 513.272 183.253 L 513.58 188.617 L 513.888 190.417 L 514.812 194.739 L 515.12 189.273 L 515.428 196.211 L 516.044 198.703 L 516.967 189.557 L 517.275 191.685 L 517.583 185.126 L 518.199 180.951 L 518.507 179.661 L 519.431 177.249 L 519.738 178.75 L 520.046 180.105 L 520.354 178.961 L 520.662 176.804 L 521.278 178.101 L 521.586 180.309 L 521.894 186.591 L 522.202 187.502 L 522.51 185.986 L 523.433 185.119 L 523.741 175.106 L 524.049 174.749 L 524.357 173.211 L 524.665 169.655 L 525.896 167.396 L 526.204 170.231 L 526.512 168.423 L 526.82 168.511 M 556.071 12.826 L 556.379 5.036 L 556.687 8.687 L 556.995 1.858 L 558.226 0 L 558.226 5.677 L 558.534 7.309 L 558.842 9.809 L 559.15 22.591 L 560.074 40.883 L 560.381 19.334 L 560.689 20.325 L 560.997 35.556 L 561.305 46.094 L 562.229 47.027 L 562.537 55.349 L 562.845 19.115 L 563.153 20.791 L 563.46 24.217 L 564.384 38.078 L 565 39.426',\n    lineWidth: 1,\n    lineJoin: 'round',\n    stroke: '#54BECC',\n    cursor: 'pointer',\n  },\n});\n\nconst path2 = new Path({\n  style: {\n    d: 'M 100 100 L 200 100 L 200 200 z M 300 100 L 300 200 L 200 300 z',\n    // d: 'M 100 100 L 200 100  L 200 200 M 300 100 L 300 200 L 200 300',\n    fill: 'red',\n    // stroke: 'red',\n  },\n});\npath.addEventListener('mouseenter', () => {\n  path.style.stroke = 'red';\n});\npath.addEventListener('mouseleave', () => {\n  path.style.stroke = '#54BECC';\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(path);\n  canvas.appendChild(path2);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"路径定义中包含多段",en:"Multi segments in a path definition"},filename:"multi-segments.js",isNew:!1},{id:"group",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*EaDjS48jEY0AAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, Group, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst g = new Group({\n  style: {\n    transform: 'translate(200, 200) scale(0.5)',\n  },\n});\nconst p1 = new Path({\n  style: {\n    d: 'M1.2858791391047205e-14,-209.99999999999994A209.99999999999994,209.99999999999994,0,0,1,207.94618110413055,29.298221178223883L0,0Z',\n    fill: 'red',\n  },\n});\nconst p2 = new Path({\n  style: {\n    d: 'M207.94618110413066,29.298221178223898A210.00000000000006,210.00000000000006,0,0,1,137.74500635698746,158.512817222184L0,0Z',\n    fill: 'green',\n  },\n});\nconst p3 = new Path({\n  style: {\n    d: 'M137.7450063569874,158.51281722218394A209.99999999999997,209.99999999999997,0,0,1,-6.530971076665772,209.89841928131747L0,0Z',\n    fill: 'blue',\n  },\n});\nconst p4 = new Path({\n  style: {\n    d: 'M-6.530971076665824,209.8984192813175A210,210,0,0,1,-168.7343604741219,-125.01486149809983L0,0Z',\n    fill: 'yellow',\n  },\n});\nconst p5 = new Path({\n  style: {\n    d: 'M-168.7343604741219,-125.01486149809983A210,210,0,0,1,-3.377057564320937e-14,-210L0,0Z',\n    fill: 'black',\n  },\n});\ng.appendChild(p1);\ng.appendChild(p2);\ng.appendChild(p3);\ng.appendChild(p4);\ng.appendChild(p5);\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(g);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"使用 Group 组合多条路径",en:"Compose multiple paths with a group"},filename:"group.js",isNew:!1},{id:"marker",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*6jTFTrigNVkAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, Circle, Image, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst arrowMarker = new Path({\n  style: {\n    d: 'M 10,10 L -10,0 L 10,-10 Z',\n    stroke: '#1890FF',\n    transformOrigin: 'center',\n  },\n});\nconst circleMarker = new Circle({\n  style: {\n    r: 10,\n    stroke: '#1890FF',\n  },\n});\nconst imageMarker = new Image({\n  style: {\n    width: 50,\n    height: 50,\n    anchor: [0.5, 0.5],\n    transformOrigin: 'center',\n    transform: 'rotate(90deg)',\n    src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n  },\n});\n\nconst path = new Path({\n  style: {\n    lineWidth: 1,\n    stroke: '#54BECC',\n    d: 'M 0,40 C 5.5555555555555545,40,22.222222222222218,44.44444444444445,33.33333333333333,40 C 44.444444444444436,35.55555555555556,55.55555555555554,14.66666666666667,66.66666666666666,13.333333333333336 C 77.77777777777777,12.000000000000002,88.88888888888887,32,100,32 C 111.11111111111113,32,122.22222222222221,14.66666666666667,133.33333333333331,13.333333333333336 C 144.44444444444443,12.000000000000002,155.55555555555557,24,166.66666666666669,24 C 177.7777777777778,24,188.8888888888889,11.111111111111114,200,13.333333333333336 C 211.1111111111111,15.555555555555557,222.22222222222226,35.111111111111114,233.33333333333334,37.333333333333336 C 244.44444444444443,39.55555555555555,255.55555555555551,31.22222222222223,266.66666666666663,26.66666666666667 C 277.77777777777777,22.111111111111114,294.4444444444444,12.777777777777779,300,10',\n    markerStart: arrowMarker,\n    markerMid: circleMarker,\n    markerEnd: arrowMarker,\n  },\n});\npath.translate(100, 100);\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(path);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst markerFolder = gui.addFolder('marker');\nconst markerConfig = {\n  markerStart: 'path',\n  markerEnd: 'path',\n  markerMid: 'circle',\n  markerStartOffset: 0,\n  markerEndOffset: 0,\n};\nmarkerFolder\n  .add(markerConfig, 'markerStart', ['path', 'circle', 'image', 'null'])\n  .onChange((markerStartStr) => {\n    let markerStart;\n    if (markerStartStr === 'path') {\n      markerStart = arrowMarker.cloneNode();\n    } else if (markerStartStr === 'circle') {\n      markerStart = circleMarker.cloneNode();\n    } else if (markerStartStr === 'image') {\n      markerStart = imageMarker.cloneNode();\n    } else {\n      markerStart = null;\n    }\n\n    path.style.markerStart = markerStart;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerMid', ['path', 'circle', 'image', 'null'])\n  .onChange((markerMidStr) => {\n    let markerMid;\n    if (markerMidStr === 'path') {\n      markerMid = arrowMarker.cloneNode();\n    } else if (markerMidStr === 'circle') {\n      markerMid = circleMarker.cloneNode();\n    } else if (markerMidStr === 'image') {\n      markerMid = imageMarker.cloneNode();\n    } else {\n      markerMid = null;\n    }\n\n    path.style.markerMid = markerMid;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerEnd', ['path', 'circle', 'image', 'null'])\n  .onChange((markerEndStr) => {\n    let markerEnd;\n    if (markerEndStr === 'path') {\n      markerEnd = arrowMarker.cloneNode();\n    } else if (markerEndStr === 'circle') {\n      markerEnd = circleMarker.cloneNode();\n    } else if (markerEndStr === 'image') {\n      markerEnd = imageMarker.cloneNode();\n    } else {\n      markerEnd = null;\n    }\n\n    path.style.markerEnd = markerEnd;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerStartOffset', -20, 20)\n  .onChange((markerStartOffset) => {\n    path.style.markerStartOffset = markerStartOffset;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerEndOffset', -20, 20)\n  .onChange((markerEndOffset) => {\n    path.style.markerEndOffset = markerEndOffset;\n  });\nmarkerFolder.open();\n",title:{zh:"标记图形",en:"Marker"},filename:"marker.js",isNew:!1},{id:"get-point",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*tXOjRJUyDEMAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, Circle, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst path = new Path({\n  style: {\n    lineWidth: 1,\n    stroke: '#54BECC',\n    d: 'M 0,40 C 5.5555555555555545,40,22.222222222222218,44.44444444444445,33.33333333333333,40 C 44.444444444444436,35.55555555555556,55.55555555555554,14.66666666666667,66.66666666666666,13.333333333333336 C 77.77777777777777,12.000000000000002,88.88888888888887,32,100,32 C 111.11111111111113,32,122.22222222222221,14.66666666666667,133.33333333333331,13.333333333333336 C 144.44444444444443,12.000000000000002,155.55555555555557,24,166.66666666666669,24 C 177.7777777777778,24,188.8888888888889,11.111111111111114,200,13.333333333333336 C 211.1111111111111,15.555555555555557,222.22222222222226,35.111111111111114,233.33333333333334,37.333333333333336 C 244.44444444444443,39.55555555555555,255.55555555555551,31.22222222222223,266.66666666666663,26.66666666666667 C 277.77777777777777,22.111111111111114,294.4444444444444,12.777777777777779,300,10',\n    transform: 'translate(100, 100)',\n  },\n});\n\nconst pointInPath = new Circle({\n  style: {\n    r: 10,\n    fill: 'red',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(path);\n  canvas.appendChild(pointInPath);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst getPointFolder = gui.addFolder('getPoint');\nconst getPointConfig = {\n  ratio: 0,\n};\ngetPointFolder.add(getPointConfig, 'ratio', 0, 1).onChange((ratio) => {\n  let point = path.getPoint(ratio);\n  if (point) {\n    pointInPath.setPosition(point.x, point.y);\n  }\n});\n",title:{zh:"获取路径上的点",en:"Get point from path"},filename:"get-point.js",isNew:!1},{id:"picking",screenshot:"https://gw.alipayobjects.com/zos/raptor/1668060557459/Nov-10-2022%25252014-09-04.gif",source:"import { Canvas, CanvasEvent, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst path2 = new Path({\n  style: {\n    transform: 'translate(200, 100) scale(10)',\n    d: 'M2 4C0.8954304997175604 3.9999999991219815 -1.3527075029566811e-16 4.895430499717561 0 6C0 6 0 9.9375 0 12C1.3527075029566811e-16 13.10456950028244 0.8954304997175604 14.00000000087802 2 14C8 14 10.25 14 14 14C15.104569499040734 13.99999999912198 16 13.104569499040734 16 12C16 9 16 7.875 16 6C16 4.895430500959266 15.104569499040734 4.0000000008780185 14 4C13.414 4 13.194249999999998 4 12.828 4C12.297610373455704 3.9998867247945213 11.788985462367364 3.7890987493850155 11.414 3.414C11 3 10.84475 2.8447500000000003 10.586 2.5860000000000003C10.211014537632636 2.210901250614985 9.702389626544296 2.0001132752054787 9.172 2.0000000000000004C8 2.0000000000000004 7.560500000000001 2.0000000000000004 6.828000000000001 2.0000000000000004C6.297610373455706 2.0001132752054787 5.788985462367367 2.210901250614985 5.4140000000000015 2.5860000000000003C5.000000000000002 3 4.844750000000001 3.1552499999999997 4.586000000000001 3.414C4.211014537632636 3.7890987493850155 3.7023896265442966 3.9998867247945213 3.1720000000000015 4C2.5860000000000016 4 2.3662500000000017 4 2.0000000000000018 4C2.000000000000001 4 2.000000000000001 4 2 4M10.5 8.5C10.5 6.575499102701247 8.416666666666666 5.372686041889527 6.75 6.334936490538903C5.976497308103742 6.781518477924107 5.5 7.606836025229591 5.5 8.5C5.5 10.424500897298753 7.583333333333334 11.627313958110474 9.25 10.665063509461097C10.023502691896258 10.218481522075892 10.5 9.39316397477041 10.5 8.5C10.5 8.5 10.5 8.5 10.5 8.5M2.5 6C2.1150998205402494 6.000000000305956 1.874537208444147 5.583333333830511 2.0669872979090567 5.2500000003442C2.1563036954051213 5.095299461648009 2.321367204761929 4.999999999858005 2.5 5C2.8849001794597506 5.000000000305956 3.125462791688336 5.416666667163845 2.933012701693495 5.7500000003442C2.8436963042354777 5.904700538406512 2.6786327946700927 5.999999999858005 2.5 6C2.5 6 2.5 6 2.5 6M11.5 8.5C11.5 11.194301256218253 8.583333333333334 12.878239541354663 6.250000000000001 11.531088913245537C5.167096231345241 10.90587413090625 4.5 9.750429564678573 4.5 8.5C4.5 5.805698743781747 7.416666666666667 4.121760458645338 9.75 5.468911086754464C10.832903768654761 6.094125869093751 11.5 7.249570435321427 11.5 8.5C11.5 8.5 11.5 8.5 11.5 8.5',\n    lineWidth: 1,\n    lineJoin: 'round',\n    stroke: '#54BECC',\n    cursor: 'pointer',\n  },\n});\npath2.addEventListener('mouseenter', () => {\n  path2.style.stroke = 'red';\n});\npath2.addEventListener('mouseleave', () => {\n  path2.style.stroke = '#54BECC';\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(path2);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst pathFolder = gui.addFolder('path');\nconst pathConfig = {\n  increasedLineWidthForHitTesting: 0,\n  cursor: 'pointer',\n};\npathFolder\n  .add(pathConfig, 'increasedLineWidthForHitTesting', 0, 200)\n  .onChange((increasedLineWidthForHitTesting) => {\n    path2.style.increasedLineWidthForHitTesting =\n      increasedLineWidthForHitTesting;\n  });\npathFolder\n  .add(pathConfig, 'cursor', [\n    'default',\n    'pointer',\n    'help',\n    'progress',\n    'text',\n    'move',\n  ])\n  .onChange((cursor) => {\n    path2.style.cursor = cursor;\n  });\n",title:{zh:"拾取区域配置",en:"Picking"},filename:"picking.js",isNew:!1}],icon:"",id:"path",title:{en:"Path",zh:"路径"},api:null,childrenKey:"demos",order:7},{demos:[{id:"text",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*FdtgQLndl8IAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Rect, Text, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a line of text\nconst text = new Text({\n  style: {\n    x: 100,\n    y: 300,\n    fontFamily: 'PingFang SC',\n    text: '这是测试文本This is text',\n    fontSize: 60,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 5,\n  },\n});\n\n// display anchor\nconst origin = new Circle({\n  style: {\n    r: 20,\n    fill: 'red',\n  },\n});\norigin.setPosition(text.getPosition());\n\n// display bounds\nconst bounds = new Rect({\n  style: {\n    stroke: 'black',\n    lineWidth: 2,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(bounds);\n  canvas.appendChild(text);\n  canvas.appendChild(origin);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  const bounding = text.getBounds();\n  if (bounding) {\n    const { center, halfExtents } = bounding;\n    bounds.attr('width', halfExtents[0] * 2);\n    bounds.attr('height', halfExtents[1] * 2);\n    bounds.setPosition(center[0] - halfExtents[0], center[1] - halfExtents[1]);\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst fontFolder = gui.addFolder('font');\nconst fontConfig = {\n  text: '这是测试文本This is text',\n  fontFamily: 'PingFang SC',\n  fontSize: 60,\n  fontStyle: 'normal',\n  fontWeight: 'normal',\n  fontVariant: 'normal',\n  textTransform: 'none',\n};\nfontFolder.add(fontConfig, 'text').onFinishChange((content) => {\n  text.attr('text', content);\n});\nfontFolder\n  .add(fontConfig, 'fontFamily', [\n    'PingFang SC',\n    'fantasy',\n    'Arial',\n    'Times',\n    'Microsoft YaHei',\n  ])\n  .onChange((fontFamily) => {\n    text.attr('fontFamily', fontFamily);\n  });\nfontFolder.add(fontConfig, 'fontSize', 10, 100).onChange((fontSize) => {\n  text.attr('fontSize', fontSize);\n});\nfontFolder\n  .add(fontConfig, 'fontStyle', ['normal', 'italic', 'oblique'])\n  .onChange((fontStyle) => {\n    text.attr('fontStyle', fontStyle);\n  });\nfontFolder\n  .add(fontConfig, 'fontWeight', [\n    'normal',\n    'bold',\n    'bolder',\n    'lighter',\n    '100',\n    '200',\n    '400',\n  ])\n  .onChange((fontWeight) => {\n    text.attr('fontWeight', fontWeight);\n  });\nfontFolder\n  .add(fontConfig, 'fontVariant', ['normal', 'small-caps'])\n  .onChange((fontVariant) => {\n    text.attr('fontVariant', fontVariant);\n  });\nfontFolder\n  .add(fontConfig, 'textTransform', [\n    'capitalize',\n    'uppercase',\n    'lowercase',\n    'none',\n  ])\n  .onChange((transform) => {\n    text.attr('textTransform', transform);\n  });\n\nconst fillStrokeFolder = gui.addFolder('fill & stroke');\nconst fillStrokeConfig = {\n  fill: '#1890FF',\n  fillOpacity: 1,\n  stroke: '#F04864',\n  strokeOpacity: 1,\n  lineWidth: 5,\n  lineJoin: 'miter',\n  visible: true,\n  textDecorationLine: 'none',\n  textDecorationColor: 'none',\n  textDecorationStyle: 'solid',\n  textDecorationThickness: 1,\n};\nfillStrokeFolder.addColor(fillStrokeConfig, 'fill').onChange((color) => {\n  text.attr('fill', color);\n});\nfillStrokeFolder\n  .add(fillStrokeConfig, 'fillOpacity', 0, 1)\n  .onChange((fillOpacity) => {\n    text.attr('fillOpacity', fillOpacity);\n  });\nfillStrokeFolder.addColor(fillStrokeConfig, 'stroke').onChange((color) => {\n  text.attr('stroke', color);\n});\nfillStrokeFolder\n  .add(fillStrokeConfig, 'lineWidth', 0, 10)\n  .onChange((lineWidth) => {\n    text.attr('lineWidth', lineWidth);\n  });\nfillStrokeFolder\n  .add(fillStrokeConfig, 'lineJoin', ['miter', 'round', 'bevel'])\n  .onChange((lineJoin) => {\n    text.attr('lineJoin', lineJoin);\n  });\nfillStrokeFolder\n  .add(fillStrokeConfig, 'strokeOpacity', 0, 1)\n  .onChange((strokeOpacity) => {\n    text.attr('strokeOpacity', strokeOpacity);\n  });\nfillStrokeFolder.add(fillStrokeConfig, 'visible').onChange((visible) => {\n  if (visible) {\n    text.style.visibility = 'visible';\n    // text.show();\n  } else {\n    text.style.visibility = 'hidden';\n    // text.hide();\n  }\n});\nfillStrokeFolder\n  .add(fillStrokeConfig, 'textDecorationLine', [\n    'none',\n    'underline',\n    'overline',\n    'line-through',\n    'underline overline',\n  ])\n  .onChange((textDecorationLine) => {\n    text.attr('textDecorationLine', textDecorationLine);\n  });\nfillStrokeFolder\n  .add(fillStrokeConfig, 'textDecorationStyle', [\n    'solid',\n    'double',\n    'dotted',\n    'dashed',\n    'wavy',\n  ])\n  .onChange((textDecorationStyle) => {\n    text.attr('textDecorationStyle', textDecorationStyle);\n  });\nfillStrokeFolder\n  .add(fillStrokeConfig, 'textDecorationThickness', 1, 10)\n  .onChange((textDecorationThickness) => {\n    text.attr('textDecorationThickness', textDecorationThickness);\n  });\nfillStrokeFolder\n  .addColor(fillStrokeConfig, 'textDecorationColor')\n  .onChange((color) => {\n    text.attr('textDecorationColor', color);\n  });\n\nconst layoutFolder = gui.addFolder('layout');\nconst layoutConfig = {\n  letterSpacing: 0,\n  textBaseline: 'alphabetic',\n  textPath: 'null',\n  textPathSide: 'left',\n  textPathStartOffset: 0,\n};\nlayoutFolder\n  .add(layoutConfig, 'letterSpacing', 0, 10)\n  .onChange((letterSpacing) => {\n    text.attr('letterSpacing', letterSpacing);\n  });\nlayoutFolder\n  .add(layoutConfig, 'textBaseline', [\n    'alphabetic',\n    'bottom',\n    'middle',\n    'top',\n    'hanging',\n    'ideographic',\n  ])\n  .onChange((textBaseline) => {\n    text.attr('textBaseline', textBaseline);\n  });\nlayoutFolder\n  .add(layoutConfig, 'textPath', ['null', 'path'])\n  .onChange((textPath) => {\n    if (textPath === 'null') {\n      text.attr('textPath', null);\n    } else if (textPath === 'path') {\n      const path = new Path({\n        style: {\n          d: 'M10,90 Q90,90 90,45 Q90,10 50,10 Q10,10 10,40 Q10,70 45,70 Q70,70 75,50',\n        },\n      });\n      text.attr('textPath', path);\n    }\n  });\nlayoutFolder\n  .add(layoutConfig, 'textPathSide', ['left', 'right'])\n  .onChange((textPathSide) => {\n    text.attr('textPathSide', textPathSide);\n  });\nlayoutFolder\n  .add(layoutConfig, 'textPathStartOffset', 0, 100)\n  .onChange((textPathStartOffset) => {\n    text.attr('textPathStartOffset', textPathStartOffset);\n  });\n\nconst transformFolder = gui.addFolder('transform');\nconst transformConfig = {\n  localPositionX: 0,\n  localPositionY: 0,\n  localScale: 1,\n  localEulerAngles: 0,\n  transformOrigin: 'left top',\n  dx: 0,\n  dy: 0,\n};\ntransformFolder\n  .add(transformConfig, 'transformOrigin', [\n    'left top',\n    'center',\n    'right bottom',\n    '50% 50%',\n    '50px 50px',\n  ])\n  .onChange((transformOrigin) => {\n    text.style.transformOrigin = transformOrigin;\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionX', 0, 600)\n  .onChange((localPositionX) => {\n    const [lx, ly] = text.getLocalPosition();\n    text.setLocalPosition(localPositionX, ly);\n  });\ntransformFolder\n  .add(transformConfig, 'localPositionY', 0, 500)\n  .onChange((localPositionY) => {\n    const [lx, ly] = text.getLocalPosition();\n    text.setLocalPosition(lx, localPositionY);\n  });\ntransformFolder\n  .add(transformConfig, 'localScale', 0.2, 5)\n  .onChange((localScale) => {\n    text.setLocalScale(localScale);\n  });\ntransformFolder\n  .add(transformConfig, 'localEulerAngles', 0, 360)\n  .onChange((localEulerAngles) => {\n    text.setLocalEulerAngles(localEulerAngles);\n  });\ntransformFolder.add(transformConfig, 'dx', -100, 100).onChange((dx) => {\n  text.style.dx = dx;\n});\ntransformFolder.add(transformConfig, 'dy', -100, 100).onChange((dy) => {\n  text.style.dy = dy;\n});\ntransformFolder.open();\n",title:{zh:"文本",en:"Text"},filename:"text.js",isNew:!1},{id:"text-overflow",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*qQawT5L1jGEAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a line of text\nconst text = new Text({\n  style: {\n    x: 100,\n    y: 300,\n    fontFamily: 'PingFang SC',\n    text: '这是测试文本\\nThis is text',\n    fontSize: 60,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 5,\n    wordWrap: true,\n    wordWrapWidth: 280,\n    maxLines: 2,\n    textOverflow: 'ellipsis',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(text);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst multilineFolder = gui.addFolder('multiline');\nconst multilineConfig = {\n  wordWrap: true,\n  wordWrapWidth: 280,\n  maxLines: 2,\n  textOverflow: 'ellipsis',\n  lineHeight: 0,\n  leading: 0,\n  textAlign: 'start',\n};\nmultilineFolder.add(multilineConfig, 'wordWrap').onChange((wordWrap) => {\n  text.attr('wordWrap', wordWrap);\n});\n\nmultilineFolder\n  .add(multilineConfig, 'wordWrapWidth', 0, 500)\n  .onChange((wordWrapWidth) => {\n    text.attr('wordWrapWidth', wordWrapWidth);\n  });\nmultilineFolder\n  .add(multilineConfig, 'maxLines', 1, 10, 1)\n  .onChange((maxLines) => {\n    text.attr('maxLines', maxLines);\n  });\nmultilineFolder\n  .add(multilineConfig, 'textOverflow')\n  .onChange((textOverflow) => {\n    text.attr('textOverflow', textOverflow);\n  });\nmultilineFolder\n  .add(multilineConfig, 'lineHeight', 0, 100)\n  .onChange((lineHeight) => {\n    text.attr('lineHeight', lineHeight);\n  });\nmultilineFolder.add(multilineConfig, 'leading', 0, 30).onChange((leading) => {\n  text.attr('leading', leading);\n});\nmultilineFolder\n  .add(multilineConfig, 'textAlign', [\n    'start',\n    'end',\n    'center',\n    'left',\n    'right',\n  ])\n  .onChange((textAlign) => {\n    text.attr('textAlign', textAlign);\n  });\n",title:{zh:"文本溢出",en:"Text Overflow"},filename:"text-overflow.js",isNew:!1},{id:"text-baseline",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*VAQWQbMdQkQAAAAAAAAAAAAADmJ7AQ/original",source:"import { runtime, Canvas, CanvasEvent, Rect, Text, Line, HTML } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nruntime.enableCSSParsing = false;\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a line of text\nconst text1 = new Text({\n  style: {\n    x: 10,\n    y: 300,\n    fontFamily: 'PingFang SC',\n    text: 'gah国',\n    textBaseline: 'alphabetic',\n    fontSize: 24,\n    fill: '#1890FF',\n    // stroke: '#F04864',\n    // lineWidth: 5,\n  },\n});\nconst html1 = new HTML({\n  style: {\n    x: 10,\n    y: 200,\n    width: 100,\n    height: 30,\n    innerHTML: 'alphabetic',\n  },\n});\n\nconst text2 = text1.cloneNode();\ntext2.style.x = 110;\ntext2.style.textBaseline = 'top';\nconst html2 = new HTML({\n  style: {\n    x: 110,\n    y: 200,\n    width: 100,\n    height: 30,\n    innerHTML: 'top',\n  },\n});\n\nconst text3 = text1.cloneNode();\ntext3.style.x = 210;\ntext3.style.textBaseline = 'middle';\nconst html3 = new HTML({\n  style: {\n    x: 210,\n    y: 200,\n    width: 100,\n    height: 30,\n    innerHTML: 'middle',\n  },\n});\n\nconst text4 = text1.cloneNode();\ntext4.style.x = 310;\ntext4.style.textBaseline = 'bottom';\nconst html4 = new HTML({\n  style: {\n    x: 310,\n    y: 200,\n    width: 100,\n    height: 30,\n    innerHTML: 'bottom',\n  },\n});\n\n// baseline\nconst line = new Line({\n  style: {\n    x1: 0,\n    y1: 300,\n    x2: 600,\n    y2: 300,\n    stroke: 'black',\n    strokeWidth: 2,\n  },\n});\n\n// display bounds\nconst bounds1 = new Rect({\n  style: {\n    stroke: 'black',\n    lineWidth: 2,\n  },\n});\nconst bounds2 = new Rect({\n  style: {\n    stroke: 'black',\n    lineWidth: 2,\n  },\n});\nconst bounds3 = new Rect({\n  style: {\n    stroke: 'black',\n    lineWidth: 2,\n  },\n});\nconst bounds4 = new Rect({\n  style: {\n    stroke: 'black',\n    lineWidth: 2,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(bounds1);\n  canvas.appendChild(text1);\n  canvas.appendChild(html1);\n\n  canvas.appendChild(bounds2);\n  canvas.appendChild(text2);\n  canvas.appendChild(html2);\n\n  canvas.appendChild(bounds3);\n  canvas.appendChild(text3);\n  canvas.appendChild(html3);\n\n  canvas.appendChild(bounds4);\n  canvas.appendChild(text4);\n  canvas.appendChild(html4);\n\n  canvas.appendChild(line);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  const bounding1 = text1.getBounds();\n  if (bounding1) {\n    const { center, halfExtents } = bounding1;\n    bounds1.attr('width', halfExtents[0] * 2);\n    bounds1.attr('height', halfExtents[1] * 2);\n    bounds1.setPosition(center[0] - halfExtents[0], center[1] - halfExtents[1]);\n  }\n\n  const bounding2 = text2.getBounds();\n  if (bounding2) {\n    const { center, halfExtents } = bounding2;\n    bounds2.attr('width', halfExtents[0] * 2);\n    bounds2.attr('height', halfExtents[1] * 2);\n    bounds2.setPosition(center[0] - halfExtents[0], center[1] - halfExtents[1]);\n  }\n  const bounding3 = text3.getBounds();\n  if (bounding3) {\n    const { center, halfExtents } = bounding3;\n    bounds3.attr('width', halfExtents[0] * 2);\n    bounds3.attr('height', halfExtents[1] * 2);\n    bounds3.setPosition(center[0] - halfExtents[0], center[1] - halfExtents[1]);\n  }\n  const bounding4 = text4.getBounds();\n  if (bounding4) {\n    const { center, halfExtents } = bounding4;\n    bounds4.attr('width', halfExtents[0] * 2);\n    bounds4.attr('height', halfExtents[1] * 2);\n    bounds4.setPosition(center[0] - halfExtents[0], center[1] - halfExtents[1]);\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst textFolder = gui.addFolder('text');\nconst textConfig = {\n  fontSize: 24,\n};\ntextFolder.add(textConfig, 'fontSize', 10, 100).onChange((fontSize) => {\n  [text1, text2, text3, text4].forEach((text) => {\n    text.attr('fontSize', fontSize);\n  });\n});\n",title:{zh:"文本基线",en:"Text Baseline"},filename:"text-baseline.js",isNew:!1},{id:"text-billboard",source:"import { runtime, Canvas, CanvasEvent, Rect, Text, Line, HTML } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nruntime.enableCSSParsing = false;\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\nwebglRenderer.registerPlugin(new Plugin());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\n// create a line of text\nconst text1 = new Text({\n  style: {\n    x: 10,\n    y: 300,\n    fontFamily: 'PingFang SC',\n    text: 'gah',\n    textBaseline: 'alphabetic',\n    fontSize: 50,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 5,\n    isBillboard: true,\n  },\n});\n// const html1 = new HTML({\n//   style: {\n//     x: 10,\n//     y: 200,\n//     width: 100,\n//     height: 30,\n//     innerHTML: 'alphabetic',\n//   },\n// });\n\nconst text2 = text1.cloneNode();\ntext2.style.x = 110;\ntext2.style.textBaseline = 'top';\n// const html2 = new HTML({\n//   style: {\n//     x: 110,\n//     y: 200,\n//     width: 100,\n//     height: 30,\n//     innerHTML: 'top',\n//   },\n// });\n\nconst text3 = text1.cloneNode();\ntext3.style.x = 210;\ntext3.style.textBaseline = 'middle';\n// const html3 = new HTML({\n//   style: {\n//     x: 210,\n//     y: 200,\n//     width: 100,\n//     height: 30,\n//     innerHTML: 'middle',\n//   },\n// });\n\nconst text4 = text1.cloneNode();\ntext4.style.x = 310;\ntext4.style.textBaseline = 'bottom';\n// const html4 = new HTML({\n//   style: {\n//     x: 310,\n//     y: 200,\n//     width: 100,\n//     height: 30,\n//     innerHTML: 'bottom',\n//   },\n// });\n\n// baseline\nconst line = new Line({\n  style: {\n    x1: 0,\n    y1: 300,\n    z1: 0,\n    x2: 600,\n    y2: 300,\n    z2: 0,\n    stroke: 'black',\n    strokeWidth: 2,\n    isBillboard: true,\n  },\n});\n\n// display bounds\nconst bounds1 = new Rect({\n  style: {\n    stroke: 'black',\n    lineWidth: 2,\n    isBillboard: true,\n  },\n});\nconst bounds2 = new Rect({\n  style: {\n    stroke: 'black',\n    lineWidth: 2,\n    isBillboard: true,\n  },\n});\nconst bounds3 = new Rect({\n  style: {\n    stroke: 'black',\n    lineWidth: 2,\n    isBillboard: true,\n  },\n});\nconst bounds4 = new Rect({\n  style: {\n    stroke: 'black',\n    lineWidth: 2,\n    isBillboard: true,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(text1);\n  canvas.appendChild(bounds1);\n  // canvas.appendChild(html1);\n\n  canvas.appendChild(text2);\n  canvas.appendChild(bounds2);\n  // canvas.appendChild(html2);\n\n  canvas.appendChild(text3);\n  canvas.appendChild(bounds3);\n  // canvas.appendChild(html3);\n\n  canvas.appendChild(text4);\n  canvas.appendChild(bounds4);\n  // canvas.appendChild(html4);\n\n  canvas.appendChild(line);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  const bounding1 = text1.getBounds();\n  if (bounding1) {\n    const { center, halfExtents } = bounding1;\n    bounds1.attr('width', halfExtents[0] * 2);\n    bounds1.attr('height', halfExtents[1] * 2);\n    bounds1.setPosition(\n      center[0] - halfExtents[0],\n      center[1] - halfExtents[1],\n      0,\n    );\n  }\n\n  const bounding2 = text2.getBounds();\n  if (bounding2) {\n    const { center, halfExtents } = bounding2;\n    bounds2.attr('width', halfExtents[0] * 2);\n    bounds2.attr('height', halfExtents[1] * 2);\n    bounds2.setPosition(\n      center[0] - halfExtents[0],\n      center[1] - halfExtents[1],\n      0,\n    );\n  }\n  const bounding3 = text3.getBounds();\n  if (bounding3) {\n    const { center, halfExtents } = bounding3;\n    bounds3.attr('width', halfExtents[0] * 2);\n    bounds3.attr('height', halfExtents[1] * 2);\n    bounds3.setPosition(\n      center[0] - halfExtents[0],\n      center[1] - halfExtents[1],\n      0,\n    );\n  }\n  const bounding4 = text4.getBounds();\n  if (bounding4) {\n    const { center, halfExtents } = bounding4;\n    bounds4.attr('width', halfExtents[0] * 2);\n    bounds4.attr('height', halfExtents[1] * 2);\n    bounds4.setPosition(\n      center[0] - halfExtents[0],\n      center[1] - halfExtents[1],\n      0,\n    );\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"文本公告牌效果",en:"Text Billboard"},filename:"text-billboard.js",isNew:!1},{id:"web-font-loader",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*V2CyT5XfZ3AAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport WebFont from 'webfontloader';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  WebFont.load({\n    google: {\n      families: ['Gaegu'],\n    },\n    active: () => {\n      const text = new Text({\n        style: {\n          x: 100,\n          y: 100,\n          fontFamily: 'Gaegu',\n          text: 'Almost before we knew it, we had left the ground.',\n          textOverflow: 'ellipsis',\n          fontSize: 30,\n          fill: '#1890FF',\n          stroke: '#F04864',\n          lineWidth: 5,\n        },\n      });\n      canvas.appendChild(text);\n    },\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"加载字体",en:"Use Web Font Loader"},filename:"web-font-loader.js",isNew:!1},{id:"d3-word-cloud",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*3WR1RZMQrAQAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Text, Group, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport cloud from 'd3-cloud';\n\nconst words = [\n  'Hello',\n  'world',\n  'normally',\n  'you',\n  'want',\n  'more',\n  'words',\n  'than',\n  'this',\n].map(function (d) {\n  return { text: d, size: 50 };\n});\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const layout = cloud()\n    .size([600, 500])\n    .words(words)\n    .padding(5)\n    .rotate(() => Math.floor(Math.random() * 2) * 90)\n    .font('Impact')\n    .fontSize((d) => d.size)\n    .on('end', draw);\n  layout.start();\n\n  function draw(words) {\n    const wrapper = new Group({\n      style: {\n        transform: `translate(${layout.size()[0] / 2}, ${\n          layout.size()[1] / 2\n        })`,\n      },\n    });\n    canvas.appendChild(wrapper);\n    words.forEach((d) => {\n      const text = new Text({\n        style: {\n          x: d.x,\n          y: d.y,\n          fontFamily: 'Verdana',\n          text: d.text,\n          fontSize: d.size,\n          textAlign: 'center',\n          fill: '#1890FF',\n          // stroke: '#F04864',\n          // lineWidth: 5,\n          transform: `rotate(${d.rotate}deg)`,\n        },\n      });\n      wrapper.appendChild(text);\n\n      let circle;\n      text.addEventListener('mouseenter', () => {\n        text.style.fill = '#F04864';\n\n        // circle = new Circle({\n        //   style: {\n        //     cx: 100,\n        //     cy: 100,\n        //     r: 30,\n        //     fill: 'red',\n        //     zIndex: -1,\n        //   },\n        // });\n        // canvas.appendChild(circle);\n      });\n      text.addEventListener('mouseleave', () => {\n        text.style.fill = '#1890FF';\n        // text.style.fontSize = d.size;\n        // text.style.stroke = 'none';\n        // text.style.lineWidth = 0;\n\n        if (circle) {\n          canvas.removeChild(circle);\n          circle = undefined;\n        }\n      });\n    });\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"D3 词云",en:"D3 Word Cloud"},filename:"d3-word-cloud.js",isNew:!1},{id:"text-single-canvas",source:"import {\n  Canvas,\n  CanvasEvent,\n  Circle,\n  Rect,\n  Text,\n  Path,\n  runtime,\n} from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\n\nconst $canvas = document.createElement('canvas');\nconst dpr = window.devicePixelRatio;\n$canvas.width = dpr * 600;\n$canvas.height = dpr * 500;\n$canvas.style.width = '600px';\n$canvas.style.height = '500px';\ndocument.getElementById('container').appendChild($canvas);\n\n// create a canvas\nconst canvas = new Canvas({\n  canvas: $canvas,\n  renderer: canvasRenderer,\n  offscreenCanvas: $canvas,\n});\n\nruntime.offscreenCanvas = $canvas;\n\n// create a line of text\nconst text = new Text({\n  style: {\n    x: 100,\n    y: 300,\n    fontFamily: 'PingFang SC',\n    text: '这是测试文本This is text',\n    fontSize: 60,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 5,\n  },\n});\n\nconsole.log(text.getBounds());\n\n// display anchor\nconst origin = new Circle({\n  style: {\n    r: 20,\n    fill: 'red',\n  },\n});\norigin.setPosition(text.getPosition());\n\n// display bounds\nconst bounds = new Rect({\n  style: {\n    stroke: 'black',\n    lineWidth: 2,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(bounds);\n  canvas.appendChild(text);\n  canvas.appendChild(origin);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  const bounding = text.getBounds();\n  if (bounding) {\n    const { center, halfExtents } = bounding;\n    bounds.attr('width', halfExtents[0] * 2);\n    bounds.attr('height', halfExtents[1] * 2);\n    bounds.setPosition(center[0] - halfExtents[0], center[1] - halfExtents[1]);\n  }\n});\n",title:{zh:"关闭精确度量",en:"Text Baseline"},filename:"text-single-canvas.js",isNew:!1}],icon:"",id:"text",title:{en:"Text",zh:"文本"},api:null,childrenKey:"demos",order:8},{demos:[{id:"html",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*qGIRSaeHsTQAAAAAAAAAAAAAARQnAQ",source:"import {\n  Canvas,\n  CanvasEvent,\n  CustomElement,\n  HTML,\n  Line,\n  Rect,\n  Text,\n} from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a line\nconst line = new Line({\n  style: {\n    x1: 200,\n    y1: 100,\n    x2: 400,\n    y2: 100,\n    stroke: '#1890FF',\n    lineWidth: 2,\n  },\n});\nconst p1 = new HTML({\n  id: 'p1',\n  name: 'p1-name',\n  className: 'p1-classname',\n  style: {\n    x: 200,\n    y: 100,\n    width: 60,\n    height: 30,\n    innerHTML: 'p1',\n  },\n});\nconst p2 = new HTML({\n  id: 'p2',\n  name: 'p2-name',\n  className: 'p2-classname',\n  style: {\n    x: 400,\n    y: 100,\n    width: 60,\n    height: 30,\n    innerHTML: 'p2',\n  },\n});\n\nconst rect = new Rect({\n  name: 'test-name',\n  style: {\n    x: 200,\n    y: 200,\n    width: 300,\n    height: 100,\n    fill: '#1890FF',\n  },\n});\nconst text = new Text({\n  style: {\n    x: 350,\n    y: 250,\n    text: 'Hover me!',\n    fontSize: 22,\n    fill: '#000',\n    textAlign: 'center',\n    textBaseline: 'middle',\n  },\n});\nrect.appendChild(text);\nconst tooltip = new HTML({\n  style: {\n    x: 0,\n    y: 0,\n    innerHTML: 'Tooltip',\n    fill: 'white',\n    stroke: 'black',\n    lineWidth: 6,\n    width: 100,\n    height: 30,\n    pointerEvents: 'none',\n    visibility: 'hidden',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(line);\n  canvas.appendChild(p1);\n  canvas.appendChild(p2);\n  canvas.appendChild(rect);\n  canvas.appendChild(tooltip);\n});\n\nrect.addEventListener('mousemove', (e) => {\n  tooltip.setPosition(e.x, e.y);\n  tooltip.style.visibility = 'visible';\n\n  console.log('move', e.target);\n});\nrect.addEventListener('mouseleave', (e) => {\n  tooltip.setPosition(0, 0);\n  tooltip.style.visibility = 'hidden';\n\n  console.log('leave', e.target);\n});\n\nclass Custom extends CustomElement {\n  constructor(config) {\n    super({\n      ...config,\n      type: 'custom',\n    });\n\n    const tooltip = new HTML({\n      style: {\n        x: 0,\n        y: 0,\n        innerHTML: 'Tooltip',\n        fill: 'white',\n        stroke: 'black',\n        lineWidth: 6,\n        width: 100,\n        height: 30,\n      },\n    });\n    this.appendChild(tooltip);\n    this.appendChild(\n      new Rect({\n        style: { width: 100, height: 100, x: 0, y: 40, fill: 'red' },\n      }),\n    );\n  }\n\n  connectedCallback() {}\n}\nconst customEl = new Custom({\n  style: {\n    transform: 'translate(200, 330)',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(customEl);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst lineFolder = gui.addFolder('line');\nconst lineConfig = {\n  stroke: '#1890FF',\n  lineWidth: 2,\n  strokeOpacity: 1,\n  x1: 200,\n  y1: 100,\n  x2: 400,\n  y2: 100,\n};\nlineFolder.add(lineConfig, 'x1', 0, 400).onChange((x1) => {\n  line.style.x1 = x1;\n  p1.style.x = x1;\n});\nlineFolder.add(lineConfig, 'y1', 0, 400).onChange((y1) => {\n  line.style.y1 = y1;\n  p1.style.y = y1;\n});\nlineFolder.add(lineConfig, 'x2', 0, 400).onChange((x2) => {\n  line.style.x2 = x2;\n  p2.style.x = x2;\n});\nlineFolder.add(lineConfig, 'y2', 0, 400).onChange((y2) => {\n  line.style.y2 = y2;\n  p2.style.y = y2;\n});\nlineFolder.addColor(lineConfig, 'stroke').onChange((color) => {\n  line.style.stroke = color;\n});\nlineFolder.add(lineConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n  line.style.lineWidth = lineWidth;\n});\nlineFolder.add(lineConfig, 'strokeOpacity', 0, 1, 0.1).onChange((opacity) => {\n  line.style.strokeOpacity = opacity;\n});\nlineFolder.open();\n\nconst cameraFolder = gui.addFolder('camera actions');\nconst cameraConfig = {\n  panX: 0,\n  panY: 0,\n  zoom: 1,\n  roll: 0,\n};\n\nconst camera = canvas.getCamera();\nconst origin = camera.getPosition();\ncameraFolder.add(cameraConfig, 'panX', -300, 300).onChange((panX) => {\n  const current = camera.getPosition();\n  camera.pan(origin[0] + panX - current[0], 0);\n});\ncameraFolder.add(cameraConfig, 'panY', -300, 300).onChange((panY) => {\n  const current = camera.getPosition();\n  camera.pan(0, origin[1] + panY - current[1]);\n});\ncameraFolder.add(cameraConfig, 'roll', -90, 90).onChange((roll) => {\n  camera.rotate(0, 0, roll);\n});\ncameraFolder.add(cameraConfig, 'zoom', 0, 10).onChange((zoom) => {\n  camera.setZoom(zoom);\n});\ncameraFolder.open();\n",title:{zh:"HTML",en:"HTML"},filename:"html.js",isNew:!1},{id:"override-css",source:"import { Canvas, CanvasEvent, HTML, runtime } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst html = new HTML({\n  id: 'p1',\n  name: 'p1-name',\n  className: 'p1-classname',\n  style: {\n    x: 200,\n    y: 100,\n    width: 200,\n    height: 200,\n    innerHTML: 'p1',\n    fill: 'gray',\n    stroke: 'blue',\n    lineWidth: 10,\n    lineDash: [30],\n    // The followin will override the CSS properties.\n    fontSize: '20px',\n    textAlign: 'center',\n    color: 'red',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(html);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"覆盖容器上的 CSS 属性",en:"Override CSS properties on container"},filename:"override-css.js",isNew:!1}],icon:"",id:"html",title:{en:"HTML",zh:"HTML"},api:null,childrenKey:"demos",order:9},{demos:[{id:"custom-element",source:"import {\n  Canvas,\n  CanvasEvent,\n  CSS,\n  CustomElement,\n  Polyline,\n  PropertySyntax,\n} from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// register custom property\nCSS.registerProperty({\n  name: 'myNumber',\n  syntax: PropertySyntax.NUMBER,\n  initialValue: '0',\n  interpolable: true,\n});\nCSS.registerProperty({\n  name: 'myAngle',\n  syntax: PropertySyntax.ANGLE,\n  initialValue: '0',\n  interpolable: true,\n});\nCSS.registerProperty({\n  name: 'myLength',\n  syntax: PropertySyntax.LENGTH,\n  initialValue: '0',\n  interpolable: true,\n});\nCSS.registerProperty({\n  name: 'myLengthOrPercentage',\n  syntax: PropertySyntax.LENGTH_PERCENTAGE,\n  initialValue: '0',\n  interpolable: true,\n});\n\nclass MyCustomElement extends CustomElement {\n  connectedCallback() {\n    this.appendChild(\n      new Polyline({ style: { points: '100,100 200,200', stroke: 'red' } }),\n    );\n  }\n}\nconst myCustomElement = new MyCustomElement();\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(myCustomElement);\n\n  const animation = myCustomElement.animate(\n    [\n      {\n        myAngle: '20deg',\n        myLength: '10px',\n        myNumber: 0,\n        myLengthOrPercentage: '50%',\n      },\n      {\n        myAngle: '10deg',\n        myLength: '20px',\n        myNumber: 1,\n        myLengthOrPercentage: '100%',\n      },\n    ],\n    { duration: 2000, fill: 'both' },\n  );\n\n  if (animation) {\n    animation.onframe = () => {\n      console.log(\n        myCustomElement.style.myAngle,\n        myCustomElement.style.myLength,\n        myCustomElement.style.myNumber,\n        myCustomElement.style.myLengthOrPercentage,\n      );\n    };\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['canvas', 'svg', 'webgl', 'webgpu'])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"自定义元素",en:"Custom Element"},filename:"custom-element.js",isNew:!1},{id:"arrow",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*EzqjQYMeYoMAAAAAAAAAAAAAARQnAQ",source:"import {\n  Canvas,\n  CanvasEvent,\n  Circle,\n  CustomElement,\n  Image,\n  Line,\n  Path,\n  Polyline,\n} from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Arrow } from '@antv/g-components';\nimport { Plugin } from '@antv/g-plugin-dragndrop';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\ncanvasRenderer.registerPlugin(new Plugin());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create an arrow\nconst lineArrow = new Arrow({\n  id: 'lineArrow',\n  style: {\n    body: new Line({\n      style: {\n        x1: 200,\n        y1: 100,\n        x2: 0,\n        y2: 0,\n      },\n    }),\n    startHead: true,\n    stroke: '#1890FF',\n    lineWidth: 10,\n    cursor: 'pointer',\n    increasedLineWidthForHitTesting: 40,\n  },\n});\nlineArrow.translate(200, 100);\n\nconst handle1 = new Circle({\n  id: 'handle1',\n  style: {\n    cx: 400,\n    cy: 200,\n    r: 10,\n    fill: 'red',\n    draggable: true,\n  },\n});\nconst handle2 = handle1.cloneNode();\nhandle2.id = 'handle2';\nhandle2.style.cx = 200;\nhandle2.style.cy = 100;\n\nconst polylineArrow = new Arrow({\n  id: 'polylineArrow',\n  style: {\n    body: new Polyline({\n      style: {\n        points: [\n          [0, 0],\n          [50, 0],\n          [50, 50],\n          [100, 50],\n          [100, 100],\n          [150, 100],\n        ],\n      },\n    }),\n    startHead: true,\n    stroke: '#1890FF',\n    lineWidth: 10,\n    cursor: 'pointer',\n  },\n});\npolylineArrow.translate(200, 200);\n\nconst pathArrow = new Arrow({\n  id: 'pathArrow',\n  style: {\n    body: new Path({\n      style: {\n        // eslint-disable-next-line no-useless-concat\n        d: 'M 100,300' + 'l 50,-25' + 'a25,25 -30 0,1 50,-80',\n      },\n    }),\n    startHead: true,\n    stroke: '#1890FF',\n    lineWidth: 10,\n    cursor: 'pointer',\n  },\n});\npathArrow.translate(100, 150);\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(lineArrow);\n  canvas.appendChild(polylineArrow);\n  canvas.appendChild(pathArrow);\n\n  canvas.appendChild(handle1);\n  canvas.appendChild(handle2);\n});\n\nlet shiftX = 0;\nlet shiftY = 0;\nfunction moveAt(target, canvasX, canvasY) {\n  target.setPosition(canvasX - shiftX, canvasY - shiftY);\n\n  if (target.id === 'handle1') {\n    const lineBody = lineArrow.getBody();\n    lineBody.style.x1 = canvasX - shiftX - 200;\n    lineBody.style.y1 = canvasY - shiftY - 100;\n  } else if (target.id === 'handle2') {\n    const lineBody = lineArrow.getBody();\n    lineBody.style.x2 = canvasX - shiftX - 200;\n    lineBody.style.y2 = canvasY - shiftY - 100;\n  }\n}\n\ncanvas.addEventListener('dragstart', function (e) {\n  const [x, y] = e.target.getPosition();\n  shiftX = e.canvasX - x;\n  shiftY = e.canvasY - y;\n\n  moveAt(e.target, e.canvasX, e.canvasY);\n});\ncanvas.addEventListener('drag', function (e) {\n  moveAt(e.target, e.canvasX, e.canvasY);\n});\n\nlineArrow.addEventListener('mouseenter', () => {\n  lineArrow.setAttribute('stroke', '#2FC25B');\n});\nlineArrow.addEventListener('mouseleave', () => {\n  lineArrow.setAttribute('stroke', '#1890FF');\n});\n\npolylineArrow.addEventListener('mouseenter', () => {\n  polylineArrow.setAttribute('stroke', '#2FC25B');\n});\npolylineArrow.addEventListener('mouseleave', () => {\n  polylineArrow.setAttribute('stroke', '#1890FF');\n});\n\npathArrow.addEventListener('mouseenter', () => {\n  pathArrow.setAttribute('stroke', '#2FC25B');\n});\npathArrow.addEventListener('mouseleave', () => {\n  pathArrow.setAttribute('stroke', '#1890FF');\n});\n\n// define my custom arrow head\nclass MyCustomArrowHead extends CustomElement {\n  static tag = 'my-arrow-head';\n\n  constructor(config) {\n    super({\n      ...config,\n      type: MyCustomArrowHead.tag,\n    });\n\n    // just draw a simple triangle, eg. '<|'\n    this.head = new Path({\n      style: {\n        path: 'M 10,10 L -10,0 L 10,-10 Z',\n      },\n    });\n\n    this.appendChild(this.head);\n  }\n\n  attributeChangedCallback(name, oldValue, value) {\n    this.head.setAttribute(name, value);\n  }\n}\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst lineArrowFolder = gui.addFolder('line arrow');\nconst lineArrowConfig = {\n  stroke: '#1890FF',\n  lineWidth: 10,\n  strokeOpacity: 1,\n  startHead: 'default',\n  endHead: 'none',\n  startHeadOffset: 0,\n  endHeadOffset: 0,\n};\n\nlineArrowFolder.addColor(lineArrowConfig, 'stroke').onChange((color) => {\n  lineArrow.setAttribute('stroke', color);\n});\nlineArrowFolder\n  .add(lineArrowConfig, 'lineWidth', 1, 20)\n  .onChange((lineWidth) => {\n    lineArrow.setAttribute('lineWidth', lineWidth);\n  });\nlineArrowFolder\n  .add(lineArrowConfig, 'strokeOpacity', 0, 1, 0.1)\n  .onChange((opacity) => {\n    lineArrow.setAttribute('strokeOpacity', opacity);\n  });\nlineArrowFolder\n  .add(lineArrowConfig, 'startHead', [\n    'none',\n    'default',\n    'circle',\n    'image',\n    'custom arrowhead',\n  ])\n  .onChange((type) => {\n    if (type === 'none') {\n      lineArrow.setAttribute('startHead', false);\n    } else if (type === 'default') {\n      lineArrow.setAttribute('startHead', true);\n    } else if (type === 'circle') {\n      lineArrow.setAttribute('startHead', new Circle({ style: { r: 10 } }));\n    } else if (type === 'image') {\n      const image = new Image({\n        style: {\n          width: 50,\n          height: 50,\n          anchor: [0.5, 0.5],\n          transformOrigin: 'center',\n          src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n        },\n      });\n      image.rotateLocal(90);\n      lineArrow.setAttribute('startHead', image);\n    } else if (type === 'custom arrowhead') {\n      lineArrow.setAttribute('startHead', new MyCustomArrowHead({ style: {} }));\n    }\n  });\nlineArrowFolder\n  .add(lineArrowConfig, 'endHead', [\n    'none',\n    'default',\n    'circle',\n    'image',\n    'custom arrowhead',\n  ])\n  .onChange((type) => {\n    if (type === 'none') {\n      lineArrow.setAttribute('endHead', false);\n    } else if (type === 'default') {\n      lineArrow.setAttribute('endHead', true);\n    } else if (type === 'circle') {\n      lineArrow.setAttribute('endHead', new Circle({ style: { r: 10 } }));\n    } else if (type === 'image') {\n      const image = new Image({\n        style: {\n          width: 50,\n          height: 50,\n          anchor: [0.5, 0.5],\n          transformOrigin: 'center',\n          src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n        },\n      });\n      image.rotateLocal(90);\n      lineArrow.setAttribute('endHead', image);\n    } else if (type === 'custom arrowhead') {\n      lineArrow.setAttribute('endHead', new MyCustomArrowHead({ style: {} }));\n    }\n  });\nlineArrowFolder\n  .add(lineArrowConfig, 'startHeadOffset', -20, 20)\n  .onChange((startHeadOffset) => {\n    lineArrow.setAttribute('startHeadOffset', startHeadOffset);\n  });\nlineArrowFolder\n  .add(lineArrowConfig, 'endHeadOffset', -20, 20)\n  .onChange((endHeadOffset) => {\n    lineArrow.setAttribute('endHeadOffset', endHeadOffset);\n  });\nlineArrowFolder.open();\n\nconst polylineArrowFolder = gui.addFolder('polyline arrow');\nconst polylineArrowConfig = {\n  stroke: '#1890FF',\n  lineWidth: 10,\n  strokeOpacity: 1,\n  startHead: 'default',\n  endHead: 'none',\n  startHeadOffset: 0,\n  endHeadOffset: 0,\n};\npolylineArrowFolder\n  .addColor(polylineArrowConfig, 'stroke')\n  .onChange((color) => {\n    polylineArrow.setAttribute('stroke', color);\n  });\npolylineArrowFolder\n  .add(polylineArrowConfig, 'lineWidth', 1, 20)\n  .onChange((lineWidth) => {\n    polylineArrow.setAttribute('lineWidth', lineWidth);\n  });\npolylineArrowFolder\n  .add(polylineArrowConfig, 'strokeOpacity', 0, 1, 0.1)\n  .onChange((opacity) => {\n    polylineArrow.setAttribute('strokeOpacity', opacity);\n  });\npolylineArrowFolder\n  .add(polylineArrowConfig, 'startHead', [\n    'none',\n    'default',\n    'circle',\n    'image',\n    'custom arrowhead',\n  ])\n  .onChange((type) => {\n    if (type === 'none') {\n      polylineArrow.setAttribute('startHead', false);\n    } else if (type === 'default') {\n      polylineArrow.setAttribute('startHead', true);\n    } else if (type === 'circle') {\n      polylineArrow.setAttribute('startHead', new Circle({ style: { r: 10 } }));\n    } else if (type === 'image') {\n      const image = new Image({\n        style: {\n          width: 50,\n          height: 50,\n          anchor: [0.5, 0.5],\n          transformOrigin: 'center',\n          src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n        },\n      });\n      image.rotateLocal(90);\n      polylineArrow.setAttribute('startHead', image);\n    } else if (type === 'custom arrowhead') {\n      polylineArrow.setAttribute(\n        'startHead',\n        new MyCustomArrowHead({ style: {} }),\n      );\n    }\n  });\npolylineArrowFolder\n  .add(polylineArrowConfig, 'endHead', [\n    'none',\n    'default',\n    'circle',\n    'image',\n    'custom arrowhead',\n  ])\n  .onChange((type) => {\n    if (type === 'none') {\n      polylineArrow.setAttribute('endHead', false);\n    } else if (type === 'default') {\n      polylineArrow.setAttribute('endHead', true);\n    } else if (type === 'circle') {\n      polylineArrow.setAttribute('endHead', new Circle({ style: { r: 10 } }));\n    } else if (type === 'image') {\n      const image = new Image({\n        style: {\n          width: 50,\n          height: 50,\n          anchor: [0.5, 0.5],\n          transformOrigin: 'center',\n          src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n        },\n      });\n      image.rotateLocal(90);\n      polylineArrow.setAttribute('endHead', image);\n    } else if (type === 'custom arrowhead') {\n      polylineArrow.setAttribute(\n        'endHead',\n        new MyCustomArrowHead({ style: {} }),\n      );\n    }\n  });\npolylineArrowFolder\n  .add(polylineArrowConfig, 'startHeadOffset', -20, 20)\n  .onChange((startHeadOffset) => {\n    polylineArrow.setAttribute('startHeadOffset', startHeadOffset);\n  });\npolylineArrowFolder\n  .add(polylineArrowConfig, 'endHeadOffset', -20, 20)\n  .onChange((endHeadOffset) => {\n    polylineArrow.setAttribute('endHeadOffset', endHeadOffset);\n  });\n\nconst pathArrowFolder = gui.addFolder('path arrow');\nconst pathArrowConfig = {\n  stroke: '#1890FF',\n  lineWidth: 10,\n  strokeOpacity: 1,\n  startHead: 'default',\n  endHead: 'none',\n  startHeadOffset: 0,\n  endHeadOffset: 0,\n};\npathArrowFolder.addColor(pathArrowConfig, 'stroke').onChange((color) => {\n  pathArrow.setAttribute('stroke', color);\n});\npathArrowFolder\n  .add(pathArrowConfig, 'lineWidth', 1, 20)\n  .onChange((lineWidth) => {\n    pathArrow.setAttribute('lineWidth', lineWidth);\n  });\npathArrowFolder\n  .add(pathArrowConfig, 'strokeOpacity', 0, 1, 0.1)\n  .onChange((opacity) => {\n    pathArrow.setAttribute('strokeOpacity', opacity);\n  });\npathArrowFolder\n  .add(pathArrowConfig, 'startHead', [\n    'none',\n    'default',\n    'circle',\n    'image',\n    'custom arrowhead',\n  ])\n  .onChange((type) => {\n    if (type === 'none') {\n      pathArrow.setAttribute('startHead', false);\n    } else if (type === 'default') {\n      pathArrow.setAttribute('startHead', true);\n    } else if (type === 'circle') {\n      pathArrow.setAttribute('startHead', new Circle({ style: { r: 10 } }));\n    } else if (type === 'image') {\n      const image = new Image({\n        style: {\n          width: 50,\n          height: 50,\n          anchor: [0.5, 0.5],\n          transformOrigin: 'center',\n          src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n        },\n      });\n      image.rotateLocal(90);\n      pathArrow.setAttribute('startHead', image);\n    } else if (type === 'custom arrowhead') {\n      pathArrow.setAttribute('startHead', new MyCustomArrowHead({ style: {} }));\n    }\n  });\npathArrowFolder\n  .add(pathArrowConfig, 'endHead', [\n    'none',\n    'default',\n    'circle',\n    'image',\n    'custom arrowhead',\n  ])\n  .onChange((type) => {\n    if (type === 'none') {\n      pathArrow.setAttribute('endHead', false);\n    } else if (type === 'default') {\n      pathArrow.setAttribute('endHead', true);\n    } else if (type === 'circle') {\n      pathArrow.setAttribute('endHead', new Circle({ style: { r: 10 } }));\n    } else if (type === 'image') {\n      const image = new Image({\n        style: {\n          width: 50,\n          height: 50,\n          anchor: [0.5, 0.5],\n          transformOrigin: 'center',\n          src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n        },\n      });\n      image.rotateLocal(90);\n      pathArrow.setAttribute('endHead', image);\n    } else if (type === 'custom arrowhead') {\n      pathArrow.setAttribute('endHead', new MyCustomArrowHead({ style: {} }));\n    }\n  });\npathArrowFolder\n  .add(pathArrowConfig, 'startHeadOffset', -20, 20)\n  .onChange((startHeadOffset) => {\n    pathArrow.setAttribute('startHeadOffset', startHeadOffset);\n  });\npathArrowFolder\n  .add(pathArrowConfig, 'endHeadOffset', -20, 20)\n  .onChange((endHeadOffset) => {\n    pathArrow.setAttribute('endHeadOffset', endHeadOffset);\n  });\n",title:{zh:"箭头",en:"Arrow"},filename:"arrow.js",isNew:!1}],icon:"",id:"custom-element",title:{en:"CustomElement",zh:"自定义图形"},api:null,childrenKey:"demos",order:10}],childrenKey:"examples"},{id:"style",title:{zh:"样式系统",en:"Style System"},examples:[{demos:[{id:"inheritance",source:"import { Canvas, CanvasEvent, Group, Rect, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * inheritance\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  /**\n   * default values defined in <Text>:\n   * * fill: 'black'\n   *\n   * inherit from document.documentElement:\n   * * fontSize: '16px'\n   * * fontFamily: 'sans-serif'\n   * * fontStyle: 'normal'\n   * * fontWeight: 'normal'\n   * * fontVariant: 'normal'\n   * * visibility: 'visible'\n   * * pointerEvents: 'auto'\n   */\n  const text1 = new Text({\n    style: {\n      x: 100,\n      y: 100,\n      text: 'hello',\n      cursor: 'pointer',\n    },\n  });\n  canvas.appendChild(text1);\n\n  /**\n   * override default value `fill` with `red`:\n   */\n  const text2 = new Text({\n    style: {\n      x: 100,\n      y: 150,\n      text: 'hello',\n      fill: 'red',\n      cursor: 'pointer',\n    },\n  });\n  canvas.appendChild(text2);\n\n  /**\n   * override inherited `fontSize`\n   */\n  const text3 = new Text({\n    style: {\n      x: 100,\n      y: 200,\n      text: 'hello',\n      fill: 'red',\n      fontSize: 20, // user-defined\n      cursor: 'pointer',\n    },\n  });\n  canvas.appendChild(text3);\n\n  const rect = new Rect({\n    style: {\n      x: 100,\n      y: 250,\n      width: 300,\n      height: 50,\n      fill: 'grey',\n      cursor: 'pointer',\n    },\n  });\n  canvas.appendChild(rect);\n  /**\n   * inherit from <Rect> which is also inherited from document.documentElement.\n   */\n  const text4 = new Text({\n    style: {\n      y: 12,\n      text: 'hello from <Rect>',\n      cursor: 'pointer',\n    },\n  });\n  rect.appendChild(text4);\n\n  /**\n   * override `fontSize`\n   */\n  const group = new Group({\n    style: {\n      x: 100,\n      y: 400,\n      fontSize: 32,\n      cursor: 'pointer',\n    },\n  });\n  canvas.appendChild(group);\n  const text5 = new Text({\n    style: {\n      y: 12,\n      text: 'hello from <Group>',\n      cursor: 'pointer',\n    },\n  });\n  group.appendChild(text5);\n  const text6 = new Text({\n    style: {\n      y: 32,\n      text: 'hello from <Group>',\n      cursor: 'pointer',\n    },\n  });\n  group.appendChild(text6);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg'])\n    .onChange((renderer) => {\n      canvas.setRenderer(\n        renderer === 'canvas'\n          ? canvasRenderer\n          : renderer === 'webgl'\n          ? webglRenderer\n          : svgRenderer,\n      );\n    });\n  rendererFolder.open();\n\n  const documentElementFolder = gui.addFolder('documentElement');\n  const documentElementConfig = {\n    fontSize: 16,\n    fontFamily: 'sans-serif',\n    fontStyle: 'normal',\n    visibility: 'unset',\n    pointerEvents: 'unset',\n  };\n  documentElementFolder\n    .add(documentElementConfig, 'fontSize', 1, 32)\n    .onChange((fontSize) => {\n      canvas.document.documentElement.style.fontSize = `${fontSize}px`;\n    });\n  documentElementFolder\n    .add(documentElementConfig, 'fontFamily', [\n      'PingFang SC',\n      'fantasy',\n      'Arial',\n      'Times',\n      'Microsoft YaHei',\n    ])\n    .onChange((fontFamily) => {\n      canvas.document.documentElement.style.fontFamily = fontFamily;\n    });\n  documentElementFolder\n    .add(documentElementConfig, 'fontStyle', ['normal', 'italic', 'oblique'])\n    .onChange((fontStyle) => {\n      canvas.document.documentElement.style.fontStyle = fontStyle;\n    });\n  documentElementFolder\n    .add(documentElementConfig, 'visibility', ['unset', 'visible', 'hidden'])\n    .onChange((visibility) => {\n      canvas.document.documentElement.style.visibility = visibility;\n    });\n  documentElementFolder\n    .add(documentElementConfig, 'pointerEvents', ['unset', 'auto', 'none'])\n    .onChange((pointerEvents) => {\n      canvas.document.documentElement.style.pointerEvents = pointerEvents;\n    });\n\n  const groupFolder = gui.addFolder('group');\n  const groupConfig = {\n    fontSize: 32,\n    visibility: 'unset',\n    pointerEvents: 'unset',\n  };\n  groupFolder.add(groupConfig, 'fontSize', 1, 32).onChange((fontSize) => {\n    group.style.fontSize = `${fontSize}px`;\n  });\n  groupFolder\n    .add(groupConfig, 'visibility', ['unset', 'visible', 'hidden'])\n    .onChange((visibility) => {\n      group.style.visibility = visibility;\n    });\n  groupFolder\n    .add(groupConfig, 'pointerEvents', ['unset', 'auto', 'none'])\n    .onChange((pointerEvents) => {\n      group.style.pointerEvents = pointerEvents;\n    });\n  groupFolder.open();\n});\n",title:{zh:"属性继承",en:"Inheritance"},filename:"inheritance.js",isNew:!1},{id:"color",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * <color>\n * e.g. 'red' '#f00' 'rgb(255,0,0)' 'rgba(255,0,0,0.5)' 'transparent'\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a circle\nconst circle = new Circle({\n  style: {\n    cx: 200,\n    cy: 200,\n    r: 100,\n    fill: '#f00',\n    stroke: 'black',\n    lineWidth: 10,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // add a circle to canvas\n  canvas.appendChild(circle);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst circleFolder = gui.addFolder('circle');\nconst circleConfig = {\n  fill: '#f00',\n};\ncircleFolder\n  .add(circleConfig, 'fill', [\n    'darkcyan',\n    '#f00',\n    '#ff0000',\n    'rgb(255,0,0)',\n    'rgb(100%, 0%, 0%)',\n    'rgba(100%,0%,0%,0.5)',\n    'transparent',\n    'currentColor',\n  ])\n  .onChange((fill) => {\n    circle.style.fill = fill;\n  });\n",title:{zh:"<color>",en:"<color>"},filename:"color.js",isNew:!1},{id:"paint",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * <paint>\n * include <color> <gradient> <pattern>\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a circle\nconst circle = new Circle({\n  style: {\n    cx: 200,\n    cy: 200,\n    r: 100,\n    fill: '#f00',\n    stroke: 'black',\n    lineWidth: 10,\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // add a circle to canvas\n  canvas.appendChild(circle);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst circleFolder = gui.addFolder('circle');\nconst circleConfig = {\n  fill: '#f00',\n};\nconst linearGradient = 'linear-gradient(0deg, blue, green 40%, red)';\nconst radialGradient =\n  'radial-gradient(circle at center, red, blue, green 100%)';\nconst pattern = {\n  image:\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*jgjxQ57sACsAAAAAAAAAAAAAARQnAQ',\n};\ncircleFolder\n  .add(circleConfig, 'fill', [\n    'none',\n    '#f00',\n    'transparent',\n    linearGradient,\n    radialGradient,\n    'pattern',\n  ])\n  .onChange((fill) => {\n    circle.style.fill = fill === 'pattern' ? pattern : fill;\n  });\n",title:{zh:"<paint>",en:"<paint>"},filename:"paint.js",isNew:!1},{id:"length",source:"import { Canvas, CanvasEvent, Circle, Group } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * <length>\n *\n * support the following units:\n * e.g. '100px' '20rem' '10em'\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst group = new Group({\n  style: {\n    fontSize: '20px',\n  },\n});\n// create a circle\nconst circle = new Circle({\n  style: {\n    cx: 200,\n    cy: 200,\n    r: '100px',\n    fill: '#f00',\n    stroke: 'black',\n    lineWidth: 10,\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // add a circle to canvas\n  canvas.appendChild(group);\n  group.appendChild(circle);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst circleFolder = gui.addFolder('circle');\nconst circleConfig = {\n  r: '100px',\n};\ncircleFolder.add(circleConfig, 'r', ['100px', '2rem', '5em']).onChange((r) => {\n  circle.style.r = r;\n});\n",title:{zh:"<length>",en:"<length>"},filename:"length.js",isNew:!1},{id:"custom-property",source:"import {\n  Canvas,\n  CanvasEvent,\n  CSS,\n  CustomElement,\n  Polyline,\n  PropertySyntax,\n} from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// register custom property\nCSS.registerProperty({\n  name: 'myNumber',\n  syntax: PropertySyntax.NUMBER,\n  initialValue: '0',\n  interpolable: true,\n});\nCSS.registerProperty({\n  name: 'myAngle',\n  syntax: PropertySyntax.ANGLE,\n  initialValue: '0',\n  interpolable: true,\n});\nCSS.registerProperty({\n  name: 'myLength',\n  syntax: PropertySyntax.LENGTH,\n  initialValue: '0',\n  interpolable: true,\n});\nCSS.registerProperty({\n  name: 'myLengthOrPercentage',\n  syntax: PropertySyntax.LENGTH_PERCENTAGE,\n  initialValue: '0',\n  interpolable: true,\n});\n\nclass MyCustomElement extends CustomElement {\n  connectedCallback() {\n    this.appendChild(\n      new Polyline({ style: { points: '100,100 200,200', stroke: 'red' } }),\n    );\n  }\n}\nconst myCustomElement = new MyCustomElement();\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(myCustomElement);\n\n  const animation = myCustomElement.animate(\n    [\n      {\n        myAngle: '20deg',\n        myLength: '10px',\n        myNumber: 0,\n        myLengthOrPercentage: '50%',\n      },\n      {\n        myAngle: '10deg',\n        myLength: '20px',\n        myNumber: 1,\n        myLengthOrPercentage: '100%',\n      },\n    ],\n    { duration: 2000, fill: 'both' },\n  );\n\n  if (animation) {\n    animation.onframe = () => {\n      console.log(\n        myCustomElement.style.myAngle,\n        myCustomElement.style.myLength,\n        myCustomElement.style.myNumber,\n        myCustomElement.style.myLengthOrPercentage,\n      );\n    };\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['canvas', 'svg', 'webgl', 'webgpu'])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"自定义属性",en:"Use custom property"},filename:"custom-property.js",isNew:!1}],icon:"",id:"basic",title:{en:"Pattern",zh:"样式系统"},api:null,childrenKey:"demos",order:1},{demos:[{id:"clip",screenshot:"https://gw.alipayobjects.com/zos/raptor/1669181270740/Nov-23-2022%25252013-25-56.gif",source:"import { Canvas, CanvasEvent, Circle, Group, Path, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// in user space\nconst clipPathCircle = new Circle({\n  style: {\n    cx: 150,\n    cy: 150,\n    r: 35,\n    fill: 'blue',\n    transformOrigin: 'center',\n  },\n});\n\nconst rect1 = new Rect({\n  style: {\n    x: 0,\n    y: 0,\n    width: 45,\n    height: 45,\n    stroke: 'white',\n    strokeWidth: 2,\n    fill: 'red',\n    clipPath: clipPathCircle,\n    cursor: 'pointer',\n    // transform: 'translate(200px, 200px)',\n  },\n});\nconst rect2 = rect1.cloneNode();\nrect2.style.y = 55;\nconst rect3 = rect1.cloneNode();\nrect3.style.x = 55;\nrect3.style.y = 55;\nconst rect4 = rect1.cloneNode();\nrect4.style.x = 55;\nrect4.style.y = 0;\n\nconst clipPathRect = new Rect({\n  style: {\n    x: 125,\n    y: 125,\n    width: 50,\n    height: 50,\n  },\n});\nconst clipPath = new Path({\n  style: {\n    stroke: 'black',\n    lineWidth: 2,\n    d: 'M 10,10 L -10,0 L 10,-10 Z',\n  },\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst g = new Group();\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const group = new Group({\n    style: {\n      transform: `translate(100, 100)`,\n    },\n  });\n  g.appendChild(clipPathCircle);\n  group.appendChild(rect1);\n  group.appendChild(rect2);\n  group.appendChild(rect3);\n  group.appendChild(rect4);\n  g.appendChild(group);\n\n  canvas.appendChild(g);\n\n  // g.style.x = 200;\n  // g.style.y = 200;\n\n  clipPathCircle.animate(\n    [{ transform: 'scale(1)' }, { transform: 'scale(2)' }],\n    {\n      duration: 1500,\n      iterations: Infinity,\n    },\n  );\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst circleClipFolder = gui.addFolder('Circle as clipPath');\nconst circleClipConfig = {\n  r: 50,\n};\ncircleClipFolder.add(circleClipConfig, 'r', 0, 100).onChange((r) => {\n  clipPathCircle.style.r = r;\n});\ncircleClipFolder.open();\n\nconst clippedShapesFolder = gui.addFolder('Clipped shapes');\nconst clippedShapesConfig = {\n  rect1: 'circle',\n  rect2: 'circle',\n  rect3: 'circle',\n  rect4: 'circle',\n};\n[rect1, rect2, rect3, rect4].forEach((rect, index) => {\n  clippedShapesFolder\n    .add(clippedShapesConfig, `rect${index + 1}`, [\n      'circle',\n      'rect',\n      'path',\n      'null',\n    ])\n    .onChange((type) => {\n      switch (type) {\n        case 'circle':\n          rect.style.clipPath = clipPathCircle;\n          break;\n        case 'rect':\n          rect.style.clipPath = clipPathRect;\n          break;\n        case 'path':\n          rect.style.clipPath = clipPath;\n          break;\n        case 'null': // clear clip path\n          rect.style.clipPath = null;\n          // rect.setClip(null);\n          break;\n      }\n    });\n});\nclippedShapesFolder.open();\n",title:{zh:"裁剪区域",en:"Clip Path"},filename:"clip.js",isNew:!1},{id:"animated",screenshot:"https://mdn.alipayobjects.com/antforest/afts/img/A*2OssQK89ur0AAAAAAAAAAAAADrd2AQ/Dec-13-2022%2011-55-46.gif",source:"import { Canvas, CanvasEvent, Circle, Group } from '@antv/g';\nimport { Sector } from '@antv/g-components';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer();\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst sector = new Sector({\n  style: {\n    x: 150,\n    y: 100,\n    lineWidth: 1,\n    sr: 100,\n    startAngle: -90,\n    fill: 'yellow',\n    opacity: 0.5,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const group = new Group({\n    style: {\n      clipPath: sector,\n    },\n  });\n  const circle1 = new Circle({\n    style: {\n      fill: 'red',\n      cx: 100,\n      cy: 100,\n      r: 20,\n    },\n  });\n  const circle2 = new Circle({\n    style: {\n      fill: 'red',\n      cx: 150,\n      cy: 100,\n      r: 20,\n    },\n  });\n  canvas.appendChild(group);\n  group.appendChild(circle1);\n  group.appendChild(circle2);\n  canvas.appendChild(sector);\n\n  sector.animate(\n    [\n      {\n        endAngle: -90,\n      },\n      {\n        endAngle: 270,\n      },\n    ],\n    {\n      duration: 1000,\n      iterations: Infinity,\n      fill: 'both',\n    },\n  );\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"对裁剪区域应用动画",en:"Animated ClipPath"},filename:"animated.ts",isNew:!1}],icon:"",id:"clip-path",title:{en:"ClipPath",zh:"ClipPath"},api:null,childrenKey:"demos",order:1},{demos:[{id:"gradient",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*rWIvR729TqwAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, HTML, Line, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * <gradient>\n * e.g. linear-gradient(0deg, blue, green 40%, red)\n *      radial-gradient(circle at center, red 0, blue, green 100%)\n * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/gradient/linear-gradient\n * @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/gradient/radial-gradient\n *\n * interactive demo:\n * @see https://observablehq.com/@danburzo/css-gradient-line\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// single linear gradient\nconst rect1 = new Rect({\n  style: {\n    x: 50,\n    y: 50,\n    width: 200,\n    height: 100,\n    fill: 'linear-gradient(0deg, blue, green 40%, red)',\n  },\n});\n\n// multi linear gradients\nconst rect2 = new Rect({\n  style: {\n    x: 50,\n    y: 250,\n    width: 200,\n    height: 100,\n    fill: `linear-gradient(217deg, rgba(255,0,0,.8), rgba(255,0,0,0) 70.71%),\n            linear-gradient(127deg, rgba(0,255,0,.8), rgba(0,255,0,0) 70.71%),\n            linear-gradient(336deg, rgba(0,0,255,.8), rgba(0,0,255,0) 70.71%)`,\n  },\n});\n\n// single radial gradient\nconst rect3 = new Rect({\n  style: {\n    x: 350,\n    y: 50,\n    width: 200,\n    height: 100,\n    fill: 'radial-gradient(circle at center, red, blue, green 100%)',\n  },\n});\n\n// hard stop\nconst rect4 = new Rect({\n  style: {\n    x: 350,\n    y: 250,\n    width: 200,\n    height: 100,\n    fill: 'radial-gradient(red 50%, blue 50%)',\n  },\n});\n\nconst line1 = new Line({\n  style: {\n    x1: 50,\n    y1: 180,\n    x2: 250,\n    y2: 180,\n    strokeWidth: 10,\n    stroke: 'linear-gradient(0deg, blue, green 40%, red)',\n  },\n});\nconst line2 = new Line({\n  style: {\n    x1: 350,\n    y1: 180,\n    x2: 550,\n    y2: 180,\n    strokeWidth: 10,\n    stroke: 'radial-gradient(circle at center, red, blue, green 100%)',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(line1);\n  canvas.appendChild(line2);\n\n  canvas.appendChild(rect1);\n  canvas.appendChild(rect2);\n  canvas.appendChild(rect3);\n  canvas.appendChild(rect4);\n\n  canvas.appendChild(\n    new HTML({\n      style: {\n        x: 100,\n        y: 20,\n        height: 30,\n        width: 200,\n        innerHTML: 'linear gradient',\n      },\n    }),\n  );\n  canvas.appendChild(\n    new HTML({\n      style: {\n        x: 60,\n        y: 220,\n        height: 30,\n        width: 200,\n        innerHTML: 'multiple linear gradients',\n      },\n    }),\n  );\n  canvas.appendChild(\n    new HTML({\n      style: {\n        x: 350,\n        y: 20,\n        height: 30,\n        width: 200,\n        innerHTML: 'radial gradient',\n      },\n    }),\n  );\n  canvas.appendChild(\n    new HTML({\n      style: {\n        x: 350,\n        y: 220,\n        height: 30,\n        width: 200,\n        innerHTML: 'hard color stop',\n      },\n    }),\n  );\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst linearGradientFolder = gui.addFolder('linear gradient');\nconst linearGradientConfig = {\n  angle: 0,\n  width: 200,\n  height: 100,\n  'side or corner': 'to right',\n  'green color stop(%)': 40,\n};\nlinearGradientFolder\n  .add(linearGradientConfig, 'angle', 0, 360)\n  .onChange((angle) => {\n    rect1.style.fill = `linear-gradient(${angle}deg, blue, green 40%, red)`;\n  });\nlinearGradientFolder\n  .add(linearGradientConfig, 'side or corner', [\n    'to left',\n    'to top',\n    'to bottom',\n    'to right',\n    'to left top',\n    'to top left',\n    'to left bottom',\n    'to bottom left',\n    'to right top',\n    'to top right',\n    'to right bottom',\n    'to bottom right',\n  ])\n  .onChange((direction) => {\n    rect1.style.fill = `linear-gradient(${direction}, blue, green 40%, red)`;\n  });\nlinearGradientFolder\n  .add(linearGradientConfig, 'green color stop(%)', 0, 100)\n  .onChange((percentage) => {\n    rect1.style.fill = `linear-gradient(0deg, blue, green ${percentage}%, red)`;\n  });\nlinearGradientFolder\n  .add(linearGradientConfig, 'width', 50, 400)\n  .onChange((width) => {\n    rect1.style.width = width;\n  });\nlinearGradientFolder\n  .add(linearGradientConfig, 'height', 50, 400)\n  .onChange((height) => {\n    rect1.style.height = height;\n  });\n\nconst radialGradientFolder = gui.addFolder('radial gradient');\nconst radialGradientConfig = {\n  position: 'center',\n  size: 'farthest-corner',\n  'green color stop(%)': 100,\n};\nradialGradientFolder\n  .add(radialGradientConfig, 'position', [\n    'top',\n    'left',\n    'bottom',\n    'right',\n    'center',\n    'top left',\n    'left top',\n    'top right',\n    'bottom left',\n    'bottom right',\n    '25% 25%',\n    '50% 50%',\n    '50px 50px',\n  ])\n  .onChange((position) => {\n    rect3.style.fill = `radial-gradient(circle ${radialGradientConfig.size} at ${position}, red, blue, green ${radialGradientConfig['green color stop(%)']}%)`;\n  });\nradialGradientFolder\n  .add(radialGradientConfig, 'size', [\n    'closest-side',\n    'closest-corner',\n    'farthest-side',\n    'farthest-corner',\n    '100px',\n  ])\n  .onChange((size) => {\n    rect3.style.fill = `radial-gradient(circle ${size} at ${radialGradientConfig.position}, red, blue, green ${radialGradientConfig['green color stop(%)']}%)`;\n  });\nradialGradientFolder\n  .add(radialGradientConfig, 'green color stop(%)', 0, 100)\n  .onChange((percentage) => {\n    rect3.style.fill = `radial-gradient(circle ${radialGradientConfig.size} at ${radialGradientConfig.position}, red, blue, green ${percentage}%)`;\n  });\n",title:{zh:"Gradient",en:"Gradient"},filename:"gradient.js",isNew:!1},{id:"path",source:"import { Canvas, CanvasEvent, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst path = new Path({\n  style: {\n    d: 'M 100 100 L 200 200 L 300 400',\n    lineWidth: 10,\n    stroke:\n      'linear-gradient(-90deg, rgba(178, 230, 181, 0), rgba(178, 230, 181, 0.6) 14%, rgba(166, 221, 179, 0.82) 23%, rgba(101, 171, 170, 0.9) 67%, rgb(23, 80, 157))',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(path);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"带渐变的 Path",en:"Path with gradient"},filename:"path.js",isNew:!1},{id:"radial-gradient",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*8v8eQ77nS2EAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Circle, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport * as d3 from 'd3';\n\nconst arc = d3.arc();\nconst arc1 = arc({\n  innerRadius: 150,\n  outerRadius: 180,\n  startAngle: Math.PI / 4,\n  endAngle: Math.PI / 2,\n  padAngle: Math.PI / 200,\n});\nconst arc2 = arc({\n  innerRadius: 150,\n  outerRadius: 180,\n  startAngle: 0,\n  endAngle: Math.PI / 4,\n  padAngle: Math.PI / 200,\n});\nconst arc3 = arc({\n  innerRadius: 150,\n  outerRadius: 180,\n  startAngle: Math.PI / 2,\n  endAngle: Math.PI * 2,\n  padAngle: Math.PI / 200,\n});\n\nconst canvasRenderer = new CanvasRenderer();\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 400,\n  height: 400,\n  renderer: canvasRenderer,\n});\n\nconst circle = new Circle({\n  style: {\n    cx: 200,\n    cy: 200,\n    r: 100,\n    fill: 'red',\n    stroke: 'white',\n    lineWidth: 4,\n    shadowColor: 'red',\n    shadowBlur: 2,\n    cursor: 'pointer',\n  },\n});\n\n[arc1, arc2, arc3].forEach((arc, i) => {\n  console.log(arc);\n\n  const p = new Path({\n    style: {\n      d: arc,\n      // shadowColor: \"blue\",\n      // shadowBlur: 20,\n    },\n  });\n  p.style.fill = `radial-gradient(circle at 0px 0px, blue 60%, rgba(0,0,200,0.3) 75%, rgba(0,0,200,0.3) 76%, blue 90%)`;\n  canvas.appendChild(p);\n  p.translate(200, 200);\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle);\n\n  circle.animate([{ shadowBlur: 20 }, { shadowBlur: 60 }], {\n    duration: 2000,\n    fill: 'both',\n    direction: 'alternate',\n    easing: 'ease-in-out',\n    iterations: Infinity,\n  });\n});\n",title:{zh:"Radial Gradient",en:"Radial Gradient"},filename:"radial-gradient.js",isNew:!1},{id:"inner-shadow",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kFlaT5Ph1gYAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst path = new Path({\n  style: {\n    d: 'M33.6,51S44.36,31.65,48.15,18,64.38,7.42,66.62,18s10.6,33.6,13.15,33.1',\n    transform: 'scale(3)',\n    lineWidth: 1,\n    stroke: '#54BECC',\n    fill: 'linear-gradient(-90deg, rgba(178, 230, 181, 0), rgba(178, 230, 181, 0.6) 14%, rgba(166, 221, 179, 0.82) 23%, rgba(101, 171, 170, 0.9) 67%, rgb(23, 80, 157))',\n    shadowType: 'inner',\n    shadowColor: 'red',\n    shadowBlur: 10,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(path);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"Inner Shadow",en:"Inner Shadow"},filename:"inner-shadow.js",isNew:!1}],icon:"",id:"gradient",title:{en:"Gradient",zh:"Gradient"},api:null,childrenKey:"demos",order:1},{demos:[{id:"pattern",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*cRmFTItZOtYAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, HTML, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport SimplexNoise from 'simplex-noise';\nimport Stats from 'stats.js';\n\n/**\n * <pattern>\n * support the following image source:\n * * HTMLImageElement (<img>)\n * * HTMLCanvasElement (<canvas>)\n * * HTMLVideoElement (<video>)\n * * ImageData\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/createPattern#%E5%8F%82%E6%95%B0\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// <img> URL\nconst rect1 = new Rect({\n  style: {\n    x: 50,\n    y: 50,\n    width: 200,\n    height: 100,\n    fill: {\n      image:\n        'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*jgjxQ57sACsAAAAAAAAAAAAAARQnAQ',\n      repetition: 'repeat',\n    },\n  },\n});\n\n// HTMLCanvasElement (<canvas>)\n// @see https://observablehq.com/@awoodruff/canvas-cartography-nacis-2019\nconst patternCanvas = document.createElement('canvas');\npatternCanvas.width = 20;\npatternCanvas.height = 20;\nconst ctx = patternCanvas.getContext('2d');\nctx.strokeStyle = '#333';\nctx.lineWidth = 1;\nctx.beginPath();\nfor (let i = 0.5; i < 20; i += 5) {\n  ctx.moveTo(0, i);\n  ctx.lineTo(20, i);\n}\nctx.stroke();\nconst rect3 = new Rect({\n  style: {\n    x: 50,\n    y: 200,\n    width: 200,\n    height: 100,\n    fill: {\n      image: patternCanvas,\n      repetition: 'repeat',\n    },\n  },\n});\n\nconst width = 200;\nconst height = 100;\nconst noiseCanvas = document.createElement('canvas');\nnoiseCanvas.width = width;\nnoiseCanvas.height = height;\nconst context = noiseCanvas.getContext('2d');\nconst image = context.createImageData(width, height);\nconst noise = new SimplexNoise();\nfor (let z = 0, y = 0, i = 0; y < height; ++y) {\n  for (let x = 0; x < width; ++x, i += 4) {\n    image.data[i + 3] = (noise.noise2D(x / 64, y / 64) + 1) * 128;\n  }\n}\ncontext.putImageData(image, 0, 0);\nconst rect4 = new Rect({\n  style: {\n    x: 300,\n    y: 200,\n    width: 200,\n    height: 100,\n    fill: {\n      image: context.canvas,\n      repetition: 'repeat',\n    },\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(rect1);\n  canvas.appendChild(rect3);\n  canvas.appendChild(rect4);\n\n  // HTMLImageElement(<img>)\n  const image = new window.Image();\n  image.onload = () => {\n    const rect2 = new Rect({\n      style: {\n        x: 300,\n        y: 50,\n        width: 200,\n        height: 100,\n        fill: {\n          image,\n          repetition: 'repeat',\n        },\n      },\n    });\n    canvas.appendChild(rect2);\n  };\n  // without `crossOrigin`, it will throw 'WebGL2RenderingContext': Tainted canvases may not be loaded.\n  image.crossOrigin = 'Anonymous';\n  image.src =\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*jgjxQ57sACsAAAAAAAAAAAAAARQnAQ';\n\n  // HTMLVideoElement(<video>)\n  const video = document.createElement('video');\n  video.src =\n    'https://gw.alipayobjects.com/v/rms_6ae20b/afts/video/A*VD0TTbZB9WMAAAAAAAAAAAAAARQnAQ/720P';\n  video.crossOrigin = 'Anonymous';\n  video.autoplay = true;\n  video.controls = false;\n  video.muted = true;\n  video.height = 100;\n  video.width = 200;\n\n  video.onloadeddata = function () {\n    const rect5 = new Rect({\n      style: {\n        x: 50,\n        y: 350,\n        width: 200,\n        height: 100,\n        fill: {\n          image: video,\n          repetition: 'no-repeat',\n        },\n      },\n    });\n    canvas.appendChild(rect5);\n  };\n\n  canvas.appendChild(\n    new HTML({\n      style: {\n        x: 100,\n        y: 20,\n        height: 30,\n        width: 200,\n        innerHTML: 'image URL',\n      },\n    }),\n  );\n\n  canvas.appendChild(\n    new HTML({\n      style: {\n        x: 300,\n        y: 20,\n        height: 30,\n        width: 200,\n        innerHTML: 'HTMLImageElement(&lt;img&gt;)',\n      },\n    }),\n  );\n\n  canvas.appendChild(\n    new HTML({\n      style: {\n        x: 50,\n        y: 170,\n        height: 30,\n        width: 300,\n        innerHTML: 'HTMLCanvasElement(&lt;canvas&gt;)',\n      },\n    }),\n  );\n\n  canvas.appendChild(\n    new HTML({\n      style: {\n        x: 50,\n        y: 320,\n        height: 30,\n        width: 300,\n        innerHTML: 'HTMLVideoElement(&lt;video&gt;)',\n      },\n    }),\n  );\n\n  canvas.appendChild(\n    new HTML({\n      style: {\n        x: 300,\n        y: 170,\n        height: 30,\n        width: 300,\n        innerHTML: 'Perlin Noise',\n      },\n    }),\n  );\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst patternFolder = gui.addFolder('pattern');\nconst patternConfig = {\n  repetition: 'repeat',\n};\npatternFolder\n  .add(patternConfig, 'repetition', [\n    'repeat',\n    'repeat-x',\n    'repeat-y',\n    'no-repeat',\n  ])\n  .onChange((repetition) => {\n    rect1.style.fill = {\n      image:\n        'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*jgjxQ57sACsAAAAAAAAAAAAAARQnAQ',\n      repetition,\n    };\n  });\npatternFolder.open();\n",title:{zh:"Pattern",en:"Pattern"},filename:"pattern.js",isNew:!1},{id:"rect",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*8kA4QZ8xU88AAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Circle, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst background = new Rect({\n  style: {\n    width: 16,\n    height: 16,\n    fill: 'red',\n  },\n});\nconst dot = new Circle({\n  style: {\n    cx: 8,\n    cy: 8,\n    r: 6,\n    fill: 'white',\n  },\n});\nbackground.appendChild(dot);\n\nconst rect = new Rect({\n  style: {\n    x: 50,\n    y: 50,\n    width: 200,\n    height: 100,\n    fill: {\n      image: background,\n      repetition: 'repeat',\n      transform: 'rotate(30deg)',\n    },\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(rect);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"Rect as pattern",en:"Rect as pattern"},filename:"rect.js",isNew:!1},{id:"dots",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Xce3RrT3zAMAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport { dots } from '@antv/g-pattern';\n\n/**\n * inspired by https://nivo.rocks/guides/patterns/\n */\n\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst rect = new Rect({\n  style: {\n    x: 50,\n    y: 100,\n    width: 200,\n    height: 100,\n    fill: {\n      image: dots({\n        fill: 'red',\n      }),\n      repetition: 'repeat',\n    },\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(rect);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst folder = gui.addFolder('dots');\nconst config = {\n  size: 6,\n  padding: 2,\n  backgroundColor: 'transparent',\n  backgroundOpacity: 1,\n  fill: '#ff0000',\n  stroke: 'transparent',\n  opacity: 1,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  lineWidth: 0,\n  isStagger: true,\n};\nconst transformConfig = {\n  scale: 1,\n  rotate: 0,\n  translateX: 0,\n  translateY: 0,\n};\nfunction updatePattern(name, value) {\n  const { translateX, translateY, scale, rotate } = transformConfig;\n  rect.style.fill = {\n    image: dots(Object.assign({}, config, name ? { [name]: value } : {})),\n    repetition: 'repeat',\n    transform: `translate(${translateX}, ${translateY}) rotate(${rotate}deg) scale(${scale})`,\n  };\n}\nfolder.add(config, 'size', 0, 20).onChange((size) => {\n  updatePattern('size', size);\n});\nfolder.add(config, 'padding', 0, 20).onChange((padding) => {\n  updatePattern('padding', padding);\n});\nfolder.addColor(config, 'backgroundColor').onChange((backgroundColor) => {\n  updatePattern('backgroundColor', backgroundColor);\n});\nfolder.add(config, 'backgroundOpacity', 0, 1).onChange((backgroundOpacity) => {\n  updatePattern('backgroundOpacity', backgroundOpacity);\n});\nfolder.addColor(config, 'fill').onChange((fill) => {\n  updatePattern('fill', fill);\n});\nfolder.addColor(config, 'stroke').onChange((stroke) => {\n  updatePattern('stroke', stroke);\n});\nfolder.add(config, 'opacity', 0, 1).onChange((opacity) => {\n  updatePattern('opacity', opacity);\n});\nfolder.add(config, 'fillOpacity', 0, 1).onChange((fillOpacity) => {\n  updatePattern('fillOpacity', fillOpacity);\n});\nfolder.add(config, 'strokeOpacity', 0, 1).onChange((strokeOpacity) => {\n  updatePattern('strokeOpacity', strokeOpacity);\n});\nfolder.add(config, 'lineWidth', 0, 20).onChange((lineWidth) => {\n  updatePattern('lineWidth', lineWidth);\n});\nfolder.add(config, 'isStagger').onChange((isStagger) => {\n  updatePattern('isStagger', isStagger);\n});\nfolder.open();\n\nconst transformFolder = gui.addFolder('transform');\ntransformFolder.add(transformConfig, 'scale', 0.1, 5).onChange((scale) => {\n  updatePattern();\n});\ntransformFolder.add(transformConfig, 'rotate', 0, 360).onChange((scale) => {\n  updatePattern();\n});\ntransformFolder.add(transformConfig, 'translateX', 0, 100).onChange((scale) => {\n  updatePattern();\n});\ntransformFolder.add(transformConfig, 'translateY', 0, 100).onChange((scale) => {\n  updatePattern();\n});\ntransformFolder.open();\n",title:{zh:"Dots Pattern",en:"Dots Pattern"},filename:"dots.js",isNew:!1},{id:"lines",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*cQp7TrgGMoUAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport { lines } from '@antv/g-pattern';\n\n/**\n * inspired by https://nivo.rocks/guides/patterns/\n */\n\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst rect = new Rect({\n  style: {\n    x: 50,\n    y: 100,\n    width: 200,\n    height: 100,\n    fill: {\n      image: lines({\n        stroke: '#000000',\n      }),\n      repetition: 'repeat',\n    },\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(rect);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst folder = gui.addFolder('lines');\nconst config = {\n  spacing: 5,\n  backgroundColor: 'transparent',\n  backgroundOpacity: 1,\n  stroke: '#000000',\n  opacity: 1,\n  strokeOpacity: 1,\n  lineWidth: 2,\n};\nconst transformConfig = {\n  scale: 1,\n  rotate: 0,\n  translateX: 0,\n  translateY: 0,\n};\nfunction updatePattern(name, value) {\n  const { translateX, translateY, scale, rotate } = transformConfig;\n  rect.style.fill = {\n    image: lines(Object.assign({}, config, name ? { [name]: value } : {})),\n    repetition: 'repeat',\n    transform: `translate(${translateX}, ${translateY}) rotate(${rotate}deg) scale(${scale})`,\n  };\n}\nfolder.add(config, 'spacing', 0, 20).onChange((spacing) => {\n  updatePattern('spacing', spacing);\n});\nfolder.addColor(config, 'backgroundColor').onChange((backgroundColor) => {\n  updatePattern('backgroundColor', backgroundColor);\n});\nfolder.add(config, 'backgroundOpacity', 0, 1).onChange((backgroundOpacity) => {\n  updatePattern('backgroundOpacity', backgroundOpacity);\n});\nfolder.addColor(config, 'stroke').onChange((stroke) => {\n  updatePattern('stroke', stroke);\n});\nfolder.add(config, 'opacity', 0, 1).onChange((opacity) => {\n  updatePattern('opacity', opacity);\n});\nfolder.add(config, 'strokeOpacity', 0, 1).onChange((strokeOpacity) => {\n  updatePattern('strokeOpacity', strokeOpacity);\n});\nfolder.add(config, 'lineWidth', 0, 20).onChange((lineWidth) => {\n  updatePattern('lineWidth', lineWidth);\n});\nfolder.open();\n\nconst transformFolder = gui.addFolder('transform');\ntransformFolder.add(transformConfig, 'scale', 0.1, 5).onChange((scale) => {\n  updatePattern();\n});\ntransformFolder.add(transformConfig, 'rotate', 0, 360).onChange((scale) => {\n  updatePattern();\n});\ntransformFolder.add(transformConfig, 'translateX', 0, 100).onChange((scale) => {\n  updatePattern();\n});\ntransformFolder.add(transformConfig, 'translateY', 0, 100).onChange((scale) => {\n  updatePattern();\n});\ntransformFolder.open();\n",title:{zh:"Lines Pattern",en:"Lines Pattern"},filename:"lines.js",isNew:!1},{id:"squares",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*JB3lRoeyzdIAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport { squares } from '@antv/g-pattern';\n\n/**\n * inspired by https://nivo.rocks/guides/patterns/\n */\n\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst rect = new Rect({\n  style: {\n    x: 50,\n    y: 100,\n    width: 200,\n    height: 100,\n    fill: {\n      image: squares({\n        fill: 'red',\n      }),\n      repetition: 'repeat',\n    },\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(rect);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst folder = gui.addFolder('squares');\nconst config = {\n  size: 6,\n  padding: 1,\n  backgroundColor: 'transparent',\n  backgroundOpacity: 1,\n  fill: '#ff0000',\n  stroke: 'transparent',\n  opacity: 1,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  lineWidth: 0,\n  isStagger: true,\n};\nconst transformConfig = {\n  scale: 1,\n  rotate: 0,\n  translateX: 0,\n  translateY: 0,\n};\nfunction updatePattern(name, value) {\n  const { translateX, translateY, scale, rotate } = transformConfig;\n  rect.style.fill = {\n    image: squares(Object.assign({}, config, name ? { [name]: value } : {})),\n    repetition: 'repeat',\n    transform: `translate(${translateX}, ${translateY}) rotate(${rotate}deg) scale(${scale})`,\n  };\n}\nfolder.add(config, 'size', 0, 20).onChange((size) => {\n  updatePattern('size', size);\n});\nfolder.add(config, 'padding', 0, 20).onChange((padding) => {\n  updatePattern('padding', padding);\n});\nfolder.addColor(config, 'backgroundColor').onChange((backgroundColor) => {\n  updatePattern('backgroundColor', backgroundColor);\n});\nfolder.add(config, 'backgroundOpacity', 0, 1).onChange((backgroundOpacity) => {\n  updatePattern('backgroundOpacity', backgroundOpacity);\n});\nfolder.addColor(config, 'fill').onChange((fill) => {\n  updatePattern('fill', fill);\n});\nfolder.addColor(config, 'stroke').onChange((stroke) => {\n  updatePattern('stroke', stroke);\n});\nfolder.add(config, 'opacity', 0, 1).onChange((opacity) => {\n  updatePattern('opacity', opacity);\n});\nfolder.add(config, 'fillOpacity', 0, 1).onChange((fillOpacity) => {\n  updatePattern('fillOpacity', fillOpacity);\n});\nfolder.add(config, 'strokeOpacity', 0, 1).onChange((strokeOpacity) => {\n  updatePattern('strokeOpacity', strokeOpacity);\n});\nfolder.add(config, 'lineWidth', 0, 20).onChange((lineWidth) => {\n  updatePattern('lineWidth', lineWidth);\n});\nfolder.add(config, 'isStagger').onChange((isStagger) => {\n  updatePattern('isStagger', isStagger);\n});\nfolder.open();\n\nconst transformFolder = gui.addFolder('transform');\ntransformFolder.add(transformConfig, 'scale', 0.1, 5).onChange((scale) => {\n  updatePattern();\n});\ntransformFolder.add(transformConfig, 'rotate', 0, 360).onChange((scale) => {\n  updatePattern();\n});\ntransformFolder.add(transformConfig, 'translateX', 0, 100).onChange((scale) => {\n  updatePattern();\n});\ntransformFolder.add(transformConfig, 'translateY', 0, 100).onChange((scale) => {\n  updatePattern();\n});\ntransformFolder.open();\n",title:{zh:"Squares Pattern",en:"Squares Pattern"},filename:"squares.js",isNew:!1},{id:"piechart",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zf6PSJ4u6yAAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as d3 from 'd3';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport { lines } from '@antv/g-pattern';\n\n/**\n * inspired by sprite.js\n * @see http://spritejs.com/#/en/guide/d3\n *\n * ported from fullstack-d3\n * @see https://codesandbox.io/s/z375662r0p?file=/src/index.js\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst data = [38024.7, 209484.6, 6201.2, 17741.9, 24377.7];\nconst colors = ['#e8c1a0', '#f47560', '#f1e15b', '#e8a838', '#61cdbb'];\nconst width = 600;\nconst sectorArc = d3\n  .arc()\n  .innerRadius(width / 8)\n  .outerRadius(width / 5);\nconst tweens = [\n  function (sectorData) {\n    const currentPath = this.getAttribute('d');\n    return d3.interpolate(currentPath, sectorArc(sectorData));\n  },\n  function (sectorData) {\n    const interpolator = d3.interpolate(this._current, sectorData);\n    this._current = interpolator(0);\n    return (t) => sectorArc(interpolator(t));\n  },\n];\nlet svg;\n\nfunction drawCharts(data) {\n  const pieData = d3.pie().sort(null)(data);\n  const sectors = svg.selectAll('path').data(pieData);\n\n  sectors\n    .enter()\n    .append('path')\n    .attr('stroke', 'black')\n    .attr('fill', (_, i) => {\n      return {\n        image: lines({\n          backgroundColor: colors[i],\n          backgroundOpacity: 0.65,\n          stroke: colors[i],\n        }),\n        repetition: 'repeat',\n        transform: 'rotate(30deg)',\n      };\n    })\n    .attr('d', sectorArc)\n    .property('_current', (d) => d);\n\n  sectors.transition().duration(1000).attrTween('d', tweens[1]);\n}\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const wrapper = d3.select(\n    canvas.document.documentElement, // use GCanvas' document element instead of a real DOM\n  );\n\n  const bounds = wrapper\n    .append('g')\n    .style('transform', `translate(${width / 2}px, ${width / 2}px)`);\n  svg = bounds.append('g');\n\n  drawCharts(data);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.on('afterrender', () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"Pie Chart",en:"Pie Chart"},filename:"piechart.js",isNew:!1}],icon:"",id:"pattern",title:{en:"Pattern",zh:"Pattern"},api:null,childrenKey:"demos",order:1}],childrenKey:"examples"},{id:"event",title:{zh:"事件系统",en:"Event System"},examples:[{demos:[{id:"pinch-with-pointer",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*0cgWSKwc53EAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Circle, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\n\n/**\n * Implements Pinch zoom gestures with PointerEvent\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events/Pinch_zoom_gestures\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 300,\n  height: 300,\n  renderer: canvasRenderer,\n});\n\n// add a circle to canvas\nconst circle = new Circle({\n  style: {\n    cx: 200,\n    cy: 200,\n    r: 200,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\nconst text = new Text({\n  style: {\n    x: -150,\n    y: -100,\n    fill: 'black',\n    text: 'Pinch',\n    wordWrap: true,\n    wordWrapWidth: 160,\n    pointerEvents: 'none',\n  },\n});\ncircle.appendChild(text);\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle);\n\n  // Global vars to cache event state\n  var evCache = new Array();\n  var prevDiff = -1;\n\n  function log(prefix, ev) {\n    text.style.text =\n      prefix +\n      ': pointerID = ' +\n      ev.pointerId +\n      ' ; pointerType = ' +\n      ev.pointerType +\n      ' ; isPrimary = ' +\n      ev.isPrimary;\n  }\n\n  function pointerdown_handler(ev) {\n    // The pointerdown event signals the start of a touch interaction.\n    // This event is cached to support 2-finger gestures\n    evCache.push({\n      pointerId: ev.pointerId,\n      clientX: ev.clientX,\n      clientY: ev.clientY,\n    });\n\n    log('pointerDown', ev);\n  }\n\n  function pointermove_handler(ev) {\n    // This function implements a 2-pointer horizontal pinch/zoom gesture.\n    //\n    // If the distance between the two pointers has increased (zoom in),\n    // the taget element's background is changed to \"pink\" and if the\n    // distance is decreasing (zoom out), the color is changed to \"lightblue\".\n    //\n    // This function sets the target element's border to \"dashed\" to visually\n    // indicate the pointer's target received a move event.\n    log('pointerMove', ev);\n    // ev.target.style.border = 'dashed';\n\n    // Find this event in the cache and update its record with this event\n    for (var i = 0; i < evCache.length; i++) {\n      if (ev.pointerId == evCache[i].pointerId) {\n        evCache[i] = {\n          pointerId: ev.pointerId,\n          clientX: ev.clientX,\n          clientY: ev.clientY,\n        };\n        break;\n      }\n    }\n\n    // If two pointers are down, check for pinch gestures\n    if (evCache.length == 2) {\n      // Calculate the distance between the two pointers\n      var curDiff = Math.abs(evCache[0].clientX - evCache[1].clientX);\n\n      if (prevDiff > 0) {\n        if (curDiff > prevDiff) {\n          // The distance between the two pointers has increased\n          log('Pinch moving OUT -> Zoom in', ev);\n          ev.target.style.fill = 'pink';\n        }\n        if (curDiff < prevDiff) {\n          // The distance between the two pointers has decreased\n          log('Pinch moving IN -> Zoom out', ev);\n          ev.target.style.fill = 'lightblue';\n        }\n      }\n\n      // Cache the distance for the next move event\n      prevDiff = curDiff;\n    }\n  }\n\n  function pointerup_handler(ev) {\n    log(ev.type, ev);\n    // Remove this pointer from the cache and reset the target's\n    // background and border\n    remove_event(ev);\n    ev.target.style.fill = '#1890FF';\n\n    // If the number of pointers down is less than two then reset diff tracker\n    if (evCache.length < 2) prevDiff = -1;\n  }\n\n  function remove_event(ev) {\n    // Remove this event from the target's cache\n    for (var i = 0; i < evCache.length; i++) {\n      if (evCache[i].pointerId == ev.pointerId) {\n        evCache.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  circle.addEventListener('pointerdown', pointerdown_handler);\n  circle.addEventListener('pointermove', pointermove_handler);\n  circle.addEventListener('pointerup', pointerup_handler);\n  circle.addEventListener('pointecancel', pointerup_handler);\n  circle.addEventListener('pointerout', pointerup_handler);\n  circle.addEventListener('pointerleave', pointerup_handler);\n});\n",title:{zh:"使用 PointerEvents 实现 Pinch 手势",en:"Pinch zoom gestures with PointerEvents"},filename:"pinch-with-pointer.js",isNew:!1},{id:"hammer",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*i7SaRaYw0YcAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport Hammer from 'hammerjs';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n  alwaysTriggerPointermoveEvent: true,\n});\n\n// add a circle to canvas\nconst circle = new Circle({\n  id: 'circle',\n  style: {\n    fill: 'rgb(239, 244, 255)',\n    fillOpacity: 1,\n    lineWidth: 1,\n    opacity: 1,\n    r: 100,\n    stroke: 'rgb(95, 149, 255)',\n    strokeOpacity: 1,\n    cursor: 'pointer',\n  },\n});\n\nconst text = new Text({\n  id: 'text',\n  style: {\n    fill: '#000',\n    fillOpacity: 0.9,\n    font: `normal normal normal 12px Avenir, -apple-system, system-ui, \"Segoe UI\", \"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft YaHei\", \"Helvetica Neue\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n    fontFamily: 'Avenir',\n    fontSize: 22,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    lineWidth: 1,\n    opacity: 1,\n    strokeOpacity: 1,\n    text: 'Try to tap/press/pan me',\n    textAlign: 'center',\n    textBaseline: 'middle',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  circle.appendChild(text);\n  canvas.appendChild(circle);\n  circle.setPosition(300, 200);\n\n  // use hammer.js\n  const hammer = new Hammer(circle, {\n    inputClass: Hammer.PointerEventInput,\n  });\n  hammer.on('panleft panright tap press', (ev) => {\n    text.attr('text', `${ev.type} gesture detected.`);\n  });\n\n  canvas.addEventListener('pointermove', (ev) => {\n    console.log(ev.target.nodeName);\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"使用 Hammer.js 手势库",en:"Gesture with Hammer.js"},filename:"hammer.js",isNew:!1},{id:"hammer-zoom",screenshot:"https://mdn.alipayobjects.com/antforest/afts/img/A*sXIXRbjkgVAAAAAAAAAAAAAADrd2AQ/Dec-13-2022%2014-00-07.gif",source:"import { Canvas, CanvasEvent, Image as GImage } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport Hammer from 'hammerjs';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * Pinch Zoom And Pan With HammerJS\n * @see https://bl.ocks.org/redgeoff/6be0295e6ebf18649966d48768398252\n */\n\nconst CANVAS_WIDTH = 300;\nconst CANVAS_HEIGHT = 200;\nconst MIN_SCALE = 1; // 1=scaling when first loaded\nconst MAX_SCALE = 64;\n\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvas = new Canvas({\n  container: 'container',\n  width: CANVAS_WIDTH,\n  height: CANVAS_HEIGHT,\n  renderer: canvasRenderer,\n});\n\n// prevent browser default actions\n// @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action\nconst $canvas = canvas.getContextService().getDomElement();\n$canvas.style.touchAction = 'none';\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  let image;\n\n  let imgWidth = null;\n  let imgHeight = null;\n  let viewportWidth = CANVAS_WIDTH;\n  let viewportHeight = CANVAS_HEIGHT;\n  let scale = null;\n  let lastScale = null;\n  let img = null;\n  let x = 0;\n  let lastX = 0;\n  let y = 0;\n  let lastY = 0;\n  let pinchCenter = null;\n  let pinchCenterOffset = null;\n  let curWidth;\n  let curHeight;\n\n  // Traverse the DOM to calculate the absolute position of an element\n  const absolutePosition = function (el) {\n    const { top, left } = canvas\n      .getContextService()\n      .getDomElement()\n      .getBoundingClientRect();\n    return { x: left, y: top };\n  };\n\n  const restrictScale = (scale) => {\n    if (scale < MIN_SCALE) {\n      scale = MIN_SCALE;\n    } else if (scale > MAX_SCALE) {\n      scale = MAX_SCALE;\n    }\n    return scale;\n  };\n\n  const restrictRawPos = (pos, viewportDim, imgDim) => {\n    if (pos < viewportDim / scale - imgDim) {\n      // too far left/up?\n      pos = viewportDim / scale - imgDim;\n    } else if (pos > 0) {\n      // too far right/down?\n      pos = 0;\n    }\n    return pos;\n  };\n\n  const updateLastPos = (deltaX, deltaY) => {\n    lastX = x;\n    lastY = y;\n  };\n\n  const translate = (deltaX, deltaY) => {\n    // We restrict to the min of the viewport width/height or current width/height as the\n    // current width/height may be smaller than the viewport width/height\n    const newX = restrictRawPos(\n      lastX + deltaX / scale,\n      Math.min(viewportWidth, curWidth),\n      imgWidth,\n    );\n    x = newX;\n\n    const newY = restrictRawPos(\n      lastY + deltaY / scale,\n      Math.min(viewportHeight, curHeight),\n      imgHeight,\n    );\n    y = newY;\n\n    image.setLocalPosition(Math.ceil(newX * scale), Math.ceil(newY * scale));\n  };\n\n  const zoom = (scaleBy) => {\n    scale = restrictScale(lastScale * scaleBy);\n\n    curWidth = imgWidth * scale;\n    curHeight = imgHeight * scale;\n\n    image.style.width = Math.ceil(curWidth);\n    image.style.height = Math.ceil(curHeight);\n\n    // Adjust margins to make sure that we aren't out of bounds\n    translate(0, 0);\n  };\n\n  const rawCenter = (e) => {\n    const pos = absolutePosition(canvas);\n\n    // We need to account for the scroll position\n    const scrollLeft = window.pageXOffset\n      ? window.pageXOffset\n      : document.body.scrollLeft;\n    const scrollTop = window.pageYOffset\n      ? window.pageYOffset\n      : document.body.scrollTop;\n\n    const zoomX = -x + (e.center.x - pos.x + scrollLeft) / scale;\n    const zoomY = -y + (e.center.y - pos.y + scrollTop) / scale;\n\n    return { x: zoomX, y: zoomY };\n  };\n\n  const updateLastScale = function () {\n    lastScale = scale;\n  };\n\n  const zoomAround = (scaleBy, rawZoomX, rawZoomY, doNotUpdateLast) => {\n    // Zoom\n    zoom(scaleBy);\n\n    // New raw center of viewport\n    const rawCenterX = -x + Math.min(viewportWidth, curWidth) / 2 / scale;\n    const rawCenterY = -y + Math.min(viewportHeight, curHeight) / 2 / scale;\n\n    // Delta\n    const deltaX = (rawCenterX - rawZoomX) * scale;\n    const deltaY = (rawCenterY - rawZoomY) * scale;\n\n    // Translate back to zoom center\n    translate(deltaX, deltaY);\n\n    if (!doNotUpdateLast) {\n      updateLastScale();\n      updateLastPos();\n    }\n  };\n\n  const zoomCenter = (scaleBy) => {\n    // Center of viewport\n    const zoomX = -x + Math.min(viewportWidth, curWidth) / 2 / scale;\n    const zoomY = -y + Math.min(viewportHeight, curHeight) / 2 / scale;\n\n    zoomAround(scaleBy, zoomX, zoomY);\n  };\n\n  const zoomIn = () => {\n    zoomCenter(2);\n  };\n\n  const zoomOut = () => {\n    zoomCenter(1 / 2);\n  };\n\n  img = new Image();\n\n  img.src =\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*wnQmQ6j3UGQAAAAAAAAAAAAAARQnAQ';\n  img.crossOrigin = 'Anonymous';\n  img.onload = () => {\n    // 图片加载成功后创建\n    image = new GImage({\n      style: {\n        width: CANVAS_WIDTH,\n        height: (CANVAS_WIDTH * 119) / 960,\n        src: img, // 传入 Image 对象\n      },\n    });\n    canvas.appendChild(image);\n\n    imgWidth = image.style.width;\n    imgHeight = image.style.height;\n    scale = viewportWidth / imgWidth;\n    lastScale = scale;\n    curWidth = imgWidth * scale;\n    curHeight = imgHeight * scale;\n\n    // use hammer.js\n    const hammer = new Hammer(image, {\n      inputClass: Hammer.PointerEventInput,\n    });\n\n    hammer.get('pinch').set({\n      enable: true,\n    });\n\n    hammer.on('pan', function (e) {\n      translate(e.deltaX, e.deltaY);\n    });\n\n    hammer.on('panend', function (e) {\n      updateLastPos();\n    });\n\n    hammer.on('pinch', function (e) {\n      // We only calculate the pinch center on the first pinch event as we want the center to\n      // stay consistent during the entire pinch\n      if (pinchCenter === null) {\n        pinchCenter = rawCenter(e);\n        var offsetX =\n          pinchCenter.x * scale -\n          (-x * scale + Math.min(viewportWidth, curWidth) / 2);\n        var offsetY =\n          pinchCenter.y * scale -\n          (-y * scale + Math.min(viewportHeight, curHeight) / 2);\n        pinchCenterOffset = { x: offsetX, y: offsetY };\n      }\n\n      // When the user pinch zooms, she/he expects the pinch center to remain in the same\n      // relative location of the screen. To achieve this, the raw zoom center is calculated by\n      // first storing the pinch center and the scaled offset to the current center of the\n      // image. The new scale is then used to calculate the zoom center. This has the effect of\n      // actually translating the zoom center on each pinch zoom event.\n      var newScale = restrictScale(scale * e.scale);\n      var zoomX = pinchCenter.x * newScale - pinchCenterOffset.x;\n      var zoomY = pinchCenter.y * newScale - pinchCenterOffset.y;\n      var zoomCenter = { x: zoomX / newScale, y: zoomY / newScale };\n\n      zoomAround(e.scale, zoomCenter.x, zoomCenter.y, true);\n    });\n\n    hammer.on('pinchend', function (e) {\n      updateLastScale();\n      updateLastPos();\n      pinchCenter = null;\n    });\n\n    hammer.on('doubletap', function (e) {\n      const c = rawCenter(e);\n      zoomAround(2, c.x, c.y);\n    });\n\n    // GUI\n    const gui = new lil.GUI({ autoPlace: false });\n    $wrapper.appendChild(gui.domElement);\n    const rendererFolder = gui.addFolder('renderer');\n    const rendererConfig = {\n      renderer: 'canvas',\n    };\n    rendererFolder\n      .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg'])\n      .onChange((renderer) => {\n        canvas.setRenderer(\n          renderer === 'canvas'\n            ? canvasRenderer\n            : renderer === 'webgl'\n            ? webglRenderer\n            : svgRenderer,\n        );\n      });\n    rendererFolder.open();\n    const zoomFolder = gui.addFolder('zoom');\n    const zoomConfig = {\n      zoomIn,\n      zoomOut,\n    };\n    zoomFolder.add(zoomConfig, 'zoomIn');\n    zoomFolder.add(zoomConfig, 'zoomOut');\n  };\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n});\n",title:{zh:"使用 Hammer.js 手势库实现图片缩放",en:"Gesture with Hammer.js"},filename:"hammer-zoom.js",isNew:!1}],icon:"",id:"gesture",title:{en:"Gesture",zh:"手势"},api:null,childrenKey:"demos",order:5},{demos:[{id:"interact",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*9YqIQo56RasAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Rect, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin } from '@antv/g-plugin-css-select';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport interact from 'interactjs';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * use interact.js\n * @see https://interactjs.io/\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// register css select plugin\ncanvasRenderer.registerPlugin(new Plugin());\nwebglRenderer.registerPlugin(new Plugin());\nsvgRenderer.registerPlugin(new Plugin());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  /**\n   * Draggable\n   */\n  const circle = new Circle({\n    className: 'draggable',\n    style: {\n      fill: 'rgb(239, 244, 255)',\n      fillOpacity: 1,\n      lineWidth: 1,\n      opacity: 1,\n      r: 60,\n      stroke: 'rgb(95, 149, 255)',\n      strokeOpacity: 1,\n      zIndex: 1,\n    },\n  });\n  const text = new Text({\n    style: {\n      text: 'Drag me',\n      fontSize: 22,\n      fill: '#000',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    },\n  });\n  circle.appendChild(text);\n  canvas.appendChild(circle);\n  circle.setPosition(100, 100);\n  interact(circle, {\n    context: canvas.document,\n  }).draggable({\n    onmove: function (event) {\n      const { dx, dy } = event;\n      circle.translateLocal(dx, dy);\n    },\n  });\n\n  /**\n   * Resizable\n   */\n  const resizableRect = new Rect({\n    style: {\n      x: 220,\n      y: 260,\n      width: 200,\n      height: 200,\n      fill: '#1890FF',\n    },\n  });\n  const resizableRectText = new Text({\n    style: {\n      text: 'Resize from any edge or corner',\n      fontSize: 16,\n      fill: 'white',\n      textAlign: 'left',\n      textBaseline: 'top',\n      wordWrap: true,\n      wordWrapWidth: 200,\n    },\n  });\n  resizableRectText.translateLocal(0, 20);\n  resizableRect.appendChild(resizableRectText);\n  canvas.appendChild(resizableRect);\n  interact(resizableRect, {\n    context: canvas.document,\n  }).resizable({\n    edges: { top: true, left: true, bottom: true, right: true },\n    onmove: function (event) {\n      resizableRect.translateLocal(event.deltaRect.left, event.deltaRect.top);\n      resizableRect.style.width = event.rect.width;\n      resizableRect.style.height = event.rect.height;\n\n      resizableRectText.style.wordWrapWidth = event.rect.width;\n    },\n  });\n\n  /**\n   * Drop zone\n   */\n  const dropZone = new Rect({\n    style: {\n      x: 100,\n      y: 50,\n      width: 300,\n      height: 200,\n      fill: '#1890FF',\n    },\n  });\n  canvas.appendChild(dropZone);\n  interact(dropZone, {\n    context: canvas.document,\n  }).dropzone({\n    accept: '.draggable',\n    overlap: 0.75,\n    ondragenter: function (event) {\n      text.style.text = 'Dragged in';\n    },\n    ondragleave: function (event) {\n      text.style.text = 'Dragged out';\n    },\n    ondrop: function (event) {\n      text.style.text = 'Dropped';\n    },\n    ondropactivate: function (event) {\n      // add active dropzone feedback\n      event.target.style.fill = '#4e4';\n    },\n    ondropdeactivate: function (event) {\n      event.target.style.fill = '#1890FF';\n    },\n  });\n\n  /**\n   * Gesture\n   */\n  const gesture = new Circle({\n    style: {\n      fill: 'rgb(239, 244, 255)',\n      fillOpacity: 1,\n      lineWidth: 1,\n      opacity: 1,\n      r: 60,\n      stroke: 'rgb(95, 149, 255)',\n      strokeOpacity: 1,\n    },\n  });\n  const gestureText = new Text({\n    style: {\n      text: 'Tap to Change color\\n Doubletap to change size\\n Hold to rotate',\n      fontSize: 12,\n      fill: '#000',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    },\n  });\n  gesture.appendChild(gestureText);\n  canvas.appendChild(gesture);\n  gesture.setPosition(500, 100);\n  let tapped = false;\n  let doubleTapped = false;\n  interact(gesture, {\n    context: canvas.document,\n  })\n    .on('tap', function (event) {\n      event.currentTarget.style.fill = tapped ? 'red' : 'rgb(239, 244, 255)';\n      tapped = !tapped;\n      event.preventDefault();\n    })\n    .on('doubletap', function (event) {\n      event.currentTarget.style.r = doubleTapped ? 100 : 60;\n      doubleTapped = !doubleTapped;\n      event.preventDefault();\n    })\n    .on('hold', function (event) {\n      event.currentTarget.rotateLocal(30);\n    });\n\n  /**\n   * Snapping\n   */\n  const snapRect = new Rect({\n    style: {\n      fill: 'rgb(239, 244, 255)',\n      fillOpacity: 1,\n      lineWidth: 1,\n      opacity: 1,\n      width: 200,\n      height: 200,\n      stroke: 'rgb(95, 149, 255)',\n      strokeOpacity: 1,\n    },\n  });\n  const snapCircle = new Circle({\n    style: {\n      fill: 'rgb(239, 244, 255)',\n      fillOpacity: 1,\n      lineWidth: 1,\n      opacity: 1,\n      r: 30,\n      stroke: 'rgb(95, 149, 255)',\n      strokeOpacity: 1,\n    },\n  });\n  const snapText = new Text({\n    style: {\n      text: 'Drag me',\n      fontSize: 12,\n      fill: '#000',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    },\n  });\n  snapRect.appendChild(snapCircle);\n  snapCircle.appendChild(snapText);\n  canvas.appendChild(snapRect);\n  snapRect.setPosition(0, 260);\n  snapCircle.translateLocal(150, 150);\n  interact(snapCircle, {\n    context: canvas.document,\n  }).draggable({\n    modifiers: [\n      interact.modifiers.restrict({\n        restriction: snapCircle.parentNode,\n        elementRect: { top: 0, left: 0, bottom: 1, right: 1 },\n        endOnly: true,\n      }),\n    ],\n    inertia: true,\n    onmove: function (event) {\n      const { dx, dy } = event;\n      snapCircle.translateLocal(dx, dy);\n    },\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"使用 Interact.js 拖拽库",en:"Drag'n'Drop with Interact.js"},filename:"interact.js",isNew:!1},{id:"drag",screenshot:"https://mdn.alipayobjects.com/antforest/afts/img/A*Z_xHTIB2l2sAAAAAAAAAAAAADrd2AQ/Dec-13-2022%2014-03-24.gif",source:"import { Canvas, CanvasEvent, Image } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * Drag'n'Drop with PointerEvents\n * @see https://javascript.info/mouse-drag-and-drop\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst gate = new Image({\n  className: 'droppable',\n  style: {\n    width: 200,\n    height: 100,\n    src: 'https://en.js.cx/clipart/soccer-gate.svg',\n  },\n});\n\nconst ball = new Image({\n  style: {\n    x: 300,\n    y: 200,\n    width: 100,\n    height: 100,\n    src: 'https://en.js.cx/clipart/ball.svg',\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(gate);\n  canvas.appendChild(ball);\n\n  ball.addEventListener('pointerdown', function (event) {\n    let shiftX = event.clientX - ball.getBoundingClientRect().left;\n    let shiftY = event.clientY - ball.getBoundingClientRect().top;\n\n    moveAt(event.canvasX, event.canvasY);\n\n    function moveAt(canvasX, canvasY) {\n      ball.style.x = canvasX - shiftX;\n      ball.style.y = canvasY - shiftY;\n    }\n\n    async function onMouseMove(event) {\n      moveAt(event.canvasX, event.canvasY);\n    }\n\n    canvas.document.addEventListener('pointermove', onMouseMove);\n\n    ball.addEventListener(\n      'pointerup',\n      function () {\n        canvas.document.removeEventListener('pointermove', onMouseMove);\n      },\n      { once: true },\n    );\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"使用 PointerEvents 实现拖拽",en:"Drag with PointerEvents"},filename:"drag.js",isNew:!1}],icon:"",id:"dragndrop",title:{en:"Drag'n'Drop",zh:"拖放"},api:null,childrenKey:"demos",order:6},{demos:[{id:"circle",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*xJB7TY68IVUAAAAAAAAAAABkARQnAQ",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// add a circle to canvas\nconst circle = new Circle({\n  style: {\n    cx: 300,\n    cy: 200,\n    r: 100,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle);\n\n  circle.addEventListener('pointerenter', function (e) {\n    console.log(this, e.currentTarget);\n    circle.style.fill = '#2FC25B';\n  });\n\n  circle.addEventListener('pointerleave', () => {\n    console.log(this);\n    circle.style.fill = '#1890FF';\n  });\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg'])\n    .onChange((renderer) => {\n      canvas.setRenderer(\n        renderer === 'canvas'\n          ? canvasRenderer\n          : renderer === 'webgl'\n          ? webglRenderer\n          : svgRenderer,\n      );\n    });\n  rendererFolder.open();\n\n  const circleFolder = gui.addFolder('circle');\n  const circleConfig = {\n    interactive: true,\n    visible: true,\n  };\n  circleFolder.add(circleConfig, 'visible').onChange((visible) => {\n    if (visible) {\n      circle.style.visibility = 'visible';\n      // circle.show();\n    } else {\n      circle.style.visibility = 'hidden';\n      // circle.hide();\n    }\n  });\n  circleFolder.add(circleConfig, 'interactive').onChange((interactive) => {\n    circle.interactive = interactive;\n  });\n  circleFolder.open();\n});\n",title:{zh:"单个圆拾取",en:"Single circle picking"},filename:"circle.js",isNew:!1},{id:"circles",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*dc0NTrzOwHYAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\nconst camera = canvas.getCamera();\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  for (let i = 0; i < 1000; i++) {\n    const circle = new Circle({\n      style: {\n        cx: Math.random() * 600,\n        cy: Math.random() * 500,\n        r: 20 + Math.random() * 10,\n        fill: '#1890FF',\n        stroke: '#F04864',\n        lineWidth: 4,\n      },\n    });\n\n    canvas.appendChild(circle);\n\n    circle.on('mouseenter', () => {\n      circle.attr('fill', '#2FC25B');\n    });\n\n    circle.on('mouseleave', () => {\n      circle.attr('fill', '#1890FF');\n    });\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  camera.rotate(0, 0, 0.1);\n\n  console.log(canvas.getStats());\n});\n\n// GUI\nlet currentRenderer = canvasRenderer;\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\n\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst folder0 = gui.addFolder('dirty rectangle');\nconst dirtyRectangleConfig = {\n  enable: true,\n};\nfolder0.add(dirtyRectangleConfig, 'enable').onChange((enable) => {\n  currentRenderer.setConfig({\n    enableDirtyRectangleRendering: enable,\n  });\n});\nfolder0.open();\n",title:{zh:"多个圆拾取",en:"Multiple circle picking"},filename:"circles.js",isNew:!1},{id:"shapes",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*D7xLQp4L4VoAAAAAAAAAAAAAARQnAQ",source:"import {\n  Canvas,\n  CanvasEvent,\n  Circle,\n  Ellipse,\n  Image,\n  Line,\n  Path,\n  Polygon,\n  Polyline,\n  Rect,\n  Text,\n} from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst circle = new Circle({\n  style: {\n    r: 50,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    cursor: 'pointer',\n  },\n});\nconst ellipse = new Ellipse({\n  style: {\n    rx: 60,\n    ry: 80,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    cursor: 'pointer',\n  },\n});\nconst rect = new Rect({\n  style: {\n    width: 80,\n    height: 60,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    radius: 8,\n    cursor: 'pointer',\n  },\n});\nconst image = new Image({\n  style: {\n    width: 100,\n    height: 100,\n    src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n    cursor: 'pointer',\n  },\n});\nconst line = new Line({\n  style: {\n    x1: 0,\n    y1: 0,\n    x2: 200,\n    y2: 0,\n    stroke: '#1890FF',\n    lineWidth: 10,\n    cursor: 'pointer',\n  },\n});\nconst polyline = new Polyline({\n  style: {\n    points: [\n      [50, 50],\n      [100, 50],\n      [100, 100],\n      [150, 100],\n      [150, 150],\n      [200, 150],\n      [200, 200],\n      [250, 200],\n    ],\n    stroke: '#1890FF',\n    lineWidth: 10,\n    cursor: 'pointer',\n  },\n});\nconst path = new Path({\n  style: {\n    d:\n      'M 100,300' +\n      'l 50,-25' +\n      'a25,25 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'a25,50 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'a25,75 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'a25,100 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'l 0, 200,' +\n      'z',\n    lineWidth: 10,\n    lineJoin: 'round',\n    stroke: '#1890FF',\n    cursor: 'pointer',\n  },\n});\nconst polygon = new Polygon({\n  style: {\n    points: [\n      [200, 100],\n      [400, 100],\n      [400 + 200 * Math.sin(Math.PI / 6), 100 + 200 * Math.cos(Math.PI / 6)],\n      [400, 100 + 200 * Math.cos(Math.PI / 6) * 2],\n      [200, 100 + 200 * Math.cos(Math.PI / 6) * 2],\n      [200 - 200 * Math.sin(Math.PI / 6), 100 + 200 * Math.cos(Math.PI / 6)],\n    ],\n    stroke: '#1890FF',\n    fill: '#1890FF',\n    lineWidth: 10,\n    cursor: 'pointer',\n  },\n});\nconst text = new Text({\n  style: {\n    fontFamily: 'PingFang SC',\n    text: '这是测试文本',\n    fontSize: 40,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 5,\n    cursor: 'pointer',\n  },\n});\nconst clippedText = new Text({\n  style: {\n    fontFamily: 'PingFang SC',\n    text: '这是测试文本',\n    fontSize: 40,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 5,\n    clipPath: new Circle({\n      style: {\n        cx: 20,\n        cy: -10,\n        r: 20,\n      },\n    }),\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  circle.setPosition(100, 100);\n  canvas.appendChild(circle);\n\n  ellipse.setPosition(220, 100);\n  canvas.appendChild(ellipse);\n\n  rect.setPosition(300, 100);\n  canvas.appendChild(rect);\n\n  image.setPosition(400, 100);\n  canvas.appendChild(image);\n\n  line.setPosition(100, 200);\n  canvas.appendChild(line);\n\n  polyline.setPosition(0, 200);\n  polyline.rotate(20);\n  canvas.appendChild(polyline);\n\n  path.translate(60, 100);\n  path.rotate(20);\n  path.scale(0.5);\n  canvas.appendChild(path);\n\n  polygon.setPosition(340, 200);\n  polygon.scale(0.3);\n  canvas.appendChild(polygon);\n\n  text.setPosition(160, 450);\n  canvas.appendChild(text);\n\n  clippedText.setPosition(160, 500);\n  canvas.appendChild(clippedText);\n\n  circle.addEventListener('mouseenter', () => {\n    circle.style.fill = '#2FC25B';\n  });\n  circle.addEventListener('mouseleave', () => {\n    circle.style.fill = '#1890FF';\n  });\n  ellipse.addEventListener('mouseenter', () => {\n    ellipse.style.fill = '#2FC25B';\n  });\n  ellipse.addEventListener('mouseleave', () => {\n    ellipse.style.fill = '#1890FF';\n  });\n  rect.addEventListener('mouseenter', () => {\n    rect.style.fill = '#2FC25B';\n  });\n  rect.addEventListener('mouseleave', () => {\n    rect.style.fill = '#1890FF';\n  });\n  line.addEventListener('mouseenter', () => {\n    line.style.stroke = '#2FC25B';\n  });\n  line.addEventListener('mouseleave', () => {\n    line.style.stroke = '#1890FF';\n  });\n  polyline.addEventListener('mouseenter', () => {\n    polyline.style.stroke = '#2FC25B';\n  });\n  polyline.addEventListener('mouseleave', () => {\n    polyline.style.stroke = '#1890FF';\n  });\n  path.addEventListener('mouseenter', () => {\n    path.style.stroke = '#2FC25B';\n  });\n  path.addEventListener('mouseleave', () => {\n    path.style.stroke = '#1890FF';\n  });\n  polygon.addEventListener('mouseenter', () => {\n    polygon.style.stroke = '#2FC25B';\n  });\n  polygon.addEventListener('mouseleave', () => {\n    polygon.style.stroke = '#1890FF';\n  });\n  text.addEventListener('mouseenter', () => {\n    text.attr('stroke', '#2FC25B');\n  });\n  text.addEventListener('mouseleave', () => {\n    text.attr('stroke', '#F04864');\n  });\n  clippedText.addEventListener('mouseenter', () => {\n    clippedText.attr('stroke', '#2FC25B');\n  });\n  clippedText.addEventListener('mouseleave', () => {\n    clippedText.attr('stroke', '#F04864');\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener('afterrender', () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"多种图形拾取",en:"Multiple shapes picking"},filename:"shapes.js",isNew:!1}],icon:"",id:"picking",title:{en:"Picking",zh:"拾取"},api:null,childrenKey:"demos",order:7},{demos:[{id:"delegate",source:"import { Canvas, CanvasEvent, Group, Rect, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * 实现事件委托，点击两个矩形，在控制台输出：\n * * target\n * * currentTarget\n * * clientX/Y\n * * composedPath() 事件传播路径\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const ul = new Group({\n    id: 'ul',\n  });\n  const li1 = new Rect({\n    id: 'li1',\n    style: {\n      x: 200,\n      y: 100,\n      width: 300,\n      height: 100,\n      fill: '#1890FF',\n    },\n  });\n  const text = new Text({\n    style: {\n      x: 150,\n      y: 50,\n      text: 'Click me!',\n      fontSize: 22,\n      fill: '#000',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    },\n  });\n  li1.appendChild(text);\n  const li2 = new Rect({\n    id: 'li2',\n    style: {\n      x: 200,\n      y: 300,\n      width: 300,\n      height: 100,\n      fill: '#1890FF',\n    },\n  });\n\n  canvas.appendChild(ul);\n  ul.appendChild(li1);\n  ul.appendChild(li2);\n\n  ul.addEventListener('click', (e) => {\n    console.log('currentTarget', e.currentTarget);\n    console.log('target', e.target);\n    console.log('clientX', e.clientX);\n    console.log('clientY', e.clientY);\n    console.log('x', e.x);\n    console.log('y', e.y);\n    console.log('path', e.composedPath());\n  });\n\n  canvas.addEventListener('click', (e) => {\n    console.log('currentTarget', e.currentTarget);\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"事件委托",en:"Delegate"},filename:"delegate.js",isNew:!1},{id:"custom",source:"import { Canvas, CanvasEvent, CustomEvent, Group, Rect, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a custom event\nconst event = new CustomEvent('build', { detail: { prop1: 'xx' } });\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const ul = new Group({\n    id: 'ul',\n  });\n  const li1 = new Rect({\n    id: 'li1',\n    style: {\n      x: 200,\n      y: 100,\n      width: 300,\n      height: 100,\n      fill: '#1890FF',\n    },\n  });\n  const text = new Text({\n    style: {\n      x: 150,\n      y: 50,\n      text: 'Click me!',\n      fontSize: 22,\n      fill: '#000',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    },\n  });\n  li1.appendChild(text);\n\n  const li2 = new Rect({\n    id: 'li2',\n    style: {\n      x: 200,\n      y: 300,\n      width: 300,\n      height: 100,\n      fill: '#1890FF',\n    },\n  });\n\n  canvas.appendChild(ul);\n  ul.appendChild(li1);\n  ul.appendChild(li2);\n\n  li1.addEventListener('click', (e) => {\n    // dispatch my custom event!\n    li1.dispatchEvent(event);\n\n    // @deprecated\n    // li1.emit('build', { prop1: 'xx' });\n  });\n\n  // delegate to parent\n  ul.addEventListener('build', (e) => {\n    console.log(e.target); // circle\n    console.log(e.detail); // { prop1: 'xx' }\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"触发自定义事件",en:"Dispatch custom event"},filename:"custom.js",isNew:!1},{id:"deprecated-delegate",source:"import { Canvas, CanvasEvent, Group, Rect, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * 实现事件委托，点击两个矩形，在控制台输出：\n * * target\n * * currentTarget\n * * clientX/Y\n * * composedPath() 事件传播路径\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const ul = new Group({\n    id: 'ul',\n  });\n  const li1 = new Rect({\n    id: 'li1',\n    name: 'test-name',\n    style: {\n      x: 200,\n      y: 100,\n      width: 300,\n      height: 100,\n      fill: '#1890FF',\n    },\n  });\n  const text = new Text({\n    style: {\n      x: 150,\n      y: 50,\n      text: 'Click me!',\n      fontSize: 22,\n      fill: '#000',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    },\n  });\n  li1.appendChild(text);\n  const li2 = new Rect({\n    id: 'li2',\n    name: 'test-name',\n    style: {\n      x: 200,\n      y: 300,\n      width: 300,\n      height: 100,\n      fill: '#1890FF',\n    },\n  });\n\n  canvas.appendChild(ul);\n  ul.appendChild(li1);\n  ul.appendChild(li2);\n\n  ul.addEventListener('test-name:click', (e) => {\n    console.log('target', e.target);\n    console.log('path', e.composedPath());\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"兼容旧版的事件委托写法",en:"Delegate with event's name"},filename:"deprecated-delegate.js",isNew:!1},{id:"builtin",source:"import { Canvas, CanvasEvent, Circle, ElementEvent, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(ElementEvent.INSERTED, (e) => {\n  console.log('inserted', e.target);\n});\ncanvas.addEventListener(ElementEvent.MOUNTED, (e) => {\n  console.log('mounted', e.target);\n});\ncanvas.addEventListener(ElementEvent.UNMOUNTED, (e) => {\n  console.log('unmounted', e.target);\n});\ncanvas.addEventListener(ElementEvent.REMOVED, (e) => {\n  console.log('removed', e.target);\n});\ncanvas.addEventListener(ElementEvent.DESTROY, (e) => {\n  console.log('destroyed', e.target);\n});\n\n// observe root node\n// const observer = new MutationObserver(() => {});\n// observer.observe(canvas.document.documentElement, { childList: true });\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst circleFolder = gui.addFolder('circle');\nlet circles = [];\nlet removed = [];\nlet counter = 0;\nconst circleConfig = {\n  insert: () => {\n    let id = counter++;\n    const circle = new Circle({\n      id,\n      style: {\n        r: 40,\n        fill: '#1890FF',\n        stroke: '#F04864',\n        lineWidth: 4,\n        cursor: 'pointer',\n      },\n    });\n    const text = new Text({\n      id: 'text',\n      style: {\n        fill: '#000',\n        text: '' + id,\n        textAlign: 'center',\n        textBaseline: 'middle',\n      },\n    });\n    circle.appendChild(text);\n\n    circles.push(circle);\n    canvas.appendChild(circle);\n    circle.setPosition(300 + (circles.length - 1) * 20, 250);\n\n    // const records = observer.takeRecords();\n    // console.log(records);\n  },\n  remove: () => {\n    const circle = circles.pop();\n    if (circle) {\n      removed.push(circle);\n      // remove but don't destroy, can re-insert it later\n      circle.remove(false);\n    }\n  },\n  're-insert': () => {\n    const circle = removed.pop();\n    if (circle) {\n      circles.push(circle);\n      canvas.appendChild(circle);\n      // const records = observer.takeRecords();\n      // console.log(records);\n    }\n  },\n  destroy: () => {\n    const circle = circles.pop();\n    if (circle) {\n      circle.destroy();\n    }\n  },\n};\ncircleFolder.add(circleConfig, 'insert');\ncircleFolder.add(circleConfig, 'remove');\ncircleFolder.add(circleConfig, 're-insert');\ncircleFolder.add(circleConfig, 'destroy');\ncircleFolder.open();\n",title:{zh:"内置场景图事件",en:"SceneGraph Events"},filename:"builtin.js",isNew:!1},{id:"mutation-observer",source:"import { Canvas, CanvasEvent, Circle, MutationObserver } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst circle = new Circle({\n  style: {\n    cx: 300,\n    cy: 250,\n    r: 100,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle);\n\n  circle.addEventListener('mouseenter', () => {\n    circle.attr('fill', '#2FC25B');\n  });\n\n  circle.addEventListener('mouseleave', () => {\n    circle.attr('fill', '#1890FF');\n  });\n\n  // use mutation observer\n  const config = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    attributeOldValue: true,\n  };\n  const observer = new MutationObserver((mutationsList, observer) => {\n    for (const mutation of mutationsList) {\n      console.log(mutation);\n      if (mutation.type === 'attributes') {\n      }\n    }\n  });\n  observer.observe(circle, config);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nlet currentRenderer = canvasRenderer;\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg'])\n  .onChange((renderer) => {\n    currentRenderer =\n      renderer === 'canvas'\n        ? canvasRenderer\n        : renderer === 'webgl'\n        ? webglRenderer\n        : svgRenderer;\n    canvas.setRenderer(currentRenderer);\n  });\nrendererFolder.open();\n",title:{zh:"使用 MutationObserver",en:"Use MutationObserver"},filename:"mutation-observer.js",isNew:!1},{id:"touch",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n  supportsPointerEvents: false,\n  useNativeClickEvent: true,\n});\n\n// add a circle to canvas\nconst circle = new Circle({\n  style: {\n    cx: 300,\n    cy: 200,\n    r: 100,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle);\n\n  circle.addEventListener('click', function (e) {\n    console.log('click');\n  });\n\n  circle.addEventListener('touchstart', function (e) {\n    console.log('touchstart');\n    circle.style.fill = '#2FC25B';\n  });\n\n  circle.addEventListener('touchmove', (e) => {\n    console.log('touchmove');\n  });\n\n  circle.addEventListener('touchend', function (e) {\n    console.log('touchend');\n    circle.style.fill = '#1890FF';\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"TouchEvents",en:"TouchEvents"},filename:"touch.js",isNew:!1},{id:"pointerupoutside",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\n\n/**\n * Trigger pointerdown on circle then trigger pointerupoutside on canvas.\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// create a circle\nconst circle = new Circle({\n  style: {\n    cx: 300,\n    cy: 200,\n    r: 100,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    shadowColor: 'black',\n    shadowBlur: 20,\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // add a circle to canvas\n  canvas.appendChild(circle);\n});\n\ncircle.addEventListener('pointerupoutside', () => {\n  console.log('pointerupoutside');\n});\n",title:{zh:"pointerupoutside 事件",en:"pointerupoutside"},filename:"pointerupoutside.js",isNew:!1},{id:"use-native-click",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\n\n/**\n * Listen to native click event in current environment instead of pointerup/down.\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n  useNativeClickEvent: true, //\n});\n\n// create a circle\nconst circle = new Circle({\n  style: {\n    cx: 300,\n    cy: 200,\n    r: 100,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    shadowColor: 'black',\n    shadowBlur: 20,\n    cursor: 'pointer',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // add a circle to canvas\n  canvas.appendChild(circle);\n});\n\ncanvas.addEventListener('click', (e) => {\n  if (e.target === circle) {\n    circle.style.fill = '#F04864';\n  } else {\n    circle.style.fill = '#1890FF';\n  }\n});\n",title:{zh:"监听原生 click 事件",en:"Listen to native click event"},filename:"use-native-click.js",isNew:!1}],icon:"",id:"event-others",title:{en:"Others",zh:"其它"},api:null,childrenKey:"demos",order:100}],childrenKey:"examples"},{id:"animation",title:{zh:"动画",en:"Animation"},examples:[{demos:[{id:"easing",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*9y3_TIoOUPMAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Image } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * ported from https://animista.net/play/entrances/scale-in\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst image = new Image({\n  style: {\n    x: 200,\n    y: 100,\n    width: 200,\n    height: 200,\n    transformOrigin: 'center',\n    src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n  },\n});\n\nlet animation;\nlet timing;\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(image);\n\n  animation = image.animate(\n    [{ transform: 'rotate(0)' }, { transform: 'rotate(360deg)' }],\n    {\n      duration: 1500,\n      iterations: Infinity,\n      // delay: 3000,\n      // direction: 'alternate',\n    },\n  );\n  timing = animation.effect.getTiming();\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst animationFolder = gui.addFolder('animation');\nconst animationConfig = {\n  easing: 'linear',\n  playbackRate: 1,\n};\nanimationFolder\n  .add(animationConfig, 'easing', [\n    'linear',\n    'ease',\n    'ease-in',\n    'ease-out',\n    'ease-in-out',\n    'ease-out-in',\n    'ease-in-quad',\n    'ease-out-quad',\n    'ease-in-out-quad',\n    'ease-out-in-quad',\n\n    'ease-in-cubic',\n    'ease-out-cubic',\n    'ease-in-out-cubic',\n    'ease-out-in-cubic',\n\n    'ease-in-quart',\n    'ease-out-quart',\n    'ease-in-out-quart',\n    'ease-out-in-quart',\n\n    'ease-in-quint',\n    'ease-out-quint',\n    'ease-in-out-quint',\n    'ease-out-in-quint',\n\n    'ease-in-expo',\n    'ease-out-expo',\n    'ease-in-out-expo',\n    'ease-out-in-expo',\n\n    'ease-in-sine',\n    'ease-out-sine',\n    'ease-in-out-sine',\n    'ease-out-in-sine',\n\n    'ease-in-circ',\n    'ease-out-circ',\n    'ease-in-out-circ',\n    'ease-out-in-circ',\n\n    'ease-in-back',\n    'ease-out-back',\n    'ease-in-out-back',\n    'ease-out-in-back',\n\n    'ease-in-bounce',\n    'ease-out-bounce',\n    'ease-in-out-bounce',\n    'ease-out-in-bounce',\n\n    'ease-in-elastic',\n    'ease-out-elastic',\n    'ease-in-out-elastic',\n    'ease-out-in-elastic',\n\n    'cubic-bezier(0.47, 0, 0.745, 0.715)',\n\n    'spring',\n    'spring-in',\n    'spring-out',\n    'spring-in-out',\n    'spring-out-in',\n\n    'custom',\n  ])\n  .onChange((type) => {\n    if (type !== 'custom') {\n      timing.easing = type;\n    } else {\n      const count = 4;\n      const pos = 0;\n      timing.easingFunction = (x) => {\n        if (x >= 1) {\n          return 1;\n        }\n        const stepSize = 1 / count;\n        x += pos * stepSize;\n        return x - (x % stepSize);\n      };\n    }\n  });\nanimationFolder\n  .add(animationConfig, 'playbackRate', 0, 5)\n  .onChange((playbackRate) => {\n    animation.updatePlaybackRate(playbackRate);\n  });\nanimationFolder.open();\n",title:{zh:"缓动函数",en:"Easing"},filename:"easing.js",isNew:!1},{id:"lifecycle",screenshot:"https://gw.alipayobjects.com/zos/raptor/1669864923715/Dec-01-2022%25252011-21-31.gif",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * ported from https://animista.net/play/entrances/scale-in\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst circle = new Circle({\n  style: {\n    cx: 200,\n    cy: 200,\n    r: 60,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    transformOrigin: 'center',\n  },\n});\n\nlet animation;\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle);\n\n  animation = circle.animate(\n    [{ transform: 'scale(1)' }, { transform: 'scale(2)' }],\n    {\n      duration: 500,\n      easing: 'cubic-bezier(0.250, 0.460, 0.450, 0.940)',\n    },\n  );\n\n  // get triggered when animation finished\n  animation.onfinish = (e) => {\n    console.log('finish!', e.target, e.target.playState);\n  };\n  animation.finished.then(() => {\n    console.log('finish promise resolved');\n  });\n  // get triggered at the end of each frame in a running animation\n  animation.onframe = (e) => {\n    console.log(e.target.effect.getComputedTiming().progress);\n    console.log('frame ended!', e.target, e.target.playState);\n  };\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst animationFolder = gui.addFolder('animation');\nconst animationConfig = {\n  play: () => {\n    animation.play();\n  },\n  pause: () => {\n    animation.pause();\n  },\n  reverse: () => {\n    animation.reverse();\n  },\n  finish: () => {\n    animation.finish();\n  },\n};\nanimationFolder.add(animationConfig, 'play').name('Play');\nanimationFolder.add(animationConfig, 'pause').name('Pause');\nanimationFolder.add(animationConfig, 'reverse').name('Reverse');\nanimationFolder.add(animationConfig, 'finish').name('Finish');\nanimationFolder.open();\n",title:{zh:"动画生命周期控制方法",en:"Lifecycle of animation"},filename:"lifecycle.js",isNew:!1},{id:"delay",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*u4RCSrwBbogAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst rect = new Rect({\n  style: {\n    x: 100,\n    y: 200,\n    width: 50,\n    height: 100,\n    fill: '#1890FF',\n  },\n});\nconst rect2 = new Rect({\n  style: {\n    x: 200,\n    y: 200,\n    width: 50,\n    height: 100,\n    fill: '#1890FF',\n  },\n});\nconst rect3 = new Rect({\n  style: {\n    x: 300,\n    y: 200,\n    width: 50,\n    height: 100,\n    fill: '#1890FF',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(rect);\n  canvas.appendChild(rect2);\n  canvas.appendChild(rect3);\n\n  rect.animate(\n    [{ transform: 'scale(0.0001, 1)' }, { transform: 'scale(1, 1)' }],\n    {\n      duration: 1000,\n      //   delay: 0,\n      fill: 'both',\n    },\n  );\n  rect2.animate(\n    [{ transform: 'scale(0.0001, 1)' }, { transform: 'scaleY(1)' }],\n    {\n      duration: 1000,\n      delay: 1000,\n      fill: 'both',\n    },\n  );\n  rect3.animate(\n    [{ transform: 'scale(0.0001, 1)' }, { transform: 'scale(1, 1)' }],\n    {\n      duration: 1000,\n      delay: 2000,\n      fill: 'both',\n    },\n  );\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"使用 delay 属性",en:"Use delay"},filename:"delay.js",isNew:!1},{id:"current-time",screenshot:"https://gw.alipayobjects.com/zos/raptor/1669864987249/Dec-01-2022%25252011-22-51.gif",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst circle = new Circle({\n  style: {\n    cx: 200,\n    cy: 200,\n    r: 60,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\n\nlet animation;\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle);\n\n  animation = circle.animate(\n    [{ transform: 'translateX(0)' }, { transform: 'translateX(200px)' }],\n    {\n      duration: 2500,\n      easing: 'cubic-bezier(0.250, 0.460, 0.450, 0.940)',\n      iterations: Infinity,\n      direction: 'alternate',\n    },\n  );\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n  currentTime: 0,\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder\n  .add(rendererConfig, 'currentTime', 0, 2500)\n  .onChange((currentTime) => {\n    animation.currentTime = currentTime;\n  });\nrendererFolder.open();\n",title:{zh:"使用 currentTime 属性",en:"Use currentTime"},filename:"current-time.js",isNew:!1},{id:"sequence",screenshot:"https://gw.alipayobjects.com/zos/raptor/1669865042797/Dec-01-2022%25252011-23-50.gif",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst circle = new Circle({\n  style: {\n    cx: 200,\n    cy: 200,\n    r: 60,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    shadowColor: 'black',\n    shadowBlur: 30,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle);\n\n  (async () => {\n    const moveRight = circle.animate(\n      [\n        {\n          transform: 'translate(0)',\n        },\n        {\n          transform: 'translate(100px)',\n        },\n      ],\n      {\n        duration: 1000,\n        easing: 'cubic-bezier(0.250, 0.460, 0.450, 0.940)',\n        fill: 'both',\n      },\n    );\n    await moveRight.finished;\n\n    const moveDown = circle.animate(\n      [\n        {\n          transform: 'translate(100px)',\n        },\n        {\n          transform: 'translate(100px, 100px)',\n        },\n      ],\n      {\n        duration: 1000,\n        easing: 'cubic-bezier(0.250, 0.460, 0.450, 0.940)',\n        fill: 'both',\n      },\n    );\n    await moveDown.finished;\n\n    const moveLeft = circle.animate(\n      [\n        {\n          transform: 'translate(100px, 100px)',\n        },\n        {\n          transform: 'translate(0, 100px)',\n        },\n      ],\n      {\n        duration: 1000,\n        easing: 'cubic-bezier(0.250, 0.460, 0.450, 0.940)',\n        fill: 'both',\n      },\n    );\n    await moveLeft.finished;\n\n    const moveUp = circle.animate(\n      [\n        {\n          transform: 'translate(0, 100px)',\n        },\n        {\n          transform: 'translate(0, 0)',\n        },\n      ],\n      {\n        duration: 1000,\n        easing: 'cubic-bezier(0.250, 0.460, 0.450, 0.940)',\n        fill: 'both',\n      },\n    );\n    await moveUp.finished;\n  })();\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"连续动画",en:"Sequence of animations"},filename:"sequence.js",isNew:!1},{id:"multiple-attributes",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*dZ03S7gEjz8AAAAAAAAAAABkARQnAQ",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * ported from https://animista.net/play/entrances/scale-in\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst circle = new Circle({\n  style: {\n    cx: 200,\n    cy: 200,\n    r: 60,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    shadowColor: 'black',\n    shadowBlur: 30,\n  },\n});\n\nlet animation;\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle);\n\n  animation = circle.animate(\n    [\n      {\n        transform: 'scale(1)',\n        fill: '#1890FF',\n        stroke: '#F04864',\n        opacity: 1,\n        shadowColor: 'black',\n        shadowBlur: 30,\n        x: 200,\n      },\n      {\n        transform: 'scale(2)',\n        fill: 'red',\n        stroke: '#1890FF',\n        opacity: 0.8,\n        shadowColor: 'red',\n        shadowBlur: 0,\n        x: 400,\n      },\n    ],\n    {\n      duration: 1500,\n      iterations: Infinity,\n      easing: 'cubic-bezier(0.250, 0.460, 0.450, 0.940)',\n    },\n  );\n\n  // get triggerred when animation finished\n  animation.onfinish = (e) => {\n    console.log('finish!', e.target, e.target.playState);\n  };\n  animation.finished.then(() => {\n    console.log('finish promise resolved');\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst animationFolder = gui.addFolder('animation');\nconst animationConfig = {\n  play: () => {\n    animation.play();\n  },\n  pause: () => {\n    animation.pause();\n  },\n  reverse: () => {\n    animation.reverse();\n  },\n  finish: () => {\n    animation.finish();\n  },\n};\nanimationFolder.add(animationConfig, 'play').name('Play');\nanimationFolder.add(animationConfig, 'pause').name('Pause');\nanimationFolder.add(animationConfig, 'reverse').name('Reverse');\nanimationFolder.add(animationConfig, 'finish').name('Finish');\nanimationFolder.open();\n",title:{zh:"可应用动画的属性",en:"Animatable attributes"},filename:"multiple-attributes.js",isNew:!1},{id:"visibility",screenshot:"https://gw.alipayobjects.com/zos/raptor/1669865094705/Dec-01-2022%25252011-24-46.gif",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst circle = new Circle({\n  style: {\n    cx: 200,\n    cy: 200,\n    r: 60,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    visibility: 'hidden',\n  },\n});\n\nlet animation;\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle);\n\n  animation = circle.animate(\n    [\n      { visibility: 'hidden', offset: 0.5 },\n      { visibility: 'visible', offset: 1 },\n    ],\n    {\n      duration: 1000,\n      iterations: Infinity,\n    },\n  );\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n  currentTime: 0,\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder\n  .add(rendererConfig, 'currentTime', 0, 2500)\n  .onChange((currentTime) => {\n    animation.currentTime = currentTime;\n  });\nrendererFolder.open();\n",title:{zh:"对 visibility 属性应用动画",en:"Interpolate visibility"},filename:"visibility.js",isNew:!1},{id:"onframe",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*vatoRoHF64MAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst rect = new Rect({\n  style: {\n    width: 100,\n    height: 40,\n    fill: 'red',\n  },\n});\n\nconst circle1 = new Circle({\n  style: {\n    cy: 20,\n    r: 20,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\nconst circle2 = new Circle({\n  style: {\n    cx: 100,\n    cy: 20,\n    r: 20,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\n\nrect.setPosition(100, 100);\nrect.appendChild(circle1);\nrect.appendChild(circle2);\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(rect);\n\n  const animation = rect.animate(\n    [\n      {\n        width: 100,\n      },\n      {\n        width: 400,\n      },\n    ],\n    {\n      duration: 1500,\n      iterations: Infinity,\n    },\n  );\n  animation.onframe = () => {\n    // use parsed value here\n    circle2.style.cx = rect.parsedStyle.width;\n  };\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"onframe 回调函数",en:"Use onframe callback"},filename:"onframe.js",isNew:!1}],icon:"",id:"animation-basic",title:{en:"Basic Options",zh:"基本配置"},api:null,childrenKey:"demos",order:10},{demos:[{id:"offset-path",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*nk1YSrbkQPMAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Line, Path, Polyline } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * ported from https://animista.net/play/entrances/scale-in\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst offsetPathLine = new Line({\n  style: {\n    x1: 100,\n    y1: 100,\n    x2: 300,\n    y2: 100,\n  },\n});\nconst offsetPathPolyline = new Polyline({\n  style: {\n    stroke: 'black',\n    points: [\n      [50, 50],\n      [100, 50],\n      [100, 100],\n      [150, 100],\n      [150, 150],\n      [200, 150],\n      [200, 200],\n      [250, 200],\n      [250, 250],\n      [300, 250],\n      [300, 300],\n      [350, 300],\n      [350, 350],\n      [400, 350],\n      [400, 400],\n      [450, 400],\n    ],\n  },\n});\n\nconst offsetPathPath = new Path({\n  style: {\n    d:\n      'M 100,300' +\n      'l 50,-25' +\n      'a25,25 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'a25,50 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'a25,75 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'a25,100 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'l 0, 200,' +\n      'z',\n  },\n});\n\nconst circle1 = new Circle({\n  style: {\n    cx: 0,\n    cy: 0,\n    r: 60,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    offsetPath: offsetPathLine,\n  },\n});\nconst circle2 = new Circle({\n  style: {\n    cx: 0,\n    cy: 0,\n    r: 10,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    offsetPath: offsetPathPolyline,\n  },\n});\nconst circle3 = new Circle({\n  style: {\n    cx: 0,\n    cy: 0,\n    r: 60,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    offsetPath: offsetPathPath,\n  },\n});\n\nlet animation;\n\ncanvas.appendChild(offsetPathPolyline);\ncanvas.appendChild(circle1);\ncanvas.appendChild(circle2);\ncanvas.appendChild(circle3);\n\ncircle1.animate([{ offsetDistance: 0 }, { offsetDistance: 1 }], {\n  duration: 2500,\n  easing: 'cubic-bezier(0.250, 0.460, 0.450, 0.940)',\n  iterations: Infinity,\n  direction: 'alternate',\n});\nanimation = circle2.animate([{ offsetDistance: 0 }, { offsetDistance: 1 }], {\n  duration: 3500,\n  easing: 'linear',\n  iterations: Infinity,\n  direction: 'alternate',\n});\n\ncircle3.animate([{ offsetDistance: 0 }, { offsetDistance: 1 }], {\n  duration: 4500,\n  easing: 'cubic-bezier(0.250, 0.460, 0.450, 0.940)',\n  iterations: Infinity,\n  direction: 'alternate',\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n  currentTime: 0,\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder\n  .add(rendererConfig, 'currentTime', 0, 3500)\n  .onChange((currentTime) => {\n    animation.currentTime = currentTime;\n  });\nrendererFolder.open();\n",title:{zh:"路径动画",en:"Offset path"},filename:"offset-path.js",isNew:!1},{id:"marching-ants",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*TTyTTISXlKAAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst circle = new Circle({\n  style: {\n    cx: 200,\n    cy: 200,\n    r: 60,\n    stroke: '#F04864',\n    lineWidth: 4,\n    lineDash: [10, 10],\n  },\n});\n\nconst rect = new Rect({\n  style: {\n    x: 300,\n    y: 100,\n    width: 200,\n    height: 200,\n    stroke: '#F04864',\n    lineWidth: 4,\n    radius: 8,\n    lineDash: [10, 10],\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle);\n  circle.animate([{ lineDashOffset: -20 }, { lineDashOffset: 0 }], {\n    duration: 500,\n    iterations: Infinity,\n  });\n\n  canvas.appendChild(rect);\n  rect.animate([{ lineDashOffset: -20 }, { lineDashOffset: 0 }], {\n    duration: 500,\n    iterations: Infinity,\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"蚂蚁线",en:"Marching ants"},filename:"marching-ants.js",isNew:!1},{id:"line-dash",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8NOsQoWLm2IAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst path = new Path({\n  style: {\n    stroke: 'black',\n    d:\n      'M 100,300' +\n      'l 50,-25' +\n      'a25,25 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'a25,50 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'a25,75 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'a25,100 -30 0,1 50,-25' +\n      'l 50,-25' +\n      'l 0, 200,' +\n      'z',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(path);\n\n  const length = path.getTotalLength();\n  path.animate([{ lineDash: [0, length] }, { lineDash: [length, 0] }], {\n    duration: 3500,\n    easing: 'cubic-bezier(0.250, 0.460, 0.450, 0.940)',\n    iterations: Infinity,\n    direction: 'alternate',\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"笔迹动画",en:"Line dash"},filename:"line-dash.js",isNew:!1},{id:"ripple-effect",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*DuMkRr0AaecAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Group, Image, Path, Rect } from '@antv/g';\nimport { Renderer } from '@antv/g-canvas';\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: new Renderer(),\n  background: 'rgb(16, 22, 29)',\n});\n\nconst gradient =\n  'linear-gradient(-90deg, rgba(178, 230, 181, 0), rgba(178, 230, 181, 0.6) 14%, rgba(166, 221, 179, 0.82) 23%, rgba(101, 171, 170, 0.9) 67%, rgb(23, 80, 157))';\n// 'l(270) 0:rgba(178, 230, 181, 0) 0.14:rgba(178, 230, 181, 0.6) 0.23:rgba(166, 221, 179, 0.82) 0.67:rgba(101, 171, 170, 0.9) 1:rgb(23, 80, 157)';\n\nconst rippleData = [\n  {\n    top: 'M46.33 48.5C46.33 48.5 46.33 48.5 46.33 48.5C46.41 47.25 51.01 46.24 56.67 46.24C62.33 46.24 66.93 47.24 67.02 48.5L67.02 48.5C67.02 47.24 62.39 46.21 56.67 46.21C50.95 46.21 46.33 47.24 46.33 48.5Z',\n    bottom:\n      'M56.68 51C51 51 46.42 50 46.34 48.74C46.34 48.74 46.34 48.74 46.34 48.74C46.34 50.01 50.98 51.03 56.69 51.03C62.4 51.03 67 50 67 48.77L67 48.77C66.94 50 62.35 51 56.68 51Z',\n    stroke: '#b0dacc',\n    strokeOpacity: 1,\n    scale: 3,\n    durationMultiplier: 2,\n  },\n  {\n    top: 'M32 48.31C32 48.31 32 48.37 32 48.39C32.21 45.39 43.19 43.01 56.72 43.01C70.25 43.01 81.24 45.41 81.44 48.39C81.44 48.39 81.44 48.39 81.44 48.31C81.44 45.31 70.37 42.84 56.71 42.84C43.05 42.84 32 45.29 32 48.31Z',\n    bottom:\n      'M56.68 54.26C43.15 54.26 32.17 51.86 31.96 48.88C31.96 48.88 31.96 48.94 31.96 48.97C31.96 51.97 43.04 54.43 56.69 54.43C70.34 54.43 81.41 52 81.41 49C81.41 49 81.41 48.94 81.41 48.91C81.2 51.86 70.21 54.26 56.68 54.26Z',\n    stroke: '#b0dacc',\n    strokeOpacity: 1,\n    scale: 1.8,\n  },\n  {\n    top: 'M23.62 48.2C23.62 48.2 23.62 48.27 23.62 48.31C23.89 44.31 38.62 41.11 56.67 41.11C74.72 41.11 89.45 44.33 89.72 48.31A0.43 0.43 0 0 0 89.72 48.2C89.72 44.2 74.91 40.89 56.65 40.89C38.39 40.89 23.62 44.16 23.62 48.2Z',\n    bottom:\n      'M56.68 56.16C38.59 56.16 23.9 52.95 23.68 48.96C23.68 48.96 23.68 49.04 23.68 49.08C23.68 53.08 38.48 56.39 56.74 56.39C75 56.39 89.81 53.11 89.81 49.08A0.5 0.5 0 0 0 89.81 48.96C89.46 53 74.77 56.16 56.68 56.16Z',\n    stroke: '#b0dacc',\n    strokeOpacity: 0.8,\n    scale: 1.5,\n  },\n  {\n    top: 'M19 48.14A0.69 0.69 0 0 0 19 48.27C19.3 43.73 36 40.07 56.62 40.07C77.24 40.07 94 43.73 94.31 48.27C94.31 48.22 94.31 48.18 94.31 48.14C94.31 43.54 77.45 39.82 56.66 39.82C35.87 39.82 19 43.54 19 48.14Z',\n    bottom:\n      'M56.68,57.2c-20.59,0-37.32-3.65-37.62-8.19a.51.51,0,0,0,0,.13c0,4.59,16.85,8.32,37.64,8.32s37.65-3.73,37.65-8.32c0,0,0-.09,0-.13C94,53.55,77.28,57.2,56.68,57.2Z',\n    stroke: '#b0dacc',\n    strokeOpacity: 0.57,\n    scale: 1.2,\n  },\n  {\n    top: 'M14.24 48.07C14.24 48.07 14.24 48.17 14.24 48.22C14.6 43.1 33.46 39 56.68 39C79.9 39 98.76 43.12 99.11 48.24A0.77 0.77 0 0 0 99.11 48.09C99.11 42.91 80.11 38.71 56.66 38.71C33.21 38.71 14.24 42.89 14.24 48.07Z',\n    bottom:\n      'M56.68 58.3C33.46 58.3 14.6 54.17 14.25 49.06C14.25 49.06 14.25 49.15 14.25 49.2C14.25 54.38 33.25 58.58 56.69 58.58C80.13 58.58 99.14 54.38 99.14 49.2A0.59 0.59 0 0 0 99.14 49.06C98.76 54.17 79.91 58.3 56.68 58.3Z',\n    stroke: '#b0dacc',\n    strokeOpacity: 0.5,\n    scale: 1.3,\n  },\n  {\n    top: 'M7.12 48.24A1.11 1.11 0 0 0 7.12 48.41C7.52 42.41 29.54 37.62 56.66 37.62C83.78 37.62 105.8 42.43 106.21 48.41C106.21 48.35 106.21 48.29 106.21 48.24C106.21 42.19 84.02 37.24 56.64 37.24C29.26 37.24 7.12 42.19 7.12 48.24Z',\n    bottom:\n      'M56.68 60.17C29.56 60.17 7.54 55.36 7.14 49.38A1.11 1.11 0 0 0 7.14 49.55C7.14 55.6 29.33 60.55 56.7 60.55C84.07 60.55 106.27 55.64 106.27 49.55C106.27 49.55 106.27 49.44 106.27 49.38C105.82 55.36 83.8 60.17 56.68 60.17Z',\n    stroke: '#b0dacc',\n    strokeOpacity: 0.23,\n    scale: 1.2,\n  },\n];\n\nconst group = new Group();\nconst mountain1 = new Path({\n  // @see https://g-next.antv.vision/zh/docs/api/basic/display-object#classname\n  className: 'mountain',\n  style: {\n    d: 'M33.6,51S44.36,31.65,48.15,18,64.38,7.42,66.62,18s10.6,33.6,13.15,33.1Z',\n    fill: gradient,\n    stroke: '#efcb84',\n    strokeWidth: 0.5,\n    miterLimit: 10,\n    shadowColor: 'rgba(124,94,44,0.5)',\n    shadowBlur: 50,\n    // @see https://g-next.antv.vision/zh/docs/api/basic/display-object#%E8%A3%81%E5%89%AA\n    // clipPath: new Rect({\n    //   style: {\n    //     y: -10,\n    //     x: -10,\n    //     width: 60,\n    //     height: 51,\n    //   },\n    // }),\n  },\n});\n\nconst mountain2 = mountain1.cloneNode();\nmountain2.translateLocal(20, 10);\nmountain2.scale(0.8);\n\ngroup.appendChild(mountain2);\ngroup.appendChild(mountain1);\n\n// @see https://g-next.antv.vision/zh/docs/api/basic/display-object#%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2\nconst mountains = group.querySelectorAll('.mountain');\nmountains.forEach((mountain) => {\n  mountain.addEventListener('click', () => {\n    mountains.forEach((m) => {\n      m.style.strokeWidth = 0.5;\n    });\n    mountain.style.strokeWidth = 2;\n  });\n});\n\nconst rippleGroups = rippleData.map(\n  ({ top, bottom, stroke, strokeOpacity }) => {\n    const rippleGroup = new Group({\n      style: {\n        strokeOpacity,\n        // @see https://g-next.antv.vision/zh/docs/api/basic/display-object#pointerevents\n        pointerEvents: 'none',\n      },\n    });\n    const topRipple = new Path({\n      style: {\n        d: top,\n        stroke,\n        strokeWidth: 0.5,\n        miterLimit: 10,\n      },\n    });\n    const bottomRipple = new Path({\n      style: {\n        d: bottom,\n        stroke,\n        strokeWidth: 0.5,\n        miterLimit: 10,\n      },\n    });\n    rippleGroup.appendChild(topRipple);\n    rippleGroup.appendChild(bottomRipple);\n    group.appendChild(rippleGroup);\n\n    return rippleGroup;\n  },\n);\n\nconst boat = new Image({\n  style: {\n    width: 100,\n    height: 100,\n    opacity: 0,\n    anchor: '0.5 0.5',\n    src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*qdRtSanFh_4AAAAAAAAAAAAAARQnAQ',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(group);\n  canvas.appendChild(boat);\n\n  rippleGroups.forEach((rippleGroup, i) => {\n    const { center } = rippleGroup.getBounds();\n    rippleGroup.style.transformOrigin = `${center[0]}px ${center[1]}px`;\n    rippleGroup.animate(\n      [\n        {\n          transform: 'scale(0.001)',\n          strokeOpacity: rippleData[i].strokeOpacity,\n        },\n        {\n          transform: `scale(${rippleData[i].scale})`,\n          strokeOpacity: 0,\n        },\n      ],\n      {\n        duration: 1500 * (rippleData[i].durationMultiplier || 1),\n        iterations: Infinity,\n        delay: i * 150,\n      },\n    );\n  });\n\n  group.scale(4);\n});\n\n// canvas.addEventListener(\"click\", function (e) {\n//   // @see https://g-next.antv.vision/zh/docs/api/event#canvasxy\n//   boat.style.x = e.canvasX;\n//   boat.style.y = e.canvasY;\n//   boat.animate([{ opacity: 0 }, { opacity: 1 }], {\n//     duration: 500,\n//     // @see https://g-next.antv.vision/zh/docs/api/animation#fill\n//     fill: \"both\"\n//   });\n// });\n",title:{zh:"涟漪效果",en:"Ripple Effect"},filename:"ripple-effect.js",isNew:!1},{id:"animations",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*WRp0SbVfgjUAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Group, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n/**\n * ported from https://github.com/wellyshen/use-web-animations/tree/master/src/animations\n */\nconst transformOrigin = 'center bottom';\nconst effects = [\n  () => ({\n    name: 'backInDown',\n    keyframes: [\n      { transform: 'translateY(-1200px) scale(0.7)', opacity: 0.7, offset: 0 },\n      { transform: 'translateY(0px) scale(0.7)', opacity: 0.7, offset: 0.8 },\n      { transform: 'translateY(0px)', opacity: 1, offset: 1 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'fadeIn',\n    keyframes: [{ opacity: 0 }, { opacity: 1 }],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'fadeInBottomLeft',\n    keyframes: [\n      { transform: 'translate3d(-100%, 100%, 0)', opacity: 0 },\n      { transform: 'translate3d(0, 0, 0)', opacity: 1 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'fadeInBottomRight',\n    keyframes: [\n      { transform: 'translate3d(100%, 100%, 0)', opacity: 0 },\n      { transform: 'translate3d(0, 0, 0)', opacity: 1 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'fadeOutTopRight',\n    keyframes: [\n      { transform: 'translate3d(0, 0, 0)', opacity: 1 },\n      { transform: 'translate3d(100%, -100%, 0)', opacity: 0 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => {\n    const easing1 = 'cubic-bezier(0.215, 0.61, 0.355, 1)';\n    const easing2 = 'cubic-bezier(0.755, 0.05, 0.855, 0.06)';\n    const frame1 = {\n      transform: 'translate3d(0, 0, 0) scaleY(1)',\n      easing: easing1,\n      transformOrigin,\n    };\n    const frame2 = {\n      transform: 'translate3d(0, -30px, 0) scaleY(1.1)',\n      easing: easing2,\n      transformOrigin,\n    };\n    return {\n      name: 'bounce',\n      keyframes: [\n        { ...frame1, offset: 0 },\n        { ...frame1, offset: 0.2 },\n        { ...frame2, offset: 0.4 },\n        { ...frame2, offset: 0.43 },\n        { ...frame1, offset: 0.53 },\n        {\n          transform: 'translate3d(0, -15px, 0) scaleY(1.05)',\n          easing: easing2,\n          transformOrigin,\n          offset: 0.7,\n        },\n        {\n          transform: 'translate3d(0, 0, 0) scaleY(0.95)',\n          easing: easing1,\n          transformOrigin,\n          offset: 0.8,\n        },\n        {\n          transform: 'translate3d(0, -4px, 0) scaleY(1.02)',\n          transformOrigin,\n          offset: 0.9,\n        },\n        { ...frame1, offset: 1 },\n      ],\n      animationOptions: { duration: 1000, fill: 'both' },\n    };\n  },\n  () => {\n    const easing = 'cubic-bezier(0.215, 0.61, 0.355, 1)';\n    return {\n      name: 'bounceIn',\n      keyframes: [\n        { transform: 'scale3d(0.3, 0.3, 0.3)', opacity: 0, easing, offset: 0 },\n        { transform: 'scale3d(1.1, 1.1, 1.1)', easing, offset: 0.2 },\n        { transform: 'scale3d(0.9, 0.9, 0.9)', easing, offset: 0.4 },\n        {\n          transform: 'scale3d(1.03, 1.03, 1.03)',\n          opacity: 1,\n          easing,\n          offset: 0.6,\n        },\n        { transform: 'scale3d(0.97, 0.97, 0.97)', easing, offset: 0.8 },\n        { transform: 'scale3d(1, 1, 1)', opacity: 1, easing, offset: 1 },\n      ],\n      animationOptions: { duration: 750, fill: 'both' },\n    };\n  },\n  () => {\n    const frame = { transform: 'scale3d(1.1, 1.1, 1.1)', opacity: 1 };\n    return {\n      name: 'bounceOut',\n      keyframes: [\n        { transform: 'none', opacity: 1, offset: 0 },\n        { transform: 'scale3d(0.9, 0.9, 0.9)', offset: 0.2 },\n        { ...frame, offset: 0.5 },\n        { ...frame, offset: 0.55 },\n        { transform: 'scale3d(0.3, 0.3, 0.3)', opacity: 0, offset: 1 },\n      ],\n      animationOptions: { duration: 750, fill: 'both' },\n    };\n  },\n  () => {\n    const frame1 = { opacity: 1 };\n    const frame2 = { opacity: 0 };\n    return {\n      name: 'flash',\n      keyframes: [\n        { ...frame1, offset: 0 },\n        { ...frame2, offset: 0.25 },\n        { ...frame1, offset: 0.5 },\n        { ...frame2, offset: 0.75 },\n        { ...frame1, offset: 1 },\n      ],\n      animationOptions: { duration: 1000, fill: 'both' },\n    };\n  },\n  () => ({\n    name: 'headShake',\n    keyframes: [\n      { transform: 'translateX(0)', offset: 0 },\n      { transform: 'translateX(-6px) rotateY(-9deg)', offset: 0.065 },\n      { transform: 'translateX(5px) rotateY(7deg)', offset: 0.185 },\n      { transform: 'translateX(-3px) rotateY(-5deg)', offset: 0.315 },\n      { transform: 'translateX(2px) rotateY(3deg)', offset: 0.435 },\n      { transform: 'translateX(0)', offset: 0.5 },\n      { transform: 'none', offset: 1 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both', easing: 'ease-in-out' },\n  }),\n  () => {\n    const frame1 = { transform: 'scale(1)' };\n    const frame2 = { transform: 'scale(1.3)' };\n    return {\n      name: 'heartBeat',\n      keyframes: [\n        { ...frame1, offset: 0 },\n        { ...frame2, offset: 0.14 },\n        { ...frame1, offset: 0.28 },\n        { ...frame2, offset: 0.42 },\n        { ...frame1, offset: 0.7 },\n        { transform: 'none', offset: 1 },\n      ],\n      animationOptions: { duration: 1300, fill: 'both', easing: 'ease-in-out' },\n    };\n  },\n  () => ({\n    name: 'swing',\n    keyframes: [\n      { transform: 'rotateZ(0deg)', transformOrigin, offset: 0 },\n      { transform: 'rotateZ(15deg)', transformOrigin, offset: 0.2 },\n      { transform: 'rotateZ(-10deg)', transformOrigin, offset: 0.4 },\n      { transform: 'rotateZ(5deg)', transformOrigin, offset: 0.6 },\n      { transform: 'rotateZ(-5deg)', transformOrigin, offset: 0.8 },\n      { transform: 'rotateZ(0deg)', transformOrigin, offset: 1 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'skewX',\n    keyframes: [\n      { transform: 'skewX(0deg)', transformOrigin, offset: 0 },\n      { transform: 'skewX(30deg)', transformOrigin, offset: 0.25 },\n      { transform: 'skewX(-30deg)', transformOrigin, offset: 0.75 },\n      { transform: 'skewX(0deg)', transformOrigin, offset: 1 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'skewY',\n    keyframes: [\n      { transform: 'skewY(0deg)', transformOrigin, offset: 0 },\n      { transform: 'skewY(30deg)', transformOrigin, offset: 0.25 },\n      { transform: 'skewY(-30deg)', transformOrigin, offset: 0.75 },\n      { transform: 'skewY(0deg)', transformOrigin, offset: 1 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'flipX',\n    keyframes: [\n      { transform: 'scaleX(1)', transformOrigin },\n      { transform: 'scaleX(-1)', transformOrigin },\n      { transform: 'scaleX(1)', transformOrigin },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'flipY',\n    keyframes: [\n      { transform: 'scaleY(1)', transformOrigin: 'center' },\n      { transform: 'scaleY(-1)', transformOrigin: 'center' },\n      { transform: 'scaleY(1)', transformOrigin: 'center' },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'matrix interpolation',\n    keyframes: [\n      { transform: 'skewY(30deg)', transformOrigin: 'center' },\n      { transform: 'matrix(0.2,0,0,0.2,-50,0)', transformOrigin: 'center' },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n];\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  effects.forEach((f, i) => {\n    const { name, keyframes, animationOptions } = f();\n    const row = Math.floor(i / 4);\n    const group = new Group();\n    const circle = new Circle({\n      style: {\n        r: 50,\n        fill: '#1890FF',\n        stroke: '#F04864',\n        lineWidth: 4,\n      },\n    });\n    const text = new Text({\n      style: {\n        text: name,\n        fontSize: 10,\n        fill: '#000',\n        textAlign: 'center',\n        textBaseline: 'middle',\n      },\n    });\n    circle.appendChild(text);\n    group.appendChild(circle);\n    canvas.appendChild(group);\n\n    group.setPosition(50 + 150 * (i % 4), 50 + 120 * row);\n\n    circle.animate(keyframes, {\n      ...animationOptions,\n      iterations: Infinity,\n    });\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"常见的动画效果",en:"Useful animations"},filename:"animations.js",isNew:!1},{id:"multiple-animations-per-element",screenshot:"https://mdn.alipayobjects.com/antforest/afts/img/A*epyYTa3DaM0AAAAAAAAAAAAADrd2AQ/Dec-14-2022%2010-18-22.gif",source:"import { Canvas, CanvasEvent, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * ported from https://danielcwilson.com/blog/2015/08/animations-part-3/\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n  background: '#e45349',\n});\n\nconst timings = {\n  easing: 'ease-in-out',\n  iterations: Infinity,\n  direction: 'alternate',\n  fill: 'both',\n};\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  for (let i = 0; i < 20; i++) {\n    const rect = new Rect({\n      style: {\n        x: i * 30,\n        y: 100,\n        width: 30,\n        height: 10,\n        radius: 2,\n        fill: 'rgb(239, 239, 255)',\n      },\n    });\n    canvas.appendChild(rect);\n\n    timings.delay = i * 98;\n    timings.duration = 2500;\n    rect.animate(\n      [\n        { transform: 'translateY(0) scaleX(.8)' },\n        { transform: 'translateY(300) scaleX(1)' },\n      ],\n      timings,\n    );\n\n    timings.duration = 2000;\n    rect.animate([{ opacity: 1 }, { opacity: 0 }], timings);\n\n    timings.duration = 3000;\n    rect.animate(\n      [{ fill: 'rgb(239, 239, 255)' }, { fill: '#e4c349' }],\n      timings,\n    );\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"每个元素上应用多个动画",en:"Multiple Animations Per Element"},filename:"multiple-animations-per-element.js",isNew:!1}],icon:"",id:"animation-effects",title:{en:"Common Animation Effects",zh:"常见动画效果"},api:null,childrenKey:"demos",order:10},{demos:[{id:"morph",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*qCHaTJUg_aEAAAAAAAAAAAAAARQnAQ",source:"import {\n  Canvas,\n  CanvasEvent,\n  Circle,\n  convertToPath,\n  Line,\n  Path,\n  Polygon,\n  Polyline,\n  Rect,\n} from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const path1 = new Path({\n    style: {\n      d: 'M 0,40 C 5.5555555555555545,40,22.222222222222218,44.44444444444445,33.33333333333333,40 C 44.444444444444436,35.55555555555556,55.55555555555554,14.66666666666667,66.66666666666666,13.333333333333336 C 77.77777777777777,12.000000000000002,88.88888888888887,32,100,32 C 111.11111111111113,32,122.22222222222221,14.66666666666667,133.33333333333331,13.333333333333336 C 144.44444444444443,12.000000000000002,155.55555555555557,24,166.66666666666669,24 C 177.7777777777778,24,188.8888888888889,11.111111111111114,200,13.333333333333336 C 211.1111111111111,15.555555555555557,222.22222222222226,35.111111111111114,233.33333333333334,37.333333333333336 C 244.44444444444443,39.55555555555555,255.55555555555551,31.22222222222223,266.66666666666663,26.66666666666667 C 277.77777777777777,22.111111111111114,294.4444444444444,12.777777777777779,300,10',\n    },\n  });\n  const path2 = new Path({\n    style: {\n      d: [\n        ['M', 0, 0],\n        ['L', 200, 0],\n      ],\n    },\n  });\n\n  path1.translate(100, 100);\n  path2.translate(100, 100);\n\n  /**\n   * Path -> Path\n   */\n  const path1Str = convertToPath(path1);\n  const path2Str = convertToPath(path2);\n  const pathA = new Path({\n    style: {\n      d: path1Str,\n      stroke: '#F04864',\n    },\n  });\n  canvas.appendChild(pathA);\n  pathA.animate([{ d: path1Str }, { d: path2Str }], {\n    duration: 2500,\n    easing: 'ease',\n    iterations: Infinity,\n    direction: 'alternate',\n  });\n\n  /**\n   * Path -> Line\n   */\n  const line = new Line({\n    style: {\n      x1: 100,\n      y1: 0,\n      x2: 100,\n      y2: 100,\n      transform: 'translate(0, 100px)',\n    },\n  });\n  const linePathStr = convertToPath(line);\n  const pathB = new Path({\n    style: {\n      d: path1Str,\n      stroke: '#F04864',\n    },\n  });\n  canvas.appendChild(pathB);\n  pathB.animate([{ d: path1Str }, { d: linePathStr }], {\n    duration: 2500,\n    easing: 'ease',\n    iterations: Infinity,\n    direction: 'alternate',\n  });\n\n  /**\n   * Path -> Circle\n   */\n  const circle = new Circle({\n    style: {\n      cx: 100,\n      cy: 100,\n      r: 50,\n    },\n  });\n  circle.scale(2);\n  const circlePathStr = convertToPath(circle);\n  const pathC = new Path({\n    style: {\n      d: path1Str,\n      stroke: '#F04864',\n    },\n  });\n  canvas.appendChild(pathC);\n  pathC.animate([{ d: path1Str }, { d: circlePathStr }], {\n    duration: 2500,\n    easing: 'ease',\n    iterations: Infinity,\n    direction: 'alternate',\n  });\n\n  /**\n   * Circle -> Polyline\n   */\n  const polylinePathStr = convertToPath(\n    new Polyline({\n      style: {\n        points: [\n          [50, 50],\n          [100, 50],\n          [100, 100],\n          [150, 100],\n          [150, 150],\n          [200, 150],\n        ],\n        transform: 'translate(0, 200)',\n      },\n    }),\n  );\n  const pathD = new Path({\n    style: {\n      d: circlePathStr,\n      stroke: '#F04864',\n    },\n  });\n  canvas.appendChild(pathD);\n  pathD.animate([{ d: circlePathStr }, { d: polylinePathStr }], {\n    duration: 2500,\n    easing: 'ease',\n    iterations: Infinity,\n    direction: 'alternate',\n  });\n\n  /**\n   * Path -> Polygon\n   */\n  const polygonPathStr = convertToPath(\n    new Polygon({\n      style: {\n        points: [\n          [0, 0],\n          [50, 50],\n          [50, 100],\n        ],\n        transform: 'translate(0, 300px)',\n      },\n    }),\n  );\n  const pathE = new Path({\n    style: {\n      d: path1Str,\n      stroke: '#F04864',\n    },\n  });\n  canvas.appendChild(pathE);\n  pathE.animate([{ d: path1Str }, { d: polygonPathStr }], {\n    duration: 2500,\n    easing: 'ease',\n    iterations: Infinity,\n    direction: 'alternate',\n  });\n\n  /**\n   * Rect -> Circle\n   */\n  const rectPathStr = convertToPath(\n    new Rect({\n      style: {\n        x: 300,\n        y: 200,\n        width: 200,\n        height: 100,\n        transformOrigin: 'center',\n      },\n    }),\n  );\n  const pathF = new Path({\n    style: {\n      d: rectPathStr,\n      stroke: '#F04864',\n      fill: '',\n      opacity: 0.5,\n      lineWidth: 10,\n    },\n  });\n  canvas.appendChild(pathF);\n  pathF.animate(\n    [\n      { d: rectPathStr, stroke: '#F04864', fill: 'blue' },\n      { d: circlePathStr, stroke: 'blue', fill: '#F04864' },\n    ],\n    {\n      duration: 2500,\n      easing: 'ease',\n      iterations: Infinity,\n      direction: 'alternate',\n    },\n  );\n\n  /**\n   * Rect -> Path\n   */\n  const starPath = new Path({\n    style: {\n      d: 'M301.113,12.011l99.25,179.996l201.864,38.778L461.706,380.808l25.508,203.958l-186.101-87.287L115.01,584.766l25.507-203.958L0,230.785l201.86-38.778L301.113,12.011',\n    },\n  });\n  starPath.scale(0.2);\n  starPath.translate(200, 200);\n  const pathG = new Path({\n    style: {\n      d: rectPathStr,\n      lineWidth: 2,\n    },\n  });\n  canvas.appendChild(pathG);\n  pathG.animate(\n    [\n      { d: rectPathStr, stroke: '#F04864', fill: 'blue' },\n      { d: convertToPath(starPath), stroke: 'blue', fill: '#F04864' },\n    ],\n    {\n      duration: 2500,\n      easing: 'ease',\n      iterations: Infinity,\n      direction: 'alternate',\n    },\n  );\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"形变动画",en:"Morph"},filename:"morph.js",isNew:!1},{id:"convert-to-path",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*O4qsQ4QFkuMAAAAAAAAAAAAADmJ7AQ",source:"import {\n  Canvas,\n  CanvasEvent,\n  Circle,\n  convertToPath,\n  Ellipse,\n  Line,\n  Path,\n  Polygon,\n  Polyline,\n  Rect,\n} from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n/**\n * show converted path in blue\n */\nconst showConvertedPath = (object) => {\n  const pathStr = convertToPath(object);\n  const objectPath = new Path({\n    style: {\n      d: pathStr,\n      fill: 'none',\n      stroke: 'blue',\n      lineWidth: 10,\n    },\n  });\n  canvas.appendChild(objectPath);\n};\n\n/**\n * Circle -> Path\n */\nconst circle = new Circle({\n  style: {\n    cx: 0,\n    cy: 0,\n    r: 100,\n    transform: 'translate(100, 100)',\n    fill: 'red',\n    opacity: 0.5,\n  },\n});\ncanvas.appendChild(circle);\ncircle.scale(0.5);\nshowConvertedPath(circle);\n\n/**\n * Ellipse -> Path\n */\nconst ellipse = new Ellipse({\n  style: {\n    cx: 0,\n    cy: 0,\n    rx: 100,\n    ry: 60,\n    fill: 'red',\n    opacity: 0.5,\n  },\n});\nellipse.setPosition(300, 100);\nellipse.setLocalScale(0.6);\ncanvas.appendChild(ellipse);\nshowConvertedPath(ellipse);\n\n/**\n * Rect -> Path\n */\nconst rect = new Rect({\n  style: {\n    x: 200,\n    y: 100,\n    width: 100,\n    height: 100,\n    fill: 'red',\n    opacity: 0.5,\n    transformOrigin: '200 100',\n  },\n});\ncanvas.appendChild(rect);\nrect.rotateLocal(30);\nshowConvertedPath(rect);\n\n/**\n * Line -> Path\n */\nconst line = new Line({\n  style: {\n    x1: 100,\n    y1: 200,\n    x2: 100,\n    y2: 300,\n    lineWidth: 30,\n    stroke: 'red',\n    opacity: 0.5,\n  },\n});\ncanvas.appendChild(line);\nshowConvertedPath(line);\n\n/**\n * Polyline -> Path\n */\nconst polyline = new Polyline({\n  style: {\n    points: '100,360 100,400, 50,400',\n    lineWidth: 30,\n    stroke: 'red',\n    opacity: 0.5,\n    transformOrigin: 'center',\n  },\n});\ncanvas.appendChild(polyline);\npolyline.rotateLocal(90);\nshowConvertedPath(polyline);\n\n/**\n * Polyline -> Path\n */\nconst polygon = new Polygon({\n  style: {\n    points: '200,360 200,400, 250,400',\n    fill: 'red',\n    transform: 'scale(2)',\n    transformOrigin: '200 360',\n    opacity: 0.5,\n  },\n});\ncanvas.appendChild(polygon);\nshowConvertedPath(polygon);\n\n/**\n * Path -> Path\n */\nconst path = new Path({\n  style: {\n    d: 'M301.113,12.011l99.25,179.996l201.864,38.778L461.706,380.808l25.508,203.958l-186.101-87.287L115.01,584.766l25.507-203.958L0,230.785l201.86-38.778L301.113,12.011Z',\n    fill: 'red',\n    opacity: 0.5,\n  },\n});\npath.translate(300, 250);\npath.scale(0.2);\ncanvas.appendChild(path);\nshowConvertedPath(path);\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"转换基础图形到路径定义",en:"Convert DisplayObject to CubicBezier Path string"},filename:"convert-to-path.js",isNew:!1},{id:"issue",source:"import { runtime, Canvas, CanvasEvent, Path, Group } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const group = new Group();\n  group.style.transform = 'translate(0, 100)';\n\n  const path = new Path({\n    style: {\n      fill: '#5B8FF9',\n      stroke: '#5B8FF9',\n      fillOpacity: 0.95,\n      d: 'M51.3636360168457,0L282.5,0L282.5,405L51.3636360168457,405Z',\n    },\n  });\n  group.appendChild(path);\n  canvas.appendChild(group);\n  path.animate(\n    [\n      {\n        d: 'M51.3636360168457,0L282.5,0L282.5,405L51.3636360168457,405Z',\n        fill: '#5B8FF9',\n        stroke: '#5B8FF9',\n        fillOpacity: 0.95,\n        strokeOpacity: 1,\n        opacity: 1,\n      },\n      {\n        d: 'M73.37662506103516,0L271.4934997558594,0L271.4934997558594,395L73.37662506103516,395Z',\n        fill: '#5B8FF9',\n        stroke: '#5B8FF9',\n        fillOpacity: 0.95,\n      },\n    ],\n    {\n      duration: 1000,\n      fill: 'both',\n      delay: 0,\n      easing: 'ease-in-out-sine',\n    },\n  );\n\n  const path2 = new Path({\n    style: {\n      fill: '#5AD8A6',\n      stroke: '#5AD8A6',\n      fillOpacity: 0.95,\n      d: 'M290,0L527.272705078125,0L527.272705078125,420L290,420Z',\n    },\n  });\n  group.appendChild(path2);\n  path2.animate(\n    [\n      {\n        d: 'M290,0L527.272705078125,0L527.272705078125,420L290,420Z',\n        fill: '#5B8FF9',\n        stroke: '#5B8FF9',\n        fillOpacity: 0.95,\n        strokeOpacity: 1,\n        opacity: 1,\n      },\n      {\n        d: 'M301.2987060546875,32.30769348144531L504.6753234863281,32.30769348144531L504.6753234863281,420L301.2987060546875,420Z',\n        fill: '#5AD8A6',\n        stroke: '#5AD8A6',\n        fillOpacity: 0.95,\n      },\n    ],\n    {\n      duration: 1000,\n      fill: 'both',\n      delay: 0,\n      easing: 'ease-in-out-sine',\n    },\n  );\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"转换基础图形到路径定义",en:"Convert DisplayObject to CubicBezier Path string"},filename:"issue.js",isNew:!1}],icon:"",id:"morph",title:{en:"Morphing Animation",zh:"形变动画"},api:null,childrenKey:"demos",order:10}],childrenKey:"examples"},{id:"scenegraph",title:{zh:"场景图",en:"Scene Graph"},examples:[{demos:[{id:"hierarchy",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*ZcrHSoLxRS8AAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Group } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\nsolarSystem\n   |    |\n   |   sun\n   |\n earthOrbit\n   |    |\n   |  earth\n   |\n  moonOrbit\n      |\n     moon\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const solarSystem = new Group({\n    id: 'solarSystem',\n  });\n  const earthOrbit = new Group({\n    id: 'earthOrbit',\n  });\n  const moonOrbit = new Group({\n    id: 'moonOrbit',\n  });\n\n  const sun = new Circle({\n    id: 'sun',\n    style: {\n      r: 100,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  const earth = new Circle({\n    id: 'earth',\n    style: {\n      r: 50,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  const moon = new Circle({\n    id: 'moon',\n    style: {\n      r: 25,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n\n  solarSystem.appendChild(sun);\n  solarSystem.appendChild(earthOrbit);\n  earthOrbit.appendChild(earth);\n  earthOrbit.appendChild(moonOrbit);\n  moonOrbit.appendChild(moon);\n\n  solarSystem.setPosition(300, 250);\n  earthOrbit.translate(100, 0);\n  moonOrbit.translate(100, 0);\n\n  canvas.appendChild(solarSystem);\n\n  // use AntV G devtools\n  window.__g_instances__ = [canvas];\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n\n    solarSystem.rotateLocal(1);\n    earthOrbit.rotateLocal(2);\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', [\n      'canvas',\n      'svg',\n      'webgl',\n      'webgpu',\n      'canvaskit',\n    ])\n    .onChange((rendererName) => {\n      let renderer;\n      if (rendererName === 'canvas') {\n        renderer = canvasRenderer;\n      } else if (rendererName === 'svg') {\n        renderer = svgRenderer;\n      } else if (rendererName === 'webgl') {\n        renderer = webglRenderer;\n      } else if (rendererName === 'webgpu') {\n        renderer = webgpuRenderer;\n      } else if (rendererName === 'canvaskit') {\n        renderer = canvaskitRenderer;\n      }\n      canvas.setRenderer(renderer);\n    });\n  rendererFolder.open();\n\n  const sunFolder = gui.addFolder('sun');\n  const sunConfig = {\n    r: 100,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    fillOpacity: 1,\n    strokeOpacity: 1,\n    visibility: true,\n    'z-index': 0,\n  };\n  sunFolder.add(sunConfig, 'r', 50, 200).onChange((radius) => {\n    sun.attr('r', radius);\n  });\n  sunFolder.addColor(sunConfig, 'fill').onChange((color) => {\n    sun.attr('fill', color);\n  });\n  sunFolder.addColor(sunConfig, 'stroke').onChange((color) => {\n    sun.attr('stroke', color);\n  });\n  sunFolder.add(sunConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n    sun.attr('lineWidth', lineWidth);\n  });\n  sunFolder.add(sunConfig, 'fillOpacity', 0, 1, 0.1).onChange((opacity) => {\n    sun.attr('fillOpacity', opacity);\n  });\n  sunFolder.add(sunConfig, 'strokeOpacity', 0, 1, 0.1).onChange((opacity) => {\n    sun.attr('strokeOpacity', opacity);\n  });\n  sunFolder.add(sunConfig, 'visibility').onChange((visible) => {\n    if (visible) {\n      sun.show();\n    } else {\n      sun.hide();\n    }\n  });\n  sunFolder.add(sunConfig, 'z-index', 0, 100).onChange((zIndex) => {\n    sun.setZIndex(zIndex);\n  });\n  sunFolder.open();\n\n  const earthFolder = gui.addFolder('earth');\n  const earthConfig = {\n    r: 50,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    fillOpacity: 1,\n    strokeOpacity: 1,\n    visibility: true,\n  };\n  earthFolder.add(earthConfig, 'r', 50, 200).onChange((radius) => {\n    earth.attr('r', radius);\n  });\n  earthFolder.addColor(earthConfig, 'fill').onChange((color) => {\n    earth.attr('fill', color);\n  });\n  earthFolder.addColor(earthConfig, 'stroke').onChange((color) => {\n    earth.attr('stroke', color);\n  });\n  earthFolder.add(earthConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n    earth.attr('lineWidth', lineWidth);\n  });\n  earthFolder.add(earthConfig, 'fillOpacity', 0, 1, 0.1).onChange((opacity) => {\n    earth.attr('fillOpacity', opacity);\n  });\n  earthFolder\n    .add(earthConfig, 'strokeOpacity', 0, 1, 0.1)\n    .onChange((opacity) => {\n      earth.attr('strokeOpacity', opacity);\n    });\n  earthFolder.add(earthConfig, 'visibility').onChange((visible) => {\n    if (visible) {\n      earth.show();\n    } else {\n      earth.hide();\n    }\n  });\n\n  const moonFolder = gui.addFolder('moon');\n  const moonConfig = {\n    r: 25,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    fillOpacity: 1,\n    strokeOpacity: 1,\n    visibility: true,\n  };\n  moonFolder.add(moonConfig, 'r', 50, 200).onChange((radius) => {\n    moon.attr('r', radius);\n  });\n  moonFolder.addColor(moonConfig, 'fill').onChange((color) => {\n    moon.attr('fill', color);\n  });\n  moonFolder.addColor(moonConfig, 'stroke').onChange((color) => {\n    moon.attr('stroke', color);\n  });\n  moonFolder.add(moonConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n    moon.attr('lineWidth', lineWidth);\n  });\n  moonFolder.add(moonConfig, 'fillOpacity', 0, 1, 0.1).onChange((opacity) => {\n    moon.attr('fillOpacity', opacity);\n  });\n  moonFolder.add(moonConfig, 'strokeOpacity', 0, 1, 0.1).onChange((opacity) => {\n    moon.attr('strokeOpacity', opacity);\n  });\n  moonFolder.add(moonConfig, 'visibility').onChange((visible) => {\n    if (visible) {\n      moon.show();\n    } else {\n      moon.hide();\n    }\n  });\n\n  const earthOrbitFolder = gui.addFolder('earthOrbit');\n  const earthOrbitConfig = {\n    visibility: true,\n    'z-index': 0,\n  };\n  earthOrbitFolder.add(earthOrbitConfig, 'visibility').onChange((visible) => {\n    if (visible) {\n      earthOrbit.show();\n    } else {\n      earthOrbit.hide();\n    }\n  });\n  earthOrbitFolder\n    .add(earthOrbitConfig, 'z-index', 0, 100)\n    .onChange((zIndex) => {\n      earthOrbit.setZIndex(zIndex);\n    });\n\n  const moonOrbitFolder = gui.addFolder('moonOrbit');\n  const moonOrbitConfig = {\n    visibility: true,\n    'z-index': 0,\n  };\n  moonOrbitFolder.add(moonOrbitConfig, 'visibility').onChange((visible) => {\n    if (visible) {\n      moonOrbit.show();\n    } else {\n      moonOrbit.hide();\n    }\n  });\n  moonOrbitFolder.add(moonOrbitConfig, 'z-index', 0, 100).onChange((zIndex) => {\n    moonOrbit.setZIndex(zIndex);\n  });\n\n  // zIndexFolder.add(zIndexConfig, 'bringToFront').onChange((toFront) => {\n  //   if (toFront) {\n  //     sun.toFront();\n  //   } else {\n  //     sun.toBack();\n  //   }\n  // });\n});\n",title:{zh:"层次结构",en:"Hierarchy"},filename:"hierarchy.js",isNew:!1},{id:"boxmodel",source:"import { Canvas, Rect, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * CSS Box Model\n * @see https://developer.mozilla.org/zh-CN/docs/learn/css/building_blocks/the_box_model\n *\n * scenegraph:\n * blue rect\n *  -> red rect\n *   -> green rect\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst parent = new Rect({\n  style: {\n    x: 100,\n    y: 100,\n    width: 400,\n    height: 400,\n    fill: '#1890FF',\n  },\n});\ncanvas.appendChild(parent);\n\nconst red = new Rect({\n  style: {\n    x: '50%',\n    y: '50%',\n    width: 100,\n    height: 100,\n    fill: 'red',\n  },\n});\nparent.appendChild(red);\n\nconst green = new Rect({\n  style: {\n    x: '-100%',\n    y: 0,\n    width: '100%',\n    height: '100%',\n    fill: 'green',\n  },\n});\nred.appendChild(green);\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst parentFolder = gui.addFolder('blue rect');\nconst parentConfig = {\n  x: 100,\n  y: 100,\n  width: 400,\n  height: 400,\n};\nparentFolder\n  .add(parentConfig, 'x', 0, 300)\n  .onChange((x) => {\n    parent.style.x = `${x}px`;\n  })\n  .name('x(in px)');\nparentFolder\n  .add(parentConfig, 'y', 0, 300)\n  .onChange((y) => {\n    parent.style.y = `${y}px`;\n  })\n  .name('y(in px)');\nparentFolder\n  .add(parentConfig, 'width', 0, 600)\n  .onChange((width) => {\n    parent.style.width = width;\n  })\n  .name('width(in px)');\nparentFolder\n  .add(parentConfig, 'height', 0, 600)\n  .onChange((height) => {\n    parent.style.height = height;\n  })\n  .name('height(in px)');\nparentFolder.open();\n\nconst redFolder = gui.addFolder('red rect');\nconst redConfig = {\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 100,\n};\nredFolder\n  .add(redConfig, 'x', 0, 100)\n  .onChange((x) => {\n    red.style.x = `${x}%`;\n  })\n  .name('x(in %)');\nredFolder\n  .add(redConfig, 'y', 0, 100)\n  .onChange((y) => {\n    red.style.y = `${y}%`;\n  })\n  .name('y(in %)');\nredFolder\n  .add(redConfig, 'width', 0, 400)\n  .onChange((width) => {\n    red.style.width = width;\n  })\n  .name('width(in px)');\nredFolder\n  .add(redConfig, 'height', 0, 400)\n  .onChange((height) => {\n    red.style.height = height;\n  })\n  .name('height(in px)');\nredFolder.open();\n\nconst greenFolder = gui.addFolder('green rect');\nconst greenConfig = {\n  x: -100,\n  y: 50,\n  width: 100,\n  height: 100,\n};\ngreenFolder\n  .add(greenConfig, 'x', -100, 100)\n  .onChange((x) => {\n    green.style.x = `${x}%`;\n  })\n  .name('x(in %)');\ngreenFolder\n  .add(greenConfig, 'y', -100, 100)\n  .onChange((y) => {\n    green.style.y = `${y}px`;\n  })\n  .name('y(in px)');\ngreenFolder\n  .add(greenConfig, 'width', 0, 100)\n  .onChange((width) => {\n    green.style.width = `${width}%`;\n  })\n  .name('width(in %)');\ngreenFolder\n  .add(greenConfig, 'height', 0, 100)\n  .onChange((height) => {\n    green.style.height = `${height}%`;\n  })\n  .name('height(in %)');\ngreenFolder.open();\n",title:{zh:"盒模型",en:"CSS Box Model"},filename:"boxmodel.js",isNew:!1},{id:"transform",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*ZcrHSoLxRS8AAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Ellipse } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const ellipse = new Ellipse({\n    style: {\n      cx: 300,\n      cy: 200,\n      rx: 100,\n      ry: 150,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n\n  canvas.appendChild(ellipse);\n\n  // original position\n  const origin = new Circle({\n    style: {\n      r: 20,\n      fill: 'red',\n    },\n  });\n  canvas.appendChild(origin);\n  origin.setLocalPosition(300, 200);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg'])\n    .onChange((renderer) => {\n      canvas.setRenderer(\n        renderer === 'canvas'\n          ? canvasRenderer\n          : renderer === 'webgl'\n          ? webglRenderer\n          : svgRenderer,\n      );\n    });\n  rendererFolder.open();\n\n  const ellipseFolder = gui.addFolder('Transform');\n  const ellipseConfig = {\n    translateX: 0,\n    translateY: 0,\n    transformOriginX: 100,\n    transformOriginY: 150,\n    scale: 1,\n    rotate: () => {\n      ellipse.rotateLocal(10);\n    },\n  };\n  ellipseFolder.add(ellipseConfig, 'translateX', -200, 200).onChange((tx) => {\n    // same as:\n    // ellipse.attr('x');\n    // ellipse.attr('y');\n    const [x, y] = ellipse.getPosition();\n    // same as:\n    // * ellipse.move(300 + tx, y);\n    // * ellipse.moveTo(300 + tx, y);\n    ellipse.setPosition(300 + tx, y);\n\n    const [ox, oy] = ellipse.getOrigin();\n    const [lx, ly] = ellipse.getPosition();\n    origin.setPosition(lx + ox, ly + oy);\n  });\n  ellipseFolder.add(ellipseConfig, 'translateY', -200, 200).onChange((ty) => {\n    const [x, y] = ellipse.getPosition();\n    // same as:\n    // * ellipse.move(x, 200 + ty);\n    // * ellipse.moveTo(x, 200 + ty);\n    ellipse.setPosition(x, 200 + ty);\n\n    const [ox, oy] = ellipse.getOrigin();\n    const [lx, ly] = ellipse.getPosition();\n    origin.setPosition(lx + ox, ly + oy);\n  });\n  ellipseFolder\n    .add(ellipseConfig, 'transformOriginX', -200, 200)\n    .onChange((tx) => {\n      ellipse.style.transformOrigin = `${tx}px ${ellipseConfig.transformOriginY}px`;\n\n      const [ox, oy] = ellipse.getOrigin();\n      const [lx, ly] = ellipse.getPosition();\n      origin.setPosition(lx + ox, ly + oy);\n    });\n  ellipseFolder\n    .add(ellipseConfig, 'transformOriginY', -200, 200)\n    .onChange((ty) => {\n      ellipse.style.transformOrigin = `${ellipseConfig.transformOriginX}px ${ty}px`;\n\n      const [ox, oy] = ellipse.getOrigin();\n      const [lx, ly] = ellipse.getPosition();\n      origin.setPosition(lx + ox, ly + oy);\n    });\n  ellipseFolder.add(ellipseConfig, 'rotate').name('rotate');\n  ellipseFolder.add(ellipseConfig, 'scale', 0.2, 5).onChange((scaling) => {\n    ellipse.setLocalScale(scaling);\n  });\n\n  ellipseFolder.open();\n});\n",title:{zh:"变换",en:"Transform"},filename:"transform.js",isNew:!1},{id:"origin",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*E7OfQ5-uVgYAAAAAAAAAAAAAARQnAQ",source:"import {\n  Canvas,\n  CanvasEvent,\n  Circle,\n  Group,\n  Polyline,\n  Rect,\n  Text,\n} from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  /**\n   * Circle\n   */\n\n  const circle = new Circle({\n    style: {\n      cx: 100,\n      cy: 100,\n      r: 100,\n      fill: '#1890FF',\n      transformOrigin: 'center',\n    },\n  });\n  canvas.appendChild(circle);\n  circle.animate([{ transform: 'scale(1)' }, { transform: 'scale(0.5)' }], {\n    duration: 500,\n    easing: 'cubic-bezier(0.250, 0.460, 0.450, 0.940)',\n    iterations: Infinity,\n    direction: 'alternate',\n  });\n\n  const circleOrigin = new Circle({\n    id: 'circleOrigin',\n    style: {\n      cx: 100,\n      cy: 100,\n      r: 10,\n      fill: '#F04864',\n    },\n  });\n  canvas.appendChild(circleOrigin);\n\n  /**\n   * Group\n   */\n\n  const group = new Group({ id: 'group' });\n  const child1 = new Rect({\n    id: 'rect1',\n    style: {\n      width: 100,\n      height: 100,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n      radius: 8,\n    },\n  });\n  group.appendChild(child1);\n  group.setPosition(200, 100);\n\n  // original position\n  const original = child1.cloneNode();\n  original.setPosition(200, 100);\n  original.style.opacity = 0.5;\n  canvas.appendChild(original);\n\n  const groupOrigin = new Circle({\n    id: 'group-origin',\n    style: {\n      r: 30,\n      fill: '#F04864',\n    },\n  });\n  const originText = new Text({\n    id: 'text',\n    style: {\n      fontFamily: 'PingFang SC',\n      text: 'Origin',\n      fontSize: 16,\n      fill: '#fFF',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    },\n  });\n\n  groupOrigin.appendChild(originText);\n  groupOrigin.setPosition(200, 100);\n\n  canvas.appendChild(group);\n  canvas.appendChild(groupOrigin);\n\n  /**\n   * Text\n   */\n  const text = new Text({\n    id: 'rotated-text',\n    style: {\n      transform: 'translate(100, 400)',\n      fontFamily: 'PingFang SC',\n      text: 'Lorem ipsum',\n      fontSize: 32,\n      fill: '#FFF',\n      stroke: '#1890FF',\n      lineWidth: 5,\n      // textAlign: 'center',\n      // textBaseline: 'middle',\n    },\n  });\n  canvas.appendChild(text);\n  const textOrigin = new Circle({\n    id: 'textOrigin',\n    style: {\n      r: 10,\n      fill: '#F04864',\n      transform: 'translate(100, 400)',\n    },\n  });\n  canvas.appendChild(textOrigin);\n\n  /**\n   * Polyline\n   */\n  const points = [\n    [50, 50],\n    [100, 50],\n    [100, 100],\n    [150, 100],\n    [150, 150],\n    [200, 150],\n  ];\n  const polyline = new Polyline({\n    style: {\n      points,\n      stroke: '#1890FF',\n      lineWidth: 2,\n      transform: 'translate(300, 300)',\n      transformOrigin: 'left top',\n    },\n  });\n  canvas.appendChild(polyline);\n\n  const polylineOrigin = new Circle({\n    id: 'polyline-origin',\n    style: {\n      cx: 50,\n      cy: 50,\n      transform: 'translate(300, 300)',\n      r: 10,\n      fill: '#F04864',\n    },\n  });\n  canvas.appendChild(polylineOrigin);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n    group.rotateLocal(1);\n    text.rotateLocal(1);\n    polyline.rotateLocal(1);\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', [\n      'canvas',\n      'svg',\n      'webgl',\n      'webgpu',\n      'canvaskit',\n    ])\n    .onChange((rendererName) => {\n      let renderer;\n      if (rendererName === 'canvas') {\n        renderer = canvasRenderer;\n      } else if (rendererName === 'svg') {\n        renderer = svgRenderer;\n      } else if (rendererName === 'webgl') {\n        renderer = webglRenderer;\n      } else if (rendererName === 'webgpu') {\n        renderer = webgpuRenderer;\n      } else if (rendererName === 'canvaskit') {\n        renderer = canvaskitRenderer;\n      }\n      canvas.setRenderer(renderer);\n    });\n  rendererFolder.open();\n\n  const circleFolder = gui.addFolder('animated circle');\n  const circleConfig = {\n    transformOriginX: 100,\n    transformOriginY: 100,\n    transformOrigin: 'center',\n  };\n  circleFolder\n    .add(circleConfig, 'transformOrigin', [\n      'left top',\n      'center',\n      'right bottom',\n      '50% 50%',\n      '50px 50px',\n    ])\n    .onChange((transformOrigin) => {\n      // set transformOrigin\n      circle.style.transformOrigin = transformOrigin;\n\n      // get calculated origin\n      const [ox, oy] = circle.getOrigin();\n\n      circleOrigin.style.cx = ox;\n      circleOrigin.style.cy = oy;\n\n      // update dat.gui\n      circleConfig.transformOriginX = ox;\n      circleConfig.transformOriginY = oy;\n    });\n  circleFolder\n    .add(circleConfig, 'transformOriginX', -200, 200)\n    .onChange((tx) => {\n      circle.style.transformOrigin = `${tx} ${circleConfig.transformOriginY}`;\n\n      const [ox, oy] = circle.getOrigin();\n      circleOrigin.style.cx = ox;\n      circleOrigin.style.cy = oy;\n    })\n    .listen();\n  circleFolder\n    .add(circleConfig, 'transformOriginY', -200, 200)\n    .onChange((ty) => {\n      circle.style.transformOrigin = `${circleConfig.transformOriginX}px ${ty}px`;\n\n      const [ox, oy] = circle.getOrigin();\n      circleOrigin.style.cx = ox;\n      circleOrigin.style.cy = oy;\n    })\n    .listen();\n  circleFolder.open();\n\n  const textFolder = gui.addFolder('text');\n  const textConfig = {\n    transformOriginX: 0,\n    transformOriginY: 0,\n    transformOrigin: 'left top',\n  };\n  textFolder\n    .add(textConfig, 'transformOrigin', [\n      'left top',\n      'center',\n      'right bottom',\n      '50% 50%',\n      '50px 50px',\n    ])\n    .onChange((transformOrigin) => {\n      // set transformOrigin\n      text.style.transformOrigin = transformOrigin;\n\n      // get calculated origin\n      const [ox, oy, oz] = text.getOrigin();\n\n      textOrigin.style.cx = ox;\n      textOrigin.style.cy = oy;\n\n      // update dat.gui\n      textConfig.transformOriginX = ox;\n      textConfig.transformOriginY = oy;\n    });\n  textFolder\n    .add(textConfig, 'transformOriginX', -200, 200)\n    .onChange((tx) => {\n      text.style.transformOrigin = `${tx} ${textConfig.transformOriginY}`;\n\n      const [ox, oy] = text.getOrigin();\n      textOrigin.style.cx = ox;\n      textOrigin.style.cy = oy;\n    })\n    .listen();\n  textFolder\n    .add(textConfig, 'transformOriginY', -200, 200)\n    .onChange((ty) => {\n      text.style.transformOrigin = `${textConfig.transformOriginX}px ${ty}px`;\n\n      const [ox, oy] = text.getOrigin();\n      textOrigin.style.cx = ox;\n      textOrigin.style.cy = oy;\n    })\n    .listen();\n  textFolder.open();\n\n  let lastCloned = child1;\n  const groupFolder = gui.addFolder('group');\n  const groupConfig = {\n    transformOriginX: 0,\n    transformOriginY: 0,\n    transformOrigin: 'left top',\n    appendChild: () => {\n      // // reset rotation\n      // group.setEulerAngles(0);\n      // // clone child\n      // const cloned = lastCloned.cloneNode();\n      // cloned.id = 'cloned';\n      // cloned.translateLocal(0, 100);\n      // group.appendChild(cloned);\n      // lastCloned = cloned;\n      // // reset transform origin, which will case re-calc origin\n      // group.style.transformOrigin = group.style.transformOrigin || 'left top';\n      // // get calculated origin\n      // const [ox, oy, oz] = group.style.origin;\n      // const [x, y, z] = group.getPosition(); // left top corner of Bounds\n      // origin.setPosition(x + ox, y + oy, z + oz);\n      // // update dat.gui\n      // groupConfig.originX = ox;\n      // groupConfig.originY = oy;\n    },\n  };\n  groupFolder\n    .add(groupConfig, 'transformOrigin', [\n      'left top',\n      'center',\n      'right bottom',\n      '50% 50%',\n      '50px 50px',\n    ])\n    .onChange((transformOrigin) => {\n      // set transformOrigin\n      group.style.transformOrigin = transformOrigin;\n\n      // get calculated origin\n      const [ox, oy, oz] = group.getOrigin();\n      const [x, y, z] = group.getPosition(); // left top corner of Bounds\n\n      groupOrigin.setPosition(x + ox, y + oy, z + oz);\n\n      // update dat.gui\n      groupConfig.transformOriginX = ox + x;\n      groupConfig.transformOriginY = oy + y;\n    });\n  groupFolder\n    .add(groupConfig, 'transformOriginX', -200, 200)\n    .onChange((tx) => {\n      group.style.transformOrigin = `${tx} ${groupConfig.transformOriginY}`;\n\n      const [ox, oy] = group.getOrigin();\n      const [lx, ly] = group.getPosition();\n      groupOrigin.setPosition(lx + ox, ly + oy);\n    })\n    .listen();\n  groupFolder\n    .add(groupConfig, 'transformOriginY', -200, 200)\n    .onChange((ty) => {\n      group.style.transformOrigin = `${groupConfig.transformOriginX}px ${ty}px`;\n\n      const [ox, oy] = group.getOrigin();\n      const [lx, ly] = group.getPosition();\n      groupOrigin.setPosition(lx + ox, ly + oy);\n    })\n    .listen();\n  groupFolder.add(groupConfig, 'appendChild');\n  groupFolder.open();\n\n  const polylineFolder = gui.addFolder('polyline');\n  const polylineConfig = {\n    transformOriginX: 50,\n    transformOriginY: 50,\n    transformOrigin: 'left top',\n  };\n  polylineFolder\n    .add(polylineConfig, 'transformOrigin', [\n      'left top',\n      'center',\n      'right bottom',\n      '50% 50%',\n      '50px 50px',\n    ])\n    .onChange((transformOrigin) => {\n      // set transformOrigin\n      polyline.style.transformOrigin = transformOrigin;\n\n      // get calculated origin\n      const [ox, oy] = polyline.getOrigin();\n      polylineOrigin.style.cx = ox;\n      polylineOrigin.style.cy = oy;\n\n      // update dat.gui\n      polylineConfig.transformOriginX = ox;\n      polylineConfig.transformOriginY = oy;\n    });\n  polylineFolder\n    .add(polylineConfig, 'transformOriginX', -200, 200)\n    .onChange((tx) => {\n      polyline.style.transformOrigin = `${tx} ${polylineConfig.transformOriginY}`;\n\n      const [ox, oy] = polyline.getOrigin();\n      polylineOrigin.style.cx = ox;\n      polylineOrigin.style.cy = oy;\n    })\n    .listen();\n  polylineFolder\n    .add(polylineConfig, 'transformOriginY', -200, 200)\n    .onChange((ty) => {\n      polyline.style.transformOrigin = `${polylineConfig.transformOriginX}px ${ty}px`;\n\n      const [ox, oy] = polyline.getOrigin();\n      polylineOrigin.style.cx = ox;\n      polylineOrigin.style.cy = oy;\n    })\n    .listen();\n  polylineFolder.open();\n});\n",title:{zh:"旋转和缩放中心",en:"Origin"},filename:"origin.js",isNew:!1},{id:"visibility",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*ZcrHSoLxRS8AAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Group } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\nsolarSystem\n   |    |\n   |   sun\n   |\n earthOrbit\n   |    |\n   |  earth\n   |\n  moonOrbit\n      |\n     moon\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const solarSystem = new Group({\n    id: 'solarSystem',\n  });\n  const earthOrbit = new Group({\n    id: 'earthOrbit',\n  });\n  const moonOrbit = new Group({\n    id: 'moonOrbit',\n  });\n\n  const sun = new Circle({\n    id: 'sun',\n    style: {\n      r: 100,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  const earth = new Circle({\n    id: 'earth',\n    style: {\n      r: 50,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  const moon = new Circle({\n    id: 'moon',\n    style: {\n      r: 25,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n\n  solarSystem.appendChild(sun);\n  solarSystem.appendChild(earthOrbit);\n  earthOrbit.appendChild(earth);\n  earthOrbit.appendChild(moonOrbit);\n  moonOrbit.appendChild(moon);\n\n  solarSystem.setPosition(300, 250);\n  earthOrbit.translate(100, 0);\n  moonOrbit.translate(50, 0);\n\n  canvas.appendChild(solarSystem);\n\n  // use AntV G devtools\n  window.__g_instances__ = [canvas];\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg'])\n    .onChange((renderer) => {\n      canvas.setRenderer(\n        renderer === 'canvas'\n          ? canvasRenderer\n          : renderer === 'webgl'\n          ? webglRenderer\n          : svgRenderer,\n      );\n    });\n  rendererFolder.open();\n\n  const sunFolder = gui.addFolder('sun');\n  const sunConfig = {\n    show: () => {\n      sun.attr('visibility', 'visible');\n    },\n    hide: () => {\n      sun.attr('visibility', 'hidden');\n    },\n    'z-index': 0,\n  };\n  sunFolder.add(sunConfig, 'hide').name('hide');\n  sunFolder.add(sunConfig, 'show').name('show');\n  sunFolder.add(sunConfig, 'z-index', 0, 100).onChange((zIndex) => {\n    sun.style.zIndex = zIndex;\n  });\n  sunFolder.open();\n\n  const earthFolder = gui.addFolder('earth');\n  const earthConfig = {\n    show: () => {\n      earth.attr('visibility', 'visible');\n    },\n    hide: () => {\n      earth.attr('visibility', 'hidden');\n    },\n    'z-index': 0,\n  };\n  earthFolder.add(earthConfig, 'hide').name('hide');\n  earthFolder.add(earthConfig, 'show').name('show');\n  earthFolder.add(earthConfig, 'z-index', 0, 100).onChange((zIndex) => {\n    earth.style.zIndex = zIndex;\n  });\n\n  const moonFolder = gui.addFolder('moon');\n  const moonConfig = {\n    show: () => {\n      moon.attr('visibility', 'visible');\n    },\n    hide: () => {\n      moon.attr('visibility', 'hidden');\n    },\n  };\n  moonFolder.add(moonConfig, 'hide').name('hide');\n  moonFolder.add(moonConfig, 'show').name('show');\n\n  const earthOrbitFolder = gui.addFolder('earthOrbit');\n  const earthOrbitConfig = {\n    show: () => {\n      earthOrbit.attr('visibility', 'visible');\n    },\n    hide: () => {\n      earthOrbit.attr('visibility', 'hidden');\n    },\n    'z-index': 0,\n  };\n  earthOrbitFolder.add(earthOrbitConfig, 'hide').name('hide');\n  earthOrbitFolder.add(earthOrbitConfig, 'show').name('show');\n  earthOrbitFolder\n    .add(earthOrbitConfig, 'z-index', 0, 100)\n    .onChange((zIndex) => {\n      earthOrbit.style.zIndex = zIndex;\n    });\n\n  const moonOrbitFolder = gui.addFolder('moonOrbit');\n  const moonOrbitConfig = {\n    show: () => {\n      moonOrbit.attr('visibility', 'visible');\n    },\n    hide: () => {\n      moonOrbit.attr('visibility', 'hidden');\n    },\n    'z-index': 0,\n  };\n  moonOrbitFolder.add(moonOrbitConfig, 'hide').name('hide');\n  moonOrbitFolder.add(moonOrbitConfig, 'show').name('show');\n  moonOrbitFolder.add(moonOrbitConfig, 'z-index', 0, 100).onChange((zIndex) => {\n    moonOrbit.style.zIndex = zIndex;\n  });\n});\n",title:{zh:"可见性和展示次序",en:"Visibility & Z-index"},filename:"visibility.js",isNew:!1},{id:"z-index",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*gW6rQpXFK30AAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Rect, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// ul1 -> li1\n//     -> li2\n// ul2 -> li3\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const ul1 = new Rect({\n    id: 'ul1',\n    style: {\n      width: 400,\n      height: 200,\n      fill: 'blue',\n    },\n  });\n  const ul1Text = new Text({\n    id: 'ui1-text',\n    style: {\n      text: 'ul1',\n      fontSize: 16,\n      fill: 'white',\n    },\n  });\n  const ul2 = new Rect({\n    id: 'ul2',\n    style: {\n      width: 300,\n      height: 250,\n      fill: '#1890FF',\n      lineWidth: 4,\n      stroke: 'white',\n    },\n  });\n  const ul2Text = new Text({\n    id: 'ui2-text',\n    style: {\n      text: 'ul2',\n      fontSize: 16,\n      fill: 'white',\n    },\n  });\n\n  const li1 = new Rect({\n    id: 'li1',\n    style: {\n      width: 200,\n      height: 50,\n      fill: '#1890FF',\n      lineWidth: 4,\n      stroke: 'white',\n    },\n  });\n  const li1Text = new Text({\n    id: 'li1-text',\n    style: {\n      text: 'li1',\n      fontSize: 16,\n      fill: 'white',\n    },\n  });\n  const li2 = new Rect({\n    id: 'li2',\n    style: {\n      width: 200,\n      height: 50,\n      fill: '#1890FF',\n      lineWidth: 4,\n      stroke: 'white',\n    },\n  });\n  const li2Text = new Text({\n    id: 'li2-text',\n    style: {\n      text: 'li2',\n      fontSize: 16,\n      fill: 'white',\n    },\n  });\n\n  ul1Text.translateLocal(260, 20);\n  ul1.appendChild(ul1Text);\n  ul1.setPosition(50, 50);\n  li1Text.translateLocal(10, 20);\n  li1.appendChild(li1Text);\n  li2Text.translateLocal(10, 20);\n  li2.appendChild(li2Text);\n  li2.translateLocal(20, 30);\n  ul1.appendChild(li1);\n  ul1.appendChild(li2);\n\n  ul2Text.translateLocal(60, 20);\n  ul2.appendChild(ul2Text);\n  ul2.setPosition(200, 100);\n\n  canvas.appendChild(ul1);\n  canvas.appendChild(ul2);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', [\n      'canvas',\n      'svg',\n      'webgl',\n      'webgpu',\n      'canvaskit',\n    ])\n    .onChange((rendererName) => {\n      let renderer;\n      if (rendererName === 'canvas') {\n        renderer = canvasRenderer;\n      } else if (rendererName === 'svg') {\n        renderer = svgRenderer;\n      } else if (rendererName === 'webgl') {\n        renderer = webglRenderer;\n      } else if (rendererName === 'webgpu') {\n        renderer = webgpuRenderer;\n      } else if (rendererName === 'canvaskit') {\n        renderer = canvaskitRenderer;\n      }\n      canvas.setRenderer(renderer);\n    });\n  rendererFolder.open();\n\n  const zIndexFolder = gui.addFolder('z-index');\n  const zIndexConfig = {\n    li1ZIndex: 0,\n    li2ZIndex: 0,\n    ul1ZIndex: 0,\n    ul2ZIndex: 0,\n  };\n  zIndexFolder.add(zIndexConfig, 'li1ZIndex', 0, 100).onChange((zIndex) => {\n    li1.style.zIndex = zIndex;\n  });\n  zIndexFolder.add(zIndexConfig, 'li2ZIndex', 0, 100).onChange((zIndex) => {\n    li2.style.zIndex = zIndex;\n  });\n  zIndexFolder.add(zIndexConfig, 'ul1ZIndex', 0, 100).onChange((zIndex) => {\n    ul1.style.zIndex = zIndex;\n  });\n  zIndexFolder.add(zIndexConfig, 'ul2ZIndex', 0, 100).onChange((zIndex) => {\n    ul2.style.zIndex = zIndex;\n  });\n  zIndexFolder.open();\n});\n",title:{zh:"展示次序",en:"Z-index"},filename:"z-index.js",isNew:!1},{id:"change-z-index",source:"import { Canvas, CanvasEvent, Group, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst group1 = new Group();\nconst group2 = new Group();\nconst rect1 = new Rect({\n  style: {\n    width: 100,\n    height: 100,\n    fill: 'blue',\n  },\n});\nconst rect2 = new Rect({\n  style: {\n    x: 50,\n    y: 50,\n    width: 100,\n    height: 100,\n    fill: 'red',\n  },\n});\ngroup1.appendChild(rect1);\ngroup2.appendChild(rect2);\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(group1);\n  canvas.appendChild(group2);\n\n  let t = false;\n  setInterval(() => {\n    if (t) {\n      group1.style.zIndex = 2;\n      group2.style.zIndex = 0;\n    } else {\n      group2.style.zIndex = 2;\n      group1.style.zIndex = 0;\n    }\n    t = !t;\n  }, 1000);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"修改 Group 上的 zIndex",en:"Change zIndex on Group"},filename:"change-z-index.js",isNew:!1},{id:"clone",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*PwEYSI_ijPEAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Plugin } from '@antv/g-plugin-dragndrop';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\ncanvasRenderer.registerPlugin(new Plugin());\nconst webglRenderer = new WebGLRenderer();\nwebglRenderer.registerPlugin(new Plugin());\nconst svgRenderer = new SVGRenderer();\nsvgRenderer.registerPlugin(new Plugin());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // add a circle to canvas\n  const circle = new Circle({\n    id: 'circle',\n    style: {\n      draggable: true,\n      fill: 'rgb(239, 244, 255)',\n      fillOpacity: 1,\n      lineWidth: 1,\n      opacity: 1,\n      r: 100,\n      stroke: 'rgb(95, 149, 255)',\n      strokeOpacity: 1,\n      cursor: 'pointer',\n    },\n  });\n\n  const text = new Text({\n    id: 'text',\n    style: {\n      draggable: true,\n      fill: '#000',\n      fillOpacity: 0.9,\n      font: `normal normal normal 12px Avenir, -apple-system, system-ui, \"Segoe UI\", \"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft YaHei\", \"Helvetica Neue\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      // fontFamily: `Avenir, -apple-system, system-ui, \"Segoe UI\", \"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft YaHei\", \"Helvetica Neue\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      // fontFamily: 'Arial, sans-serif',\n      // fontFamily: 'sans-serif',\n      fontFamily: 'Avenir',\n      // fontFamily: 'Times',\n      // fontFamily: 'Microsoft YaHei',\n      fontSize: 22,\n      fontStyle: 'normal',\n      fontVariant: 'normal',\n      fontWeight: 'normal',\n      lineWidth: 1,\n      opacity: 1,\n      strokeOpacity: 1,\n      text: 'Drag me',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    },\n  });\n\n  circle.appendChild(text);\n  canvas.appendChild(circle);\n  circle.setPosition(300, 200);\n\n  // handle dragging\n  let shiftX = 0;\n  let shiftY = 0;\n  function moveAt(target, canvasX, canvasY) {\n    target.setPosition(canvasX - shiftX, canvasY - shiftY);\n  }\n  circle.addEventListener('dragstart', function (e) {\n    circle.style.opacity = 0.5;\n    text.style.text = 'Drag me';\n\n    const [x, y] = e.target.getPosition();\n    shiftX = e.canvasX - x;\n    shiftY = e.canvasY - y;\n\n    moveAt(circle, e.canvasX, e.canvasY);\n\n    console.log('dragstart...');\n  });\n  circle.addEventListener('drag', function (e) {\n    moveAt(circle, e.canvasX, e.canvasY);\n    text.style.text = `Dragging...`;\n  });\n  circle.addEventListener('dragend', function (e) {\n    circle.style.opacity = 1;\n    text.style.text = 'Drag me';\n\n    console.log('dragend...');\n  });\n  circle.addEventListener('click', function (e) {\n    console.log('click...');\n  });\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n    clone: () => {\n      const cloned = circle.cloneNode(rendererConfig.deep);\n      canvas.appendChild(cloned);\n      cloned.toBack();\n      cloned.translateLocal(10, 10);\n    },\n    deep: false,\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg'])\n    .onChange((renderer) => {\n      canvas.setRenderer(\n        renderer === 'canvas'\n          ? canvasRenderer\n          : renderer === 'webgl'\n          ? webglRenderer\n          : svgRenderer,\n      );\n    });\n  rendererFolder.add(rendererConfig, 'clone');\n  rendererFolder.add(rendererConfig, 'deep');\n  rendererFolder.open();\n\n  const circleFolder = gui.addFolder('circle');\n  const circleConfig = {\n    r: 100,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    fillOpacity: 1,\n    strokeOpacity: 1,\n    anchorX: 0.5,\n    anchorY: 0.5,\n    shadowColor: '#000',\n    shadowBlur: 20,\n    shadowOffsetX: 0,\n    shadowOffsetY: 0,\n  };\n  circleFolder.add(circleConfig, 'r', 50, 200).onChange((radius) => {\n    circle.style.r = radius;\n  });\n  circleFolder.addColor(circleConfig, 'fill').onChange((color) => {\n    circle.style.fill = color;\n  });\n  circleFolder.addColor(circleConfig, 'stroke').onChange((color) => {\n    circle.attr('stroke', color);\n  });\n  circleFolder.addColor(circleConfig, 'shadowColor').onChange((color) => {\n    circle.attr('shadowColor', color);\n  });\n  circleFolder\n    .add(circleConfig, 'shadowBlur', 0, 100)\n    .onChange((shadowBlur) => {\n      circle.style.shadowBlur = shadowBlur;\n    });\n  circleFolder\n    .add(circleConfig, 'shadowOffsetX', -50, 50)\n    .onChange((shadowOffsetX) => {\n      circle.style.shadowOffsetX = shadowOffsetX;\n    });\n  circleFolder\n    .add(circleConfig, 'shadowOffsetY', -50, 50)\n    .onChange((shadowOffsetY) => {\n      circle.style.shadowOffsetY = shadowOffsetY;\n    });\n  circleFolder.add(circleConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n    circle.attr('lineWidth', lineWidth);\n  });\n  circleFolder\n    .add(circleConfig, 'fillOpacity', 0, 1, 0.1)\n    .onChange((opacity) => {\n      circle.attr('fillOpacity', opacity);\n    });\n  circleFolder\n    .add(circleConfig, 'strokeOpacity', 0, 1, 0.1)\n    .onChange((opacity) => {\n      circle.attr('strokeOpacity', opacity);\n    });\n  circleFolder.add(circleConfig, 'anchorX', 0, 1, 0.1).onChange((anchorX) => {\n    circle.attr('anchor', [anchorX, circleConfig.anchorY]);\n  });\n  circleFolder.add(circleConfig, 'anchorY', 0, 1, 0.1).onChange((anchorY) => {\n    circle.attr('anchor', [circleConfig.anchorX, anchorY]);\n  });\n});\n",title:{zh:"克隆节点",en:"Clone Node"},filename:"clone.js",isNew:!1}],icon:"",id:"basic",title:{en:"SceneGraph",zh:"场景图"},api:null,childrenKey:"demos",order:1}],childrenKey:"examples"},{id:"plugins",title:{zh:"插件",en:"Plugins"},examples:[{demos:[{id:"a11y-text-extractor",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin } from '@antv/g-plugin-a11y';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as d3 from 'd3';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * inspired by sprite.js\n * @see http://spritejs.com/#/en/guide/d3\n *\n * ported from fullstack-d3\n * @see https://codesandbox.io/s/vllpx?file=/chart.js\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\nconst plugin = new Plugin({\n  enableExtractingText: true,\n});\ncanvasRenderer.registerPlugin(plugin);\nsvgRenderer.registerPlugin(plugin);\nwebglRenderer.registerPlugin(plugin);\nwebgpuRenderer.registerPlugin(plugin);\ncanvaskitRenderer.registerPlugin(plugin);\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst drawBars = async () => {\n  // 1. Access data\n  const dataset = await d3.json(\n    'https://gw.alipayobjects.com/os/bmw-prod/8e7cfeb6-28e5-4e78-8d16-c08468360f5f.json',\n  );\n  const metricAccessor = (d) => d.humidity;\n  const yAccessor = (d) => d.length;\n\n  // 2. Create chart dimensions\n  const width = 600;\n  let dimensions = {\n    width: width,\n    height: width * 0.6,\n    margin: {\n      top: 30,\n      right: 10,\n      bottom: 50,\n      left: 50,\n    },\n  };\n  dimensions.boundedWidth =\n    dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  dimensions.boundedHeight =\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n\n  // 3. Draw canvas\n  const wrapper = d3.select(\n    canvas.document.documentElement, // use GCanvas' document element instead of a real DOM\n  );\n\n  const bounds = wrapper\n    .append('g')\n    .style(\n      'transform',\n      `translate(${dimensions.margin.left}px, ${dimensions.margin.top}px)`,\n    );\n\n  // 4. Create scales\n\n  const xScale = d3\n    .scaleLinear()\n    .domain(d3.extent(dataset, metricAccessor))\n    .range([0, dimensions.boundedWidth])\n    .nice();\n\n  const binsGenerator = d3\n    .bin()\n    .domain(xScale.domain())\n    .value(metricAccessor)\n    .thresholds(12);\n\n  const bins = binsGenerator(dataset);\n\n  const yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(bins, yAccessor)])\n    .range([dimensions.boundedHeight, 0])\n    .nice();\n\n  // 5. Draw data\n  const binsGroup = bounds.append('g');\n  const binGroups = binsGroup\n    .selectAll('g')\n    .data(bins)\n    .join('g')\n    .attr('class', 'bin');\n\n  const barPadding = 1;\n  const barRects = binGroups\n    .append('rect')\n    .attr('x', (d) => xScale(d.x0) + barPadding / 2)\n    .attr('y', (d) => yScale(yAccessor(d)))\n    .attr('width', (d) => d3.max([0, xScale(d.x1) - xScale(d.x0) - barPadding]))\n    .attr('height', (d) => dimensions.boundedHeight - yScale(yAccessor(d)))\n    .attr('fill', 'cornflowerblue')\n    .on('mouseenter', function (e) {\n      d3.select(e.target).attr('fill', 'red');\n    })\n    .on('mouseleave', function (e) {\n      d3.select(e.target).attr('fill', 'cornflowerblue');\n    });\n\n  const barText = binGroups\n    .filter(yAccessor)\n    .append('text')\n    .attr('x', (d) => xScale(d.x0) + (xScale(d.x1) - xScale(d.x0)) / 2)\n    .attr('y', (d) => yScale(yAccessor(d)) - 5)\n    .text(yAccessor)\n    .attr('fill', 'darkgrey')\n    .style('text-anchor', 'middle')\n    .style('font-size', '12px')\n    .style('font-family', 'sans-serif');\n\n  const mean = d3.mean(dataset, metricAccessor);\n  const meanLine = bounds\n    .append('line')\n    .attr('x1', xScale(mean))\n    .attr('x2', xScale(mean))\n    .attr('y1', -15)\n    .attr('y2', dimensions.boundedHeight)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'maroon')\n    .attr('stroke-dasharray', '2px 4px');\n\n  const meanLabel = bounds\n    .append('text')\n    .attr('x', xScale(mean))\n    .attr('y', -20)\n    .text('mean')\n    .attr('fill', 'maroon')\n    .style('font-size', '12px')\n    .style('text-anchor', 'middle');\n\n  // 6. Draw peripherals\n  const xAxisGenerator = d3.axisBottom().scale(xScale);\n\n  const xAxis = bounds\n    .append('g')\n    .call(xAxisGenerator)\n    .attr('transform', `translateY(${dimensions.boundedHeight}px)`)\n    .attr('fill', 'black');\n\n  const xAxisLabel = xAxis\n    .append('text')\n    .attr('x', dimensions.boundedWidth / 2)\n    .attr('y', dimensions.margin.bottom - 10)\n    .attr('fill', 'black')\n    .style('font-size', '10px')\n    .text('Humidity')\n    .style('text-transform', 'capitalize');\n};\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  drawBars();\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"使用浏览器搜索（command + F）文本内容",en:"Search text content in browser"},filename:"a11y-text-extractor.js",isNew:!1},{id:"a11y-keyboard-navigation",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin } from '@antv/g-plugin-a11y';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as d3 from 'd3';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * inspired by sprite.js\n * @see http://spritejs.com/#/en/guide/d3\n *\n * ported from fullstack-d3\n * @see https://codesandbox.io/s/vllpx?file=/chart.js\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\nconst plugin = new Plugin({\n  enableExtractingText: true,\n  containerAriaLabel: 'D3 barchart',\n});\ncanvasRenderer.registerPlugin(plugin);\nsvgRenderer.registerPlugin(plugin);\nwebglRenderer.registerPlugin(plugin);\nwebgpuRenderer.registerPlugin(plugin);\ncanvaskitRenderer.registerPlugin(plugin);\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst drawBars = async () => {\n  // 1. Access data\n  const dataset = await d3.json(\n    'https://gw.alipayobjects.com/os/bmw-prod/8e7cfeb6-28e5-4e78-8d16-c08468360f5f.json',\n  );\n  const metricAccessor = (d) => d.humidity;\n  const yAccessor = (d) => d.length;\n\n  // 2. Create chart dimensions\n  const width = 600;\n  let dimensions = {\n    width: width,\n    height: width * 0.6,\n    margin: {\n      top: 30,\n      right: 10,\n      bottom: 50,\n      left: 50,\n    },\n  };\n  dimensions.boundedWidth =\n    dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  dimensions.boundedHeight =\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n\n  // 3. Draw canvas\n  const wrapper = d3.select(\n    canvas.document.documentElement, // use GCanvas' document element instead of a real DOM\n  );\n\n  const bounds = wrapper\n    .append('g')\n    .style(\n      'transform',\n      `translate(${dimensions.margin.left}px, ${dimensions.margin.top}px)`,\n    );\n\n  // 4. Create scales\n\n  const xScale = d3\n    .scaleLinear()\n    .domain(d3.extent(dataset, metricAccessor))\n    .range([0, dimensions.boundedWidth])\n    .nice();\n\n  const binsGenerator = d3\n    .bin()\n    .domain(xScale.domain())\n    .value(metricAccessor)\n    .thresholds(12);\n\n  const bins = binsGenerator(dataset);\n\n  const yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(bins, yAccessor)])\n    .range([dimensions.boundedHeight, 0])\n    .nice();\n\n  // 5. Draw data\n  const binsGroup = bounds.append('g');\n  const binGroups = binsGroup\n    .selectAll('g')\n    .data(bins)\n    .join('g')\n    .attr('class', 'bin');\n\n  const barPadding = 1;\n  const barRects = binGroups\n    .append('rect')\n    .attr('x', (d) => xScale(d.x0) + barPadding / 2)\n    .attr('y', (d) => yScale(yAccessor(d)))\n    .attr('width', (d) => d3.max([0, xScale(d.x1) - xScale(d.x0) - barPadding]))\n    .attr('height', (d) => dimensions.boundedHeight - yScale(yAccessor(d)))\n    .attr('fill', 'cornflowerblue')\n    .attr('accessible', true)\n    .attr('tab-index', 0)\n    .attr('aria-label', yAccessor)\n    .on('mouseenter', function (e) {\n      d3.select(e.target).attr('fill', 'red');\n    })\n    .on('mouseleave', function (e) {\n      d3.select(e.target).attr('fill', 'cornflowerblue');\n    });\n\n  const barText = binGroups\n    .filter(yAccessor)\n    .append('text')\n    .attr('x', (d) => xScale(d.x0) + (xScale(d.x1) - xScale(d.x0)) / 2)\n    .attr('y', (d) => yScale(yAccessor(d)) - 5)\n    .text(yAccessor)\n    .attr('fill', 'darkgrey')\n    .style('text-anchor', 'middle')\n    .style('font-size', '12px')\n    .style('font-family', 'sans-serif');\n\n  const mean = d3.mean(dataset, metricAccessor);\n  const meanLine = bounds\n    .append('line')\n    .attr('x1', xScale(mean))\n    .attr('x2', xScale(mean))\n    .attr('y1', -15)\n    .attr('y2', dimensions.boundedHeight)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'maroon')\n    .attr('stroke-dasharray', '2px 4px');\n\n  const meanLabel = bounds\n    .append('text')\n    .attr('x', xScale(mean))\n    .attr('y', -20)\n    .text('mean')\n    .attr('fill', 'maroon')\n    .style('font-size', '12px')\n    .style('text-anchor', 'middle');\n\n  // 6. Draw peripherals\n  const xAxisGenerator = d3.axisBottom().scale(xScale);\n\n  const xAxis = bounds\n    .append('g')\n    .call(xAxisGenerator)\n    .attr('transform', `translateY(${dimensions.boundedHeight}px)`)\n    .attr('fill', 'black');\n\n  const xAxisLabel = xAxis\n    .append('text')\n    .attr('x', dimensions.boundedWidth / 2)\n    .attr('y', dimensions.margin.bottom - 10)\n    .attr('fill', 'black')\n    .style('font-size', '10px')\n    .text('Humidity')\n    .style('text-transform', 'capitalize');\n};\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  drawBars();\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"使用键盘导航",en:"Use keyboard navigation"},filename:"a11y-keyboard-navigation.js",isNew:!1}],icon:"",id:"a11y",title:{en:"A11y",zh:"无障碍"},api:null,childrenKey:"demos",order:11},{demos:[{id:"skottie",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*_usaTqSm6vYAAAAAAAAAAAAAARQnAQ",source:"import { Canvas } from '@antv/g';\nimport { Renderer } from '@antv/g-canvaskit';\n\n/**\n * Skottie is a performant, secure native player for JSON animations derived from the Bodymovin plugin for After Effects.\n * @see https://skia.org/docs/user/modules/skottie/\n */\n\nconst canvaskitRenderer = new Renderer({\n  wasmDir: '/',\n});\nconst plugin = canvaskitRenderer.getPlugin('canvaskit-renderer');\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvaskitRenderer,\n});\n\n(async () => {\n  const cdn = 'https://storage.googleapis.com/skia-cdn/misc/';\n\n  const [\n    _,\n    legoJSON,\n    confettiJSON,\n    drinkJSON,\n    multiframeJSON,\n    flightGif,\n    onboardingJSON,\n    twitterJSON,\n  ] = await Promise.all([\n    canvas.ready,\n    fetch(cdn + 'lego_loader.json').then((response) => response.text()),\n    fetch(cdn + 'confetti.json').then((response) => response.text()),\n    fetch(cdn + 'drinks.json').then((response) => response.text()),\n    fetch(cdn + 'skottie_sample_multiframe.json').then((response) =>\n      response.text(),\n    ),\n    fetch(cdn + 'flightAnim.gif').then((response) => response.arrayBuffer()),\n    fetch(cdn + 'onboarding.json').then((response) => response.text()),\n    fetch('/lottie/twitter-favorite-heart.json').then((response) =>\n      response.text(),\n    ),\n  ]);\n\n  plugin.playAnimation('sk_legos', legoJSON, [-100, -100, 300, 300]);\n  plugin.playAnimation('sk_party', confettiJSON, [200, -100, 400, 400]);\n  plugin.playAnimation('sk_drink', drinkJSON, [0, 200, 200, 400]);\n  plugin.playAnimation(\n    'sk_animated_gif',\n    multiframeJSON,\n    [200, 200, 400, 400],\n    {\n      'image_0.png': flightGif,\n    },\n  );\n  plugin.playAnimation('sk_onboarding', onboardingJSON, [350, 0, 550, 200]);\n  plugin.playAnimation('sk_twitter', twitterJSON, [400, 200, 600, 400]);\n})();\n",title:{zh:"使用 Skottie 播放 Lottie 动画",en:"Use Skottie playing Lottie animations"},filename:"skottie.js",isNew:!1},{id:"canvaskit-particles",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*919sR5Oxx_kAAAAAAAAAAAAAARQnAQ",source:"import { Canvas } from '@antv/g';\nimport { Renderer } from '@antv/g-canvaskit';\n\n/**\n * Skia’s particle module provides a way to quickly generate large numbers of drawing primitives with dynamic, animated behavior.\n * Particles can be used to create effects like fireworks, spark trails, ambient “weather”, and much more.\n * Nearly all properties and behavior are controlled by scripts written in Skia’s custom language, SkSL\n * @see https://skia.org/docs/user/modules/particles/\n * @see https://particles.skia.org/?nameOrHash=@text\n */\n\nconst canvaskitRenderer = new Renderer({\n  wasmDir: '/',\n});\nconst plugin = canvaskitRenderer.getPlugin('canvaskit-renderer');\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvaskitRenderer,\n});\n\nconst text = {\n  MaxCount: 2000,\n  Drawable: {\n    Type: 'SkCircleDrawable',\n    Radius: 1,\n  },\n  Code: [\n    'void effectSpawn(inout Effect effect) {',\n    '  effect.rate = 1000;',\n    '}',\n    '',\n    'void spawn(inout Particle p) {',\n    '  p.lifetime = mix(1, 3, rand(p.seed));',\n    '  float a = radians(mix(250, 290, rand(p.seed)));',\n    '  float s = mix(10, 30, rand(p.seed));',\n    '  p.vel.x = cos(a) * s;',\n    '  p.vel.y = sin(a) * s;',\n    '  p.pos += text(rand(p.seed)).xy;',\n    '}',\n    '',\n    'void update(inout Particle p) {',\n    '  float4 startColor = float4(1, 0.196, 0.078, 1);',\n    '  float4 endColor   = float4(1, 0.784, 0.078, 1);',\n    '  p.color = mix(startColor, endColor, p.age);',\n    '}',\n    '',\n  ],\n  Bindings: [\n    {\n      Type: 'SkTextBinding',\n      Name: 'text',\n      Text: 'AntV',\n      FontSize: 96,\n    },\n  ],\n};\n\nconst curves = {\n  MaxCount: 1000,\n  Drawable: {\n    Type: 'SkCircleDrawable',\n    Radius: 2,\n  },\n  Code: [\n    `\n    void effectSpawn(inout Effect effect) {\n      effect.rate = 200;\n      effect.color = float4(1, 0, 0, 1);\n    }\n    void spawn(inout Particle p) {\n      p.lifetime = 3 + rand(p.seed);\n      p.vel.y = -50;\n    }\n\n    void update(inout Particle p) {\n      float w = mix(15, 3, p.age);\n      p.pos.x = sin(radians(p.age * 320)) * mix(25, 10, p.age) + mix(-w, w, rand(p.seed));\n      if (rand(p.seed) < 0.5) { p.pos.x = -p.pos.x; }\n\n      p.color.g = (mix(75, 220, p.age) + mix(-30, 30, rand(p.seed))) / 255;\n    }\n    `,\n  ],\n  Bindings: [],\n};\n\nconst fireworks = {\n  MaxCount: 300,\n  Drawable: {\n    Type: 'SkCircleDrawable',\n    Radius: 3,\n  },\n  Code: [\n    'void effectSpawn(inout Effect effect) {',\n    '  // Phase one: Launch',\n    '  effect.lifetime = 4;',\n    '  effect.rate = 120;',\n    '  float a = radians(mix(-20, 20, rand(effect.seed)) - 90);',\n    '  float s = mix(200, 220, rand(effect.seed));',\n    '  effect.vel.x = cos(a) * s;',\n    '  effect.vel.y = sin(a) * s;',\n    '  effect.color.rgb = float3(rand(effect.seed), rand(effect.seed), rand(effect.seed));',\n    '  effect.pos.x = 0;',\n    '  effect.pos.y = 0;',\n    '  effect.scale = 0.25;  // Also used as particle behavior flag',\n    '}',\n    '',\n    'void effectUpdate(inout Effect effect) {',\n    '  if (effect.age > 0.5 && effect.rate > 0) {',\n    '    // Phase two: Explode',\n    '    effect.rate = 0;',\n    '    effect.burst = 50;',\n    '    effect.scale = 1;',\n    '  } else {',\n    '    effect.vel.y += dt * 90;',\n    '  }',\n    '}',\n    '',\n    'void spawn(inout Particle p) {',\n    '  bool explode = p.scale == 1;',\n    '',\n    '  p.lifetime = explode ? (2 + rand(p.seed) * 0.5) : 0.5;',\n    '  float a = radians(rand(p.seed) * 360);',\n    '  float s = explode ? mix(90, 100, rand(p.seed)) : mix(5, 10, rand(p.seed));',\n    '  p.vel.x = cos(a) * s;',\n    '  p.vel.y = sin(a) * s;',\n    '}',\n    '',\n    'void update(inout Particle p) {',\n    '  p.color.a = 1 - p.age;',\n    '  if (p.scale == 1) {',\n    '    p.vel.y += dt * 50;',\n    '  }',\n    '}',\n    '',\n  ],\n  Bindings: [],\n};\n\nconst spiral = {\n  MaxCount: 800,\n  Drawable: {\n    Type: 'SkCircleDrawable',\n    Radius: 2,\n  },\n  Code: [\n    'void effectSpawn(inout Effect effect) {',\n    '  effect.lifetime = 4;',\n    '  effect.rate = 120;',\n    '  effect.spin = 6;',\n    '}',\n    '',\n    'void spawn(inout Particle p) {',\n    '  p.lifetime = 2 + rand(p.seed);',\n    '  p.vel = p.dir * mix(50, 60, rand(p.seed));',\n    '}',\n    '',\n    'void update(inout Particle p) {',\n    '  p.scale = 0.5 + 1.5 * p.age;',\n    '  float3 a0 = float3(0.098, 0.141, 0.784);',\n    '  float3 a1 = float3(0.525, 0.886, 0.980);',\n    '  float3 b0 = float3(0.376, 0.121, 0.705);',\n    '  float3 b1 = float3(0.933, 0.227, 0.953);',\n    '  p.color.rgb = mix(mix(a0, a1, p.age), mix(b0, b1, p.age), rand(p.seed));',\n    '}',\n    '',\n  ],\n  Bindings: [],\n};\n\nconst wave = {\n  MaxCount: 6000,\n  Drawable: {\n    Type: 'SkCircleDrawable',\n    Radius: 2,\n  },\n  Code: [\n    'void effectSpawn(inout Effect effect) {',\n    '  effect.rate = 2000;',\n    '}',\n    '',\n    'void effectUpdate(inout Effect effect) {',\n    '}',\n    '',\n    'void spawn(inout Particle p) {',\n    '  p.pos.y += sin(effect.age * 6.28) * 40;',\n    '  p.lifetime = 2 + (rand(p.seed) * 2);',\n    '  p.vel.x = (30 * rand(p.seed)) + 50;',\n    '  p.vel.y = (20 * rand(p.seed)) - 10;',\n    '}',\n    '',\n    'void update(inout Particle p) {',\n    '  p.color.r = p.age;',\n    '  p.color.g = 1 - p.age;',\n    '  float s1 = 0.5 + (1.5 * p.age);',\n    '  float s2 = 1.0 + (-0.75 * p.age);',\n    '  p.scale = s1 + (s2 - s1) * rand(p.seed);',\n    '  p.vel.y += 20.0 * dt;',\n    '}',\n    '',\n  ],\n  Bindings: [],\n};\n\n(async () => {\n  await canvas.ready;\n\n  // curve\n  const curveParticles = plugin.createParticles(\n    JSON.stringify(curves),\n    (canvas) => {\n      canvas.translate(100, 250);\n    },\n  );\n  curveParticles.start(Date.now() / 1000.0, true);\n\n  // text\n  const textParticles = plugin.createParticles(\n    JSON.stringify(text),\n    (canvas) => {\n      canvas.translate(250, 250);\n    },\n  );\n  textParticles.start(Date.now() / 1000.0, true);\n\n  // fireworks\n  const fireworksParticles = plugin.createParticles(\n    JSON.stringify(fireworks),\n    (canvas) => {\n      canvas.translate(100, 350);\n    },\n  );\n  fireworksParticles.start(Date.now() / 1000.0, true);\n\n  // spiral\n  const spiralParticles = plugin.createParticles(\n    JSON.stringify(spiral),\n    (canvas) => {\n      canvas.translate(350, 350);\n      canvas.scale(0.5, 0.5);\n    },\n  );\n  spiralParticles.start(Date.now() / 1000.0, true);\n\n  // wave\n  const waveParticles = plugin.createParticles(\n    JSON.stringify(wave),\n    (canvas) => {\n      canvas.translate(50, 350);\n      canvas.scale(0.5, 0.5);\n    },\n  );\n  waveParticles.start(Date.now() / 1000.0, true);\n})();\n",title:{zh:"使用 CanvasKit 绘制粒子",en:"Use CanvasKit drawing particles"},filename:"canvaskit-particles.js",isNew:!1},{id:"canvaskit-emoji",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*_q9uQLTx6ssAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, Text } from '@antv/g';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\n\n/**\n * Draw emoji with Noto Emoji\n * ported from @see https://codesandbox.io/s/dsiuc?file=/src/index.js\n * @see https://github.com/googlefonts/noto-emoji\n */\n\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'Noto Color Emoji',\n      url: '/NotoColorEmoji.ttf',\n    },\n  ],\n});\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvaskitRenderer,\n});\n\n(async () => {\n  await canvas.ready;\n\n  const emoji = new Text({\n    style: {\n      fontFamily: 'Roboto, Noto Color Emoji',\n      fontSize: 30,\n      fill: 'black',\n      text: 'Emoji 🍕🍔🍟🥝🍱🕶🎩👩‍👩‍👦👩‍👩‍👧‍👧👩‍👩‍👦👩‍👩‍👧‍👧👩‍👩‍👦👩‍👩‍👧‍👧👩‍👩‍👦👩‍👩‍👧‍👧👩‍👩‍👦👩‍👩‍👧‍👧👩‍👩‍👦👩‍👩‍👧‍👧👩‍👩‍👦👩‍👩‍👧‍👧',\n      wordWrap: true,\n      wordWrapWidth: 200,\n\n      strutStyle: {\n        strutEnabled: true,\n        fontFamilies: ['Roboto', 'Noto Color Emoji'],\n        fontSize: 30,\n        // mapping css line-height to this is does not seem 1:1\n        heightMultiplier: 1,\n        forceStrutHeight: true,\n      },\n    },\n  });\n  emoji.translate(100, 300);\n  canvas.appendChild(emoji);\n})();\n\n// compared with native browser\nconst newStyle = document.createElement('style');\nnewStyle.appendChild(\n  document.createTextNode(`\n@font-face {\n  src: url(\"https://storage.googleapis.com/skia-cdn/google-web-fonts/Roboto-Regular.ttf\");\n  font-family: \"MyRoboto\";\n  font-style: normal;\n}\n\n@font-face {\n  font-family: \"MyNoto Color Emoji\";\n  src: url(\"https://storage.googleapis.com/skia-cdn/misc/NotoColorEmoji.ttf\");\n  font-style: normal;\n}\n`),\n);\ndocument.head.appendChild(newStyle);\n\nconst $div = document.createElement('div');\n$div.setAttribute('id', 'editor');\n$div.setAttribute('contenteditable', true);\n$div.innerHTML = 'Emoji 🍕🍔🍟🥝🍱🕶🎩👩‍👩‍👦👩‍👩‍👧‍👧👩‍👩‍👦👩‍👩‍👧‍👧👩‍👩‍👦👩‍👩‍👧‍👧👩‍👩‍👦👩‍👩‍👧‍👧👩‍👩‍👦👩‍👩‍👧‍👧👩‍👩‍👦👩‍👩‍👧‍👧👩‍👩‍👦👩‍👩‍👧‍👧';\n$div.style = `\n  font-family: \"MyRoboto\", \"MyNoto Color Emoji\";\n  line-height: 1;\n  font-size: 30px;\n  width: 200px;\n  color: black;\n  margin-left: 100px;\n`;\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($div);\n",title:{zh:"绘制 emoji",en:"Draw emoji"},filename:"canvaskit-emoji.js",isNew:!1},{id:"canvaskit-text-along-path",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*7voUQqLoKrEAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, Path, Text } from '@antv/g';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\n\n/**\n * Draw text along a path.\n * @see https://fiddle.skia.org/c/@Canvas_drawTextRSXform\n *\n * TextStyle API:\n * @see https://api.flutter.dev/flutter/painting/TextStyle-class.html\n */\n\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvaskitRenderer,\n});\n\n(async () => {\n  await canvas.ready;\n\n  const alongPath = new Path({\n    style: {\n      d: 'M 0,40 C 5.5555555555555545,40,22.222222222222218,44.44444444444445,33.33333333333333,40 C 44.444444444444436,35.55555555555556,55.55555555555554,14.66666666666667,66.66666666666666,13.333333333333336 C 77.77777777777777,12.000000000000002,88.88888888888887,32,100,32 C 111.11111111111113,32,122.22222222222221,14.66666666666667,133.33333333333331,13.333333333333336 C 144.44444444444443,12.000000000000002,155.55555555555557,24,166.66666666666669,24 C 177.7777777777778,24,188.8888888888889,11.111111111111114,200,13.333333333333336 C 211.1111111111111,15.555555555555557,222.22222222222226,35.111111111111114,233.33333333333334,37.333333333333336 C 244.44444444444443,39.55555555555555,255.55555555555551,31.22222222222223,266.66666666666663,26.66666666666667 C 277.77777777777777,22.111111111111114,294.4444444444444,12.777777777777779,300,10',\n    },\n  });\n\n  const text = new Text({\n    style: {\n      fontFamily: 'sans-serif',\n      fontSize: 22,\n      fill: '#1890FF',\n      text: 'abcdefghijklmn这是测试文字',\n      alongPath,\n    },\n  });\n  text.translate(100, 100);\n  canvas.appendChild(text);\n})();\n",title:{zh:"沿路径绘制文本",en:"Draw text along path"},filename:"canvaskit-text-along-path.js",isNew:!1},{id:"canvaskit-paragraph",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*DYqRQLtqtIUAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Text } from '@antv/g';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * Use paragraph shaping.\n * @see https://skia.org/docs/user/modules/quickstart/#text-shaping\n *\n * @see https://github.com/flutter/flutter/issues/76473\n * @see https://github.com/flutter/flutter/issues/90135#issuecomment-984916656\n *\n * TextStyle API:\n * @see https://api.flutter.dev/flutter/painting/TextStyle-class.html\n */\n\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvaskitRenderer,\n});\n\n(async () => {\n  await canvas.ready;\n\n  const ellipsisText = new Text({\n    style: {\n      fontFamily: 'Roboto',\n      fontSize: 22,\n      fill: '#1890FF',\n      text: 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz',\n      wordWrap: true,\n      wordWrapWidth: 100,\n      maxLines: 3,\n      ellipsis: '...',\n    },\n  });\n  ellipsisText.translate(100, 100);\n  canvas.appendChild(ellipsisText);\n\n  const decoratedText = new Text({\n    style: {\n      fontFamily: 'sans-serif',\n      fontSize: 22,\n      fill: '#1890FF',\n      text: 'abcdefghijklmnopqrstuvwxyz这是测试文本',\n      wordWrap: true,\n      wordWrapWidth: 100,\n      decorationLine: 'underline',\n      decorationThickness: 1.5,\n    },\n  });\n  decoratedText.translate(100, 300);\n  canvas.appendChild(decoratedText);\n\n  const shadowedText = new Text({\n    style: {\n      fontFamily: 'sans-serif',\n      fontSize: 22,\n      fill: '#1890FF',\n      text: 'abcdefghijklmnopqrstuvwxyz这是测试文本',\n      wordWrap: true,\n      wordWrapWidth: 100,\n      shadows: [\n        {\n          color: 'black',\n          blurRadius: 15,\n        },\n        {\n          color: 'red',\n          blurRadius: 5,\n          offset: [10, 10],\n        },\n      ],\n    },\n  });\n  shadowedText.translate(300, 300);\n  canvas.appendChild(shadowedText);\n\n  // fontFeatures\n  const fontFeaturesText = new Text({\n    style: {\n      fontFamily: 'Roboto',\n      fontSize: 22,\n      fill: '#1890FF',\n      text: 'Difficult waffles 0O 3.14',\n      fontFeatures: [\n        {\n          name: 'smcp',\n          value: 1,\n        },\n        {\n          name: 'zero',\n          value: 1,\n        },\n      ],\n    },\n  });\n  fontFeaturesText.translate(300, 100);\n  canvas.appendChild(fontFeaturesText);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const folder = gui.addFolder('Paragraph');\n  const config = {\n    wordWrap: true,\n    wordWrapWidth: 100,\n    decorationLine: 'underline',\n    decorationThickness: 1.5,\n    decorationColor: '#1890FF',\n    decorationStyle: 'solid',\n    direction: 'ltr',\n    fill: '#1890FF',\n    backgroundColor: 'white',\n    foregroundColor: '#1890FF',\n    shadows: [],\n    halfLeading: false,\n    heightMultiplier: 1,\n    letterSpacing: 0,\n    wordSpacing: 0,\n    disableHinting: false,\n  };\n  folder.addColor(config, 'fill').onChange((fill) => {\n    decoratedText.style.fill = fill;\n  });\n  folder.addColor(config, 'backgroundColor').onChange((backgroundColor) => {\n    decoratedText.style.backgroundColor = backgroundColor;\n  });\n  folder.addColor(config, 'foregroundColor').onChange((foregroundColor) => {\n    decoratedText.style.foregroundColor = foregroundColor;\n  });\n  folder.add(config, 'wordWrap').onChange((wordWrap) => {\n    decoratedText.style.wordWrap = wordWrap;\n  });\n  folder.add(config, 'wordWrapWidth', 50, 200).onChange((wordWrapWidth) => {\n    decoratedText.style.wordWrapWidth = wordWrapWidth;\n  });\n  folder.add(config, 'heightMultiplier', 0, 5).onChange((heightMultiplier) => {\n    decoratedText.style.heightMultiplier = heightMultiplier;\n  });\n  folder.add(config, 'letterSpacing', 0, 10).onChange((letterSpacing) => {\n    decoratedText.style.letterSpacing = letterSpacing;\n  });\n  folder.add(config, 'wordSpacing', 0, 10).onChange((wordSpacing) => {\n    decoratedText.style.wordSpacing = wordSpacing;\n  });\n  folder.add(config, 'disableHinting').onChange((disableHinting) => {\n    decoratedText.style.disableHinting = disableHinting;\n  });\n  folder.add(config, 'halfLeading').onChange((halfLeading) => {\n    decoratedText.style.halfLeading = halfLeading;\n  });\n  folder\n    .add(config, 'decorationLine', [\n      'none',\n      'underline',\n      'overline',\n      'line-through',\n    ])\n    .onChange((decorationLine) => {\n      decoratedText.style.decorationLine = decorationLine;\n    });\n  folder\n    .add(config, 'decorationThickness', 0, 5)\n    .onChange((decorationThickness) => {\n      decoratedText.style.decorationThickness = decorationThickness;\n    });\n  folder.addColor(config, 'decorationColor').onChange((decorationColor) => {\n    decoratedText.style.decorationColor = decorationColor;\n  });\n  folder\n    .add(config, 'decorationStyle', [\n      'solid',\n      'double',\n      'dotted',\n      'dashed',\n      'wavy',\n    ])\n    .onChange((decorationStyle) => {\n      decoratedText.style.decorationStyle = decorationStyle;\n    });\n  folder.add(config, 'direction', ['ltr', 'rtl']).onChange((direction) => {\n    decoratedText.style.direction = direction;\n  });\n\n  const strutFolder = gui.addFolder('StrutStyle');\n  const strutConfig = {\n    fontFamilies: ['sans-serif'],\n    strutEnabled: false,\n    fontSize: 22,\n    heightMultiplier: 1,\n    leading: 0,\n    halfLeading: false,\n    forceStrutHeight: false,\n  };\n  strutFolder.add(strutConfig, 'strutEnabled').onChange((strutEnabled) => {\n    decoratedText.style.strutStyle = strutConfig;\n  });\n  strutFolder.add(strutConfig, 'fontSize', 10, 40).onChange((fontSize) => {\n    decoratedText.style.strutStyle = strutConfig;\n  });\n  strutFolder\n    .add(strutConfig, 'heightMultiplier', 0, 5)\n    .onChange((heightMultiplier) => {\n      decoratedText.style.strutStyle = strutConfig;\n    });\n  strutFolder\n    .add(strutConfig, 'leading', 0, 10)\n    .onChange((heightMultiplier) => {\n      decoratedText.style.strutStyle = strutConfig;\n    });\n  strutFolder.add(strutConfig, 'halfLeading').onChange((halfLeading) => {\n    decoratedText.style.strutStyle = strutConfig;\n  });\n  strutFolder.add(strutConfig, 'forceStrutHeight').onChange((halfLeading) => {\n    decoratedText.style.strutStyle = strutConfig;\n  });\n})();\n",title:{zh:"使用 CanvasKit 绘制文本段落",en:"Draw paragraph with CanvasKit"},filename:"canvaskit-paragraph.js",isNew:!1}],icon:"",id:"canvaskit",title:{en:"Canvaskit",zh:"Canvaskit"},api:null,childrenKey:"demos",order:11},{demos:[{id:"dragndrop",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*A14uTY9_5UEAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Image, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin } from '@antv/g-plugin-dragndrop';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * Drag'n'Drop with PointerEvents\n * @see https://javascript.info/mouse-drag-and-drop\n */\n\nconst plugin = new Plugin({\n  // we can drag the whole document from empty space now!\n  isDocumentDraggable: true,\n  isDocumentDroppable: true,\n  dragstartDistanceThreshold: 10,\n  dragstartTimeThreshold: 100,\n});\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\ncanvasRenderer.registerPlugin(plugin);\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\ncanvaskitRenderer.registerPlugin(plugin);\nconst webglRenderer = new WebGLRenderer();\nwebglRenderer.registerPlugin(plugin);\nconst svgRenderer = new SVGRenderer();\nsvgRenderer.registerPlugin(plugin);\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const gate = new Image({\n    style: {\n      droppable: true,\n      x: 50,\n      y: 100,\n      width: 200,\n      height: 100,\n      src: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*wLJaQ4EuUSYAAAAAAAAAAAAADmJ7AQ/original',\n    },\n  });\n\n  const ball = new Image({\n    style: {\n      draggable: true,\n      x: 300,\n      y: 200,\n      width: 100,\n      height: 100,\n      src: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*StLOQqlKYr0AAAAAAAAAAAAADmJ7AQ/original',\n      cursor: 'pointer',\n    },\n  });\n\n  canvas.appendChild(gate);\n  canvas.appendChild(ball);\n\n  const gateText = new Text({\n    style: {\n      x: 50,\n      y: 350,\n      fill: 'black',\n      text: '',\n      pointerEvents: 'none',\n    },\n  });\n  const ballText = new Text({\n    style: {\n      x: 50,\n      y: 400,\n      fill: 'black',\n      text: '',\n      pointerEvents: 'none',\n    },\n  });\n  canvas.appendChild(gateText);\n  canvas.appendChild(ballText);\n\n  let shiftX = 0;\n  let shiftY = 0;\n  function moveAt(target, canvasX, canvasY) {\n    target.setPosition(canvasX - shiftX, canvasY - shiftY);\n  }\n\n  ball.addEventListener('dragstart', function (e) {\n    e.target.style.opacity = 0.5;\n    ballText.style.text = 'ball dragstart';\n\n    const [x, y] = e.target.getPosition();\n    shiftX = e.canvasX - x;\n    shiftY = e.canvasY - y;\n\n    moveAt(e.target, e.canvasX, e.canvasY);\n  });\n  ball.addEventListener('drag', function (e) {\n    moveAt(e.target, e.canvasX, e.canvasY);\n    ballText.style.text = `ball drag movement: ${e.dx}, ${e.dy}`;\n  });\n  ball.addEventListener('dragend', function (e) {\n    e.target.style.opacity = 1;\n    ballText.style.text = 'ball dragend';\n  });\n\n  gate.addEventListener('dragenter', function (e) {\n    e.target.style.opacity = 0.6;\n    gateText.style.text = 'gate dragenter';\n  });\n  gate.addEventListener('dragleave', function (e) {\n    e.target.style.opacity = 1;\n    gateText.style.text = 'gate dragleave';\n  });\n  gate.addEventListener('dragover', function (e) {\n    e.target.style.opacity = 0.6;\n    gateText.style.text = 'gate dragover';\n  });\n  gate.addEventListener('drop', function (e) {\n    e.target.style.opacity = 1;\n    gateText.style.text = 'gate drop';\n  });\n\n  // move camera\n  const camera = canvas.getCamera();\n  canvas.addEventListener('drag', function (e) {\n    if (e.target === canvas.document) {\n      camera.pan(-e.dx, -e.dy);\n    }\n  });\n  canvas.addEventListener('drop', function (e) {\n    if (e.target === canvas.document) {\n      console.log('drop on document');\n    }\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"使用拖放",en:"Use Drag'n'Drop"},filename:"dragndrop.js",isNew:!1},{id:"dragndrop-group",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*TBlQQYoxQfQAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Circle, Group, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin } from '@antv/g-plugin-dragndrop';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * Drag'n'Drop with PointerEvents\n * @see https://javascript.info/mouse-drag-and-drop\n */\n\nconst plugin = new Plugin({\n  // we can drag the whole document from empty space now!\n  isDocumentDraggable: true,\n  isDocumentDroppable: true,\n  dragstartDistanceThreshold: 10,\n  dragstartTimeThreshold: 100,\n});\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\ncanvasRenderer.registerPlugin(plugin);\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\ncanvaskitRenderer.registerPlugin(plugin);\nconst webglRenderer = new WebGLRenderer();\nwebglRenderer.registerPlugin(plugin);\nconst svgRenderer = new SVGRenderer();\nsvgRenderer.registerPlugin(plugin);\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const draggableGroup1 = new Group({\n    style: {\n      draggable: true,\n    },\n  });\n  const node1 = new Circle({\n    style: {\n      r: 50,\n      transform: 'translate(100, 150)',\n      fill: 'blue',\n      cursor: 'move',\n    },\n  });\n  const text1 = new Text({\n    style: {\n      fill: 'white',\n      text: 'node1',\n      textAlign: 'center',\n      textBaseline: 'middle',\n      pointerEvents: 'none',\n    },\n  });\n  draggableGroup1.appendChild(node1);\n  node1.appendChild(text1);\n\n  const draggableGroup2 = draggableGroup1.cloneNode(true);\n  const node2 = draggableGroup2.childNodes[0];\n  (node2.style.transform = 'translate(200, 250)'),\n    (node2.children[0].style.text = 'node2');\n\n  const droppableGroup1 = new Group({\n    style: {\n      droppable: true,\n    },\n  });\n  const group1 = new Circle({\n    style: {\n      r: 120,\n      cx: 150,\n      cy: 200,\n      fill: 'white',\n      stroke: 'black',\n    },\n  });\n  droppableGroup1.appendChild(group1);\n  const droppableGroup2 = droppableGroup1.cloneNode(true);\n  droppableGroup2.childNodes[0].style.cx = 400;\n  droppableGroup2.style.zIndex = -1;\n\n  group1.appendChild(draggableGroup1);\n  group1.appendChild(draggableGroup2);\n\n  canvas.appendChild(droppableGroup1);\n  canvas.appendChild(droppableGroup2);\n\n  // move camera\n  const camera = canvas.getCamera();\n\n  let shiftX = 0;\n  let shiftY = 0;\n  function moveAt(target, canvasX, canvasY) {\n    target.setPosition(canvasX - shiftX, canvasY - shiftY);\n  }\n  canvas.addEventListener('dragstart', function (e) {\n    const { target, canvasX, canvasY } = e;\n\n    switch (target) {\n      case draggableGroup1:\n      case draggableGroup2:\n        const [x, y] = target.getPosition();\n        shiftX = canvasX - x;\n        shiftY = canvasY - y;\n\n        moveAt(target, canvasX, canvasY);\n        target.childNodes[0].style.opacity = 0.5;\n    }\n  });\n  canvas.addEventListener('drag', function (e) {\n    const { target, canvasX, canvasY, dx, dy } = e;\n\n    switch (target) {\n      case canvas.document:\n        camera.pan(-dx, -dy);\n        break;\n      case draggableGroup1:\n      case draggableGroup2:\n        moveAt(target, canvasX, canvasY);\n        target.childNodes[0].style.opacity = 0.5;\n        break;\n    }\n  });\n  canvas.addEventListener('dragend', function (e) {\n    const { target } = e;\n\n    switch (target) {\n      case draggableGroup1:\n      case draggableGroup2:\n        target.childNodes[0].style.opacity = 1;\n    }\n  });\n\n  canvas.addEventListener('dragenter', function (e) {\n    const { target } = e;\n\n    switch (target) {\n      case droppableGroup1:\n      case droppableGroup2:\n        target.childNodes[0].style.fill = 'rgba(0,0,0,0.5)';\n    }\n  });\n  canvas.addEventListener('dragleave', function (e) {\n    const { target } = e;\n\n    switch (target) {\n      case droppableGroup1:\n      case droppableGroup2:\n        target.childNodes[0].style.fill = 'white';\n    }\n  });\n  // canvas.addEventListener('dragover', function (e) {\n  //   e.target.style.opacity = 0.6;\n  //   gateText.style.text = 'gate dragover';\n  // });\n  canvas.addEventListener('drop', function (e) {\n    const { target } = e;\n\n    switch (target) {\n      case canvas.document:\n        break;\n      case droppableGroup1:\n      case droppableGroup2:\n        target.childNodes[0].style.fill = 'white';\n        break;\n    }\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"在 Group 上使用拖放",en:"Use Drag'n'Drop on Group"},filename:"dragndrop-group.js",isNew:!1},{id:"dragndrop-perf",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*68gxTJFGvO4AAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin } from '@antv/g-plugin-dragndrop';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * Drag and Drop Stress Test with 10,000 Shapes\n * @see https://konvajs.org/docs/sandbox/Drag_and_Drop_Stress_Test.html\n */\n\nconst plugin = new Plugin();\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\ncanvasRenderer.registerPlugin(plugin);\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\ncanvaskitRenderer.registerPlugin(plugin);\nconst webglRenderer = new WebGLRenderer();\nwebglRenderer.registerPlugin(plugin);\nconst svgRenderer = new SVGRenderer();\nsvgRenderer.registerPlugin(plugin);\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'cyan', 'purple'];\n  for (let i = 0; i < 10000; i++) {\n    const circle = new Circle({\n      style: {\n        cx: Math.random() * 600,\n        cy: Math.random() * 500,\n        r: 6,\n        fill: colors[i % colors.length],\n        draggable: true,\n      },\n    });\n    canvas.appendChild(circle);\n  }\n});\n\nlet shiftX = 0;\nlet shiftY = 0;\nfunction moveAt(target, canvasX, canvasY) {\n  target.setPosition(canvasX - shiftX, canvasY - shiftY);\n}\n\ncanvas.addEventListener('dragstart', function (e) {\n  const [x, y] = e.target.getPosition();\n  shiftX = e.canvasX - x;\n  shiftY = e.canvasY - y;\n\n  moveAt(e.target, e.canvasX, e.canvasY);\n});\ncanvas.addEventListener('drag', function (e) {\n  moveAt(e.target, e.canvasX, e.canvasY);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"拖放性能测试",en:"Drag'n'Drop Perf"},filename:"dragndrop-perf.js",isNew:!1}],icon:"",id:"dragndrop",title:{en:"Drag'n'Drop",zh:"拖放"},api:null,childrenKey:"demos",order:11},{demos:[{id:"press",source:"import { Canvas, CanvasEvent, Group, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin } from '@antv/g-plugin-gesture';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst plugin = new Plugin();\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\ncanvasRenderer.registerPlugin(plugin);\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\ncanvaskitRenderer.registerPlugin(plugin);\nconst webglRenderer = new WebGLRenderer();\nwebglRenderer.registerPlugin(plugin);\nconst svgRenderer = new SVGRenderer();\nsvgRenderer.registerPlugin(plugin);\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst group = new Group({\n  style: {\n    gestureEnabled: true,\n  },\n});\nconst circle = new Circle({\n  style: {\n    cx: 200,\n    cy: 200,\n    r: 100,\n    fill: 'blue',\n  },\n});\ngroup.appendChild(circle);\ncanvas.appendChild(group);\n\ncanvas.addEventListener('pressstart', (e) => {\n  console.log(e.type, e.target, e.direction);\n});\ncanvas.addEventListener('press', (e) => {\n  console.log(e.type, e.target, e.direction);\n});\ncanvas.addEventListener('pressend', (e) => {\n  console.log(e.type, e.target, e.direction);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"使用 Press 手势",en:"Use Press Gesture"},filename:"press.js",isNew:!1}],icon:"",id:"gesture",title:{en:"Gesture",zh:"手势"},api:null,childrenKey:"demos",order:11},{demos:[{id:"box2d",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*Qw5OQLGQy_4AAAAAAAAAAAAAARQnAQ",source:"import {\n  Canvas,\n  CanvasEvent,\n  Circle,\n  Image,\n  Line,\n  Polygon,\n  Rect,\n  Text,\n} from '@antv/g';\nimport { Renderer } from '@antv/g-canvas';\nimport { Plugin as PluginBox2D } from '@antv/g-plugin-box2d';\nimport Stats from 'stats.js';\n\nconst renderer = new Renderer();\nconst plugin = new PluginBox2D();\nrenderer.registerPlugin(plugin);\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const ground1 = new Line({\n    style: {\n      x1: 0,\n      y1: 200,\n      x2: 50,\n      y2: 400,\n      stroke: '#1890FF',\n      lineWidth: 2,\n      width: 1000,\n      height: 10,\n      rigid: 'static', // static ground\n    },\n  });\n  canvas.appendChild(ground1);\n  const ground2 = new Line({\n    style: {\n      x1: 50,\n      y1: 400,\n      x2: 400,\n      y2: 400,\n      stroke: '#1890FF',\n      lineWidth: 2,\n      width: 1000,\n      height: 10,\n      rigid: 'static', // static ground\n    },\n  });\n  canvas.appendChild(ground2);\n  const ground3 = new Line({\n    style: {\n      x1: 400,\n      y1: 400,\n      x2: 400,\n      y2: 200,\n      stroke: '#1890FF',\n      lineWidth: 2,\n      width: 1000,\n      height: 10,\n      rigid: 'static', // static ground\n    },\n  });\n  canvas.appendChild(ground3);\n\n  for (let i = 0; i < 10; i++) {\n    const rect = new Rect({\n      style: {\n        fill: '#C6E5FF',\n        stroke: '#1890FF',\n        lineWidth: 2,\n        width: 50,\n        height: 50,\n        rigid: 'dynamic',\n        density: 10,\n        x: Math.random() * 100,\n        y: Math.random() * 100,\n      },\n    });\n\n    rect.setRotation(0, 0, 0.3, 0.7);\n    canvas.appendChild(rect);\n  }\n\n  const circle = new Circle({\n    style: {\n      fill: '#1890FF',\n      r: 50,\n      rigid: 'dynamic',\n      density: 10,\n      restitution: 0.5,\n      cx: 300,\n      cy: 0,\n    },\n  });\n  canvas.appendChild(circle);\n  const text = new Text({\n    id: 'text',\n    style: {\n      fontFamily: 'PingFang SC',\n      text: 'Circle',\n      fontSize: 16,\n      fill: '#fFF',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    },\n  });\n  circle.appendChild(text);\n\n  const polygon = new Polygon({\n    style: {\n      points: [\n        [20, 10],\n        [40, 10],\n        [40 + 20 * Math.sin(Math.PI / 6), 10 + 20 * Math.cos(Math.PI / 6)],\n        [40, 10 + 20 * Math.cos(Math.PI / 6) * 2],\n        [20, 10 + 20 * Math.cos(Math.PI / 6) * 2],\n        [20 - 20 * Math.sin(Math.PI / 6), 10 + 20 * Math.cos(Math.PI / 6)],\n      ],\n      fill: '#C6E5FF',\n      stroke: '#1890FF',\n      lineWidth: 2,\n      rigid: 'dynamic',\n      density: 10,\n    },\n  });\n  polygon.setPosition(100, 100);\n  canvas.appendChild(polygon);\n\n  const image = new Image({\n    style: {\n      x: 200,\n      y: 100,\n      width: 80,\n      height: 80,\n      src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n      rigid: 'dynamic',\n      density: 10,\n    },\n  });\n  canvas.appendChild(image);\n\n  // const slope = new Polyline({\n  //   style: {\n  //     points: [\n  //       [0, 200],\n  //       [50, 400],\n  //       [400, 400],\n  //       [400, 200],\n  //     ],\n  //     stroke: '#1890FF',\n  //     lineWidth: 2,\n  //     rigid: 'static', // static ground\n  //   },\n  // });\n  // canvas.appendChild(slope);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\n// const gui = new lil.GUI({ autoPlace: false });\n// $wrapper.appendChild(gui.domElement);\n// const forceFolder = gui.addFolder('force');\n// const forceConfig = {\n//   applyForce: () => {\n//     plugin.applyForce(circle, [0, -100], [0, 0]);\n//   },\n// };\n// forceFolder.add(forceConfig, 'applyForce').name('applyForce');\n",title:{zh:"在 2D 场景中使用 Box2D 物理引擎",en:"Use Box2D in 2D scene"},filename:"box2d.js",isNew:!1},{id:"matterjs",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*Qw5OQLGQy_4AAAAAAAAAAAAAARQnAQ",source:"import {\n  Canvas,\n  CanvasEvent,\n  Circle,\n  Image,\n  Line,\n  Polygon,\n  Rect,\n} from '@antv/g';\nimport { Renderer } from '@antv/g-canvas';\nimport { Plugin as PluginMatterjs } from '@antv/g-plugin-matterjs';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst renderer = new Renderer();\nconst plugin = new PluginMatterjs({\n  debug: true, // 开启 debug 模式，将物理引擎世界也渲染出来\n  debugContainer: document.getElementById('container'),\n  debugCanvasWidth: 600,\n  debugCanvasHeight: 500,\n});\nrenderer.registerPlugin(plugin);\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // const ground = new Rect({\n  //   style: {\n  //     fill: '#C6E5FF',\n  //     width: 550,\n  //     height: 10,\n  //     rigid: 'static',\n  //     x: 0,\n  //     y: 400,\n  //   },\n  // });\n  // canvas.appendChild(ground);\n\n  const ground1 = new Line({\n    style: {\n      x1: 0,\n      y1: 200,\n      x2: 50,\n      y2: 400,\n      stroke: '#1890FF',\n      lineWidth: 2,\n      width: 1000,\n      height: 10,\n      rigid: 'static', // static ground\n    },\n  });\n  canvas.appendChild(ground1);\n  const ground2 = new Line({\n    style: {\n      x1: 50,\n      y1: 400,\n      x2: 400,\n      y2: 400,\n      stroke: '#1890FF',\n      lineWidth: 2,\n      width: 1000,\n      height: 10,\n      rigid: 'static', // static ground\n    },\n  });\n  canvas.appendChild(ground2);\n  const ground3 = new Line({\n    style: {\n      x1: 400,\n      y1: 400,\n      x2: 400,\n      y2: 200,\n      stroke: '#1890FF',\n      lineWidth: 2,\n      width: 1000,\n      height: 10,\n      rigid: 'static', // static ground\n    },\n  });\n  canvas.appendChild(ground3);\n\n  for (let i = 0; i < 10; i++) {\n    const rect = new Rect({\n      style: {\n        fill: '#C6E5FF',\n        stroke: '#1890FF',\n        lineWidth: 2,\n        width: 50,\n        height: 50,\n        rigid: 'dynamic',\n        density: 0.1,\n        x: Math.random() * 100 + 100,\n        y: Math.random() * 100,\n      },\n    });\n    canvas.appendChild(rect);\n  }\n\n  const circle = new Circle({\n    style: {\n      fill: '#1890FF',\n      r: 50,\n      rigid: 'dynamic',\n      density: 0.1,\n      restitution: 0.5,\n      cx: 300,\n      cy: 0,\n    },\n  });\n  canvas.appendChild(circle);\n  // const text = new Text({\n  //   id: 'text',\n  //   style: {\n  //     fontFamily: 'PingFang SC',\n  //     text: 'Circle',\n  //     fontSize: 16,\n  //     fill: '#fFF',\n  //     textAlign: 'center',\n  //     textBaseline: 'middle',\n  //   },\n  // });\n  // circle.appendChild(text);\n\n  const polygon = new Polygon({\n    style: {\n      points: [\n        [20, 10],\n        [40, 10],\n        [40 + 20 * Math.sin(Math.PI / 6), 10 + 20 * Math.cos(Math.PI / 6)],\n        [40, 10 + 20 * Math.cos(Math.PI / 6) * 2],\n        [20, 10 + 20 * Math.cos(Math.PI / 6) * 2],\n        [20 - 20 * Math.sin(Math.PI / 6), 10 + 20 * Math.cos(Math.PI / 6)],\n        // [10, 10],\n        // [30, 10],\n        // [30, 30],\n        // [10, 30],\n      ],\n      fill: '#C6E5FF',\n      stroke: '#1890FF',\n      lineWidth: 2,\n      rigid: 'dynamic',\n      density: 10,\n    },\n  });\n  polygon.setPosition(100, 100);\n  canvas.appendChild(polygon);\n\n  const image = new Image({\n    style: {\n      x: 200,\n      y: 100,\n      width: 80,\n      height: 80,\n      src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n      rigid: 'dynamic',\n      density: 10,\n    },\n  });\n  canvas.appendChild(image);\n\n  // const slope = new Polyline({\n  //   style: {\n  //     points: [\n  //       [0, 200],\n  //       [50, 400],\n  //       [400, 400],\n  //       [400, 200],\n  //     ],\n  //     stroke: '#1890FF',\n  //     lineWidth: 2,\n  //     rigid: 'static', // static ground\n  //   },\n  // });\n  // canvas.appendChild(slope);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const forceFolder = gui.addFolder('force');\n  const forceConfig = {\n    applyForce: () => {\n      plugin.applyForce(circle, [0, -10], [0, 0]);\n    },\n  };\n  forceFolder.add(forceConfig, 'applyForce').name('applyForce to circle');\n});\n",title:{zh:"在 2D 场景中使用 MatterJS 物理引擎",en:"Use MatterJS in 2D scene"},filename:"matterjs.js",isNew:!1},{id:"physx",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshBasicMaterial,\n  CubeGeometry,\n  Mesh,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport { Plugin as PluginPhysX } from '@antv/g-plugin-physx';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\nrenderer.registerPlugin(new PluginPhysX());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\n// adjust camera's position\nconst camera = canvas.getCamera();\ncamera.setPerspective(0.1, 5000, 45, 600 / 500);\n\n(async () => {\n  await canvas.ready;\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n  const map = plugin.loadTexture(\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8TlCRIsKeUkAAAAAAAAAAAAAARQnAQ',\n  );\n\n  const planeGeometry = new CubeGeometry(device, {\n    width: 500,\n    height: 20,\n    depth: 500,\n  });\n  const planeMaterial = new MeshBasicMaterial(device, {\n    wireframe: true,\n  });\n  const plane = new Mesh({\n    style: {\n      fill: '#1890FF',\n      geometry: planeGeometry,\n      material: planeMaterial,\n      rigid: 'static',\n    },\n  });\n  plane.setPosition(300, 400, 0);\n  canvas.appendChild(plane);\n\n  const plane2 = new Mesh({\n    style: {\n      fill: '#1890FF',\n      geometry: planeGeometry,\n      material: planeMaterial,\n      rigid: 'static',\n    },\n  });\n  plane2.setPosition(300, 100, 0);\n  canvas.appendChild(plane2);\n\n  const cubeGeometry = new CubeGeometry(device, {\n    width: 100,\n    height: 100,\n    depth: 100,\n  });\n  const basicMaterial = new MeshBasicMaterial(device, {\n    map,\n  });\n\n  const cube = new Mesh({\n    style: {\n      fill: '#1890FF',\n      geometry: cubeGeometry,\n      material: basicMaterial,\n      rigid: 'dynamic',\n    },\n  });\n  cube.setPosition(300, -50, 0);\n  canvas.appendChild(cube);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n})();\n",title:{zh:"在 3D 场景中使用 PhysX 物理引擎",en:"Use PhysX in 3D scene"},filename:"physx.js",isNew:!1}],icon:"",id:"physics-engine",title:{en:"Physics Engine",zh:"物理引擎"},api:null,childrenKey:"demos",order:11},{demos:[{id:"rough",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*d4iiS5_3YVIAAAAAAAAAAAAAARQnAQ",source:"import {\n  Canvas,\n  CanvasEvent,\n  Circle,\n  convertToPath,\n  Ellipse,\n  Group,\n  Image,\n  Line,\n  Path,\n  Polygon,\n  Polyline,\n  Rect,\n  Text,\n} from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Plugin as PluginRoughCanvasRenderer } from '@antv/g-plugin-rough-canvas-renderer';\nimport { Plugin as PluginRoughSVGRenderer } from '@antv/g-plugin-rough-svg-renderer';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport WebFont from 'webfontloader';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\ncanvasRenderer.registerPlugin(new PluginRoughCanvasRenderer());\nconst svgRenderer = new SVGRenderer();\nsvgRenderer.registerPlugin(new PluginRoughSVGRenderer());\n\n// create a canvas & use `g-canvas`\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  /**\n  solarSystem\n    |    |\n    |   sun\n    |\n  earthOrbit\n    |    |\n    |  earth\n    |\n    moonOrbit\n        |\n      moon\n  */\n  const solarSystem = new Group({\n    id: 'solarSystem',\n  });\n  const earthOrbit = new Group({\n    id: 'earthOrbit',\n  });\n  const moonOrbit = new Group({\n    id: 'moonOrbit',\n  });\n\n  const sun = new Circle({\n    id: 'sun',\n    style: {\n      r: 100,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  const earth = new Circle({\n    id: 'earth',\n    style: {\n      r: 50,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n  const moon = new Circle({\n    id: 'moon',\n    style: {\n      r: 25,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n\n  solarSystem.appendChild(sun);\n  solarSystem.appendChild(earthOrbit);\n  earthOrbit.appendChild(earth);\n  earthOrbit.appendChild(moonOrbit);\n  moonOrbit.appendChild(moon);\n\n  solarSystem.setPosition(300, 250);\n  earthOrbit.translate(100, 0);\n  moonOrbit.translate(100, 0);\n\n  canvas.appendChild(solarSystem);\n\n  /**\n   * Ellipse\n   */\n  const ellipse = new Ellipse({\n    style: {\n      cx: 150,\n      cy: 100,\n      rx: 25,\n      ry: 15,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      strokeOpacity: 0.5,\n      lineWidth: 4,\n      cursor: 'pointer',\n    },\n  });\n  canvas.appendChild(ellipse);\n\n  /**\n   * Rect\n   */\n  const rect = new Rect({\n    style: {\n      x: 50,\n      y: 50,\n      width: 50,\n      height: 50,\n      fill: '#1890FF',\n      fillOpacity: 0.5,\n      stroke: '#F04864',\n      lineWidth: 4,\n      bowing: 4,\n      cursor: 'pointer',\n    },\n  });\n  canvas.appendChild(rect);\n  rect.addEventListener('pointerenter', function () {\n    rect.style.fill = 'yellow';\n  });\n  rect.addEventListener('pointerleave', function () {\n    rect.style.fill = '#1890FF';\n  });\n\n  /**\n   * Line\n   */\n  const line = new Line({\n    style: {\n      x1: 50,\n      y1: 120,\n      x2: 50,\n      y2: 200,\n      stroke: '#F04864',\n      lineWidth: 4,\n      cursor: 'pointer',\n    },\n  });\n  canvas.appendChild(line);\n\n  /**\n   * Polyline\n   */\n  const polyline = new Polyline({\n    style: {\n      points: [\n        [50, 250],\n        [50, 300],\n        [100, 300],\n        [100, 350],\n      ],\n      stroke: '#F04864',\n      lineWidth: 4,\n      cursor: 'pointer',\n    },\n  });\n  canvas.appendChild(polyline);\n\n  /**\n   * Polygon\n   */\n  const polygon = new Polygon({\n    style: {\n      points: [\n        [50, 400],\n        [100, 400],\n        [100, 450],\n      ],\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n      cursor: 'pointer',\n    },\n  });\n  canvas.appendChild(polygon);\n\n  /**\n   * Path\n   */\n  const rectPath = convertToPath(\n    new Rect({\n      style: {\n        x: 100,\n        y: 0,\n        width: 200,\n        height: 100,\n        transformOrigin: 'center',\n      },\n    }),\n  );\n  const starPath = new Path({\n    style: {\n      path: 'M301.113,12.011l99.25,179.996l201.864,38.778L461.706,380.808l25.508,203.958l-186.101-87.287L115.01,584.766l25.507-203.958L0,230.785l201.86-38.778L301.113,12.011',\n    },\n  });\n  starPath.translate(200, 0);\n  starPath.scale(0.2);\n  const pathG = new Path({\n    style: {\n      path: rectPath,\n      lineWidth: 2,\n      cursor: 'pointer',\n    },\n  });\n  canvas.appendChild(pathG);\n  pathG.animate(\n    [\n      { path: rectPath, stroke: '#F04864', fill: 'blue' },\n      { path: convertToPath(starPath), stroke: 'blue', fill: '#F04864' },\n    ],\n    {\n      duration: 2500,\n      easing: 'ease',\n      iterations: Infinity,\n      direction: 'alternate',\n    },\n  );\n  pathG.translate(300, 0);\n\n  /**\n   * Text\n   */\n  WebFont.load({\n    google: {\n      families: ['Gaegu'],\n    },\n    active: () => {\n      const text = new Text({\n        style: {\n          x: 100,\n          y: 450,\n          fontFamily: 'Gaegu',\n          text: 'Almost before we knew it, we had left the ground.',\n          fontSize: 30,\n          fill: '#1890FF',\n          stroke: '#F04864',\n          lineWidth: 5,\n          cursor: 'pointer',\n        },\n      });\n      canvas.appendChild(text);\n    },\n  });\n\n  const image = new Image({\n    style: {\n      x: 90,\n      y: 130,\n      width: 100,\n      height: 100,\n      src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n    },\n  });\n  canvas.appendChild(image);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n\n    solarSystem.rotateLocal(1);\n    earthOrbit.rotateLocal(2);\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', ['canvas', 'svg'])\n    .onChange((renderer) => {\n      canvas.setRenderer(renderer === 'canvas' ? canvasRenderer : svgRenderer);\n    });\n  rendererFolder.open();\n\n  const sunFolder = gui.addFolder('sun');\n  const sunConfig = {\n    r: 100,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    visibility: true,\n    'z-index': 0,\n    opacity: 1,\n    shadowColor: '#fff',\n    shadowBlur: 0,\n    shadowOffsetX: 0,\n    shadowOffsetY: 0,\n    fillStyle: 'hachure',\n    fillWeight: 4 / 2,\n    hachureAngle: -41,\n    hachureGap: 4 * 4,\n  };\n  sunFolder.add(sunConfig, 'r', 50, 200).onChange((r) => {\n    sun.style.r = r;\n  });\n  sunFolder.add(sunConfig, 'opacity', 0, 1).onChange((opacity) => {\n    sun.style.opacity = opacity;\n  });\n  sunFolder.addColor(sunConfig, 'fill').onChange((color) => {\n    sun.style.fill = color;\n  });\n  sunFolder.addColor(sunConfig, 'stroke').onChange((color) => {\n    sun.style.stroke = color;\n  });\n  sunFolder.addColor(sunConfig, 'shadowColor').onChange((color) => {\n    sun.style.shadowColor = color;\n  });\n  sunFolder.add(sunConfig, 'shadowBlur', 0, 100).onChange((shadowBlur) => {\n    sun.style.shadowBlur = shadowBlur;\n  });\n  sunFolder\n    .add(sunConfig, 'shadowOffsetX', -50, 50)\n    .onChange((shadowOffsetX) => {\n      sun.style.shadowOffsetX = shadowOffsetX;\n    });\n  sunFolder\n    .add(sunConfig, 'shadowOffsetY', -50, 50)\n    .onChange((shadowOffsetY) => {\n      sun.style.shadowOffsetY = shadowOffsetY;\n    });\n  sunFolder.add(sunConfig, 'lineWidth', 1, 20).onChange((lineWidth) => {\n    sun.style.lineWidth = lineWidth;\n  });\n  sunFolder.add(sunConfig, 'visibility').onChange((visible) => {\n    if (visible) {\n      sun.show();\n    } else {\n      sun.hide();\n    }\n  });\n  sunFolder.add(sunConfig, 'z-index', 0, 100).onChange((zIndex) => {\n    sun.setZIndex(zIndex);\n  });\n  sunFolder\n    .add(sunConfig, 'fillStyle', [\n      'hachure',\n      'solid',\n      'zigzag',\n      'cross-hatch',\n      'dots',\n      'dashed',\n      'zigzag-line',\n    ])\n    .onChange((fillStyle) => {\n      sun.style.fillStyle = fillStyle;\n    });\n  sunFolder.add(sunConfig, 'fillWeight', 0, 20).onChange((fillWeight) => {\n    sun.style.fillWeight = fillWeight;\n  });\n  sunFolder.add(sunConfig, 'hachureAngle', -50, 50).onChange((hachureAngle) => {\n    sun.style.hachureAngle = hachureAngle;\n  });\n  sunFolder.add(sunConfig, 'hachureGap', 0, 20).onChange((hachureGap) => {\n    sun.style.hachureAngle = hachureGap;\n  });\n  sunFolder.open();\n});\n",title:{zh:"使用 rough.js 手绘风格渲染",en:"Use rough.js"},filename:"rough.js",isNew:!1},{id:"rough-options",screenshot:"https://gw.alipayobjects.com/zos/raptor/1668150000221/Nov-11-2022%25252014-59-41.gif",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Plugin as PluginRoughCanvasRenderer } from '@antv/g-plugin-rough-canvas-renderer';\nimport { Plugin as PluginRoughSVGRenderer } from '@antv/g-plugin-rough-svg-renderer';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst canvasRenderer = new CanvasRenderer();\ncanvasRenderer.registerPlugin(new PluginRoughCanvasRenderer());\nconst svgRenderer = new SVGRenderer();\nsvgRenderer.registerPlugin(new PluginRoughSVGRenderer());\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const circle = new Circle({\n    style: {\n      cx: 200,\n      cy: 200,\n      r: 100,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      lineWidth: 4,\n    },\n  });\n\n  canvas.appendChild(circle);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', ['canvas', 'svg'])\n    .onChange((renderer) => {\n      canvas.setRenderer(renderer === 'canvas' ? canvasRenderer : svgRenderer);\n    });\n  rendererFolder.open();\n\n  const folder = gui.addFolder('rough-options');\n  const config = {\n    roughness: 1,\n    bowing: 1,\n    fillStyle: 'hachure',\n    fillWeight: 4 / 2,\n    hachureAngle: -41,\n    hachureGap: 4 * 4,\n    curveStepCount: 9,\n    curveFitting: 0.95,\n    simplification: 0,\n    lineDash: 0,\n    lineDashOffset: 0,\n    fillLineDash: 0,\n    fillLineDashOffset: 0,\n    disableMultiStroke: false,\n    disableMultiStrokeFill: false,\n    dashOffset: 4 * 4,\n    dashGap: 4 * 4,\n    zigzagOffset: 4 * 4,\n  };\n  folder.add(config, 'roughness', 0, 10).onChange((roughness) => {\n    circle.style.roughness = roughness;\n  });\n  folder.add(config, 'bowing', 0, 10).onChange((bowing) => {\n    circle.style.bowing = bowing;\n  });\n  folder\n    .add(config, 'fillStyle', [\n      'hachure',\n      'solid',\n      'zigzag',\n      'cross-hatch',\n      'dots',\n      'dashed',\n      'zigzag-line',\n    ])\n    .onChange((fillStyle) => {\n      circle.style.fillStyle = fillStyle;\n    });\n  folder.add(config, 'fillWeight', 0, 20).onChange((fillWeight) => {\n    circle.style.fillWeight = fillWeight;\n  });\n  folder.add(config, 'hachureAngle', -50, 50).onChange((hachureAngle) => {\n    circle.style.hachureAngle = hachureAngle;\n  });\n  folder.add(config, 'hachureGap', 0, 20).onChange((hachureGap) => {\n    circle.style.hachureGap = hachureGap;\n  });\n  folder.add(config, 'curveStepCount', 0, 20).onChange((curveStepCount) => {\n    circle.style.curveStepCount = curveStepCount;\n  });\n  folder.add(config, 'curveFitting', 0, 1).onChange((curveFitting) => {\n    circle.style.curveFitting = curveFitting;\n  });\n  folder.add(config, 'lineDash', 0, 20).onChange((lineDash) => {\n    circle.style.lineDash = [lineDash, lineDash];\n  });\n  folder.add(config, 'lineDashOffset', 0, 20).onChange((lineDashOffset) => {\n    circle.style.lineDashOffset = lineDashOffset;\n  });\n  folder.add(config, 'fillLineDash', 0, 20).onChange((fillLineDash) => {\n    circle.style.fillLineDash = [fillLineDash, fillLineDash];\n  });\n  folder\n    .add(config, 'fillLineDashOffset', 0, 20)\n    .onChange((fillLineDashOffset) => {\n      circle.style.fillLineDashOffset = fillLineDashOffset;\n    });\n  folder.add(config, 'disableMultiStroke').onChange((disableMultiStroke) => {\n    circle.style.disableMultiStroke = disableMultiStroke;\n  });\n  folder\n    .add(config, 'disableMultiStrokeFill')\n    .onChange((disableMultiStrokeFill) => {\n      circle.style.disableMultiStrokeFill = disableMultiStrokeFill;\n    });\n  folder.add(config, 'simplification', 0, 1).onChange((simplification) => {\n    circle.style.simplification = simplification;\n  });\n  folder.add(config, 'dashOffset', 0, 30).onChange((dashOffset) => {\n    circle.style.dashOffset = dashOffset;\n  });\n  folder.add(config, 'dashGap', 0, 30).onChange((dashGap) => {\n    circle.style.dashGap = dashGap;\n  });\n  folder.add(config, 'zigzagOffset', 0, 30).onChange((zigzagOffset) => {\n    circle.style.zigzagOffset = zigzagOffset;\n  });\n\n  folder.open();\n});\n",title:{zh:"rough.js 参数",en:"rough.js options"},filename:"rough-options.js",isNew:!1},{id:"rough-d3-barchart",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*j_F5Saag18oAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin as PluginRoughCanvasRenderer } from '@antv/g-plugin-rough-canvas-renderer';\nimport { Plugin as PluginRoughSVGRenderer } from '@antv/g-plugin-rough-svg-renderer';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as d3 from 'd3';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport WebFont from 'webfontloader';\n\n/**\n * Ported from fullstack-d3, use stylized rendering with rough.js.\n * @see https://codesandbox.io/s/vllpx?file=/chart.js\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\ncanvasRenderer.registerPlugin(new PluginRoughCanvasRenderer());\nconst svgRenderer = new SVGRenderer();\nsvgRenderer.registerPlugin(new PluginRoughSVGRenderer());\nconst webglRenderer = new WebGLRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  WebFont.load({\n    google: {\n      families: ['Gaegu'],\n    },\n    active: () => {\n      drawBars();\n    },\n  });\n\n  const drawBars = async () => {\n    // 1. Access data\n    const dataset = await d3.json(\n      'https://gw.alipayobjects.com/os/bmw-prod/8e7cfeb6-28e5-4e78-8d16-c08468360f5f.json',\n    );\n    const metricAccessor = (d) => d.humidity;\n    const yAccessor = (d) => d.length;\n\n    // 2. Create chart dimensions\n    const width = 600;\n    let dimensions = {\n      width: width,\n      height: width * 0.6,\n      margin: {\n        top: 30,\n        right: 10,\n        bottom: 50,\n        left: 50,\n      },\n    };\n    dimensions.boundedWidth =\n      dimensions.width - dimensions.margin.left - dimensions.margin.right;\n    dimensions.boundedHeight =\n      dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n\n    // 3. Draw canvas\n    const wrapper = d3.select(\n      canvas.document.documentElement, // use GCanvas' document element instead of a real DOM\n    );\n\n    const bounds = wrapper\n      .append('g')\n      .style(\n        'transform',\n        `translate(${dimensions.margin.left}px, ${dimensions.margin.top}px)`,\n      );\n\n    // 4. Create scales\n\n    const xScale = d3\n      .scaleLinear()\n      .domain(d3.extent(dataset, metricAccessor))\n      .range([0, dimensions.boundedWidth])\n      .nice();\n\n    const binsGenerator = d3\n      .bin()\n      .domain(xScale.domain())\n      .value(metricAccessor)\n      .thresholds(12);\n\n    const bins = binsGenerator(dataset);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, d3.max(bins, yAccessor)])\n      .range([dimensions.boundedHeight, 0])\n      .nice();\n\n    // 5. Draw data\n    const binsGroup = bounds.append('g');\n    const binGroups = binsGroup\n      .selectAll('g')\n      .data(bins)\n      .join('g')\n      .attr('class', 'bin');\n\n    const barPadding = 1;\n    const barRects = binGroups\n      .append('rect')\n      .attr('x', (d) => xScale(d.x0) + barPadding / 2)\n      .attr('y', (d) => yScale(yAccessor(d)))\n      .attr('width', (d) =>\n        d3.max([0, xScale(d.x1) - xScale(d.x0) - barPadding]),\n      )\n      .attr('height', (d) => dimensions.boundedHeight - yScale(yAccessor(d)))\n      .attr('fill', 'cornflowerblue')\n      .on('mouseenter', function (e) {\n        d3.select(e.target).attr('fill', 'red');\n      })\n      .on('mouseleave', function (e) {\n        d3.select(e.target).attr('fill', 'cornflowerblue');\n      });\n\n    const barText = binGroups\n      .filter(yAccessor)\n      .append('text')\n      .attr('x', (d) => xScale(d.x0) + (xScale(d.x1) - xScale(d.x0)) / 2)\n      .attr('y', (d) => yScale(yAccessor(d)) - 5)\n      .text(yAccessor)\n      .attr('fill', 'darkgrey')\n      .style('text-anchor', 'middle')\n      .style('font-family', 'Gaegu')\n      .style('font-size', '12px');\n\n    const mean = d3.mean(dataset, metricAccessor);\n    const meanLine = bounds\n      .append('line')\n      .attr('x1', xScale(mean))\n      .attr('x2', xScale(mean))\n      .attr('y1', -15)\n      .attr('y2', dimensions.boundedHeight)\n      .attr('stroke-width', 1)\n      .attr('stroke', 'maroon')\n      .attr('stroke-dasharray', '2px 4px');\n\n    const meanLabel = bounds\n      .append('text')\n      .attr('x', xScale(mean))\n      .attr('y', -20)\n      .text('mean')\n      .attr('fill', 'maroon')\n      .style('font-family', 'Gaegu')\n      .style('font-size', '12px')\n      .style('text-anchor', 'middle');\n\n    // 6. Draw peripherals\n    const xAxisGenerator = d3.axisBottom().scale(xScale);\n\n    const xAxis = bounds\n      .append('g')\n      .call(xAxisGenerator)\n      .attr('transform', `translateY(${dimensions.boundedHeight}px)`)\n      .style('font-family', 'Gaegu')\n      .attr('fill', 'black');\n\n    const xAxisLabel = xAxis\n      .append('text')\n      .attr('x', dimensions.boundedWidth / 2)\n      .attr('y', dimensions.margin.bottom - 10)\n      .attr('fill', 'black')\n      .style('font-family', 'Gaegu')\n      .style('font-size', '10px')\n      .text('Humidity')\n      .style('text-transform', 'capitalize');\n  };\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"手绘风格的 D3 条形图",en:"Use rough.js and D3 barchart"},filename:"rough-d3-barchart.js",isNew:!1}],icon:"",id:"rough",title:{en:"Rough",zh:"手绘风格"},api:null,childrenKey:"demos",order:11},{demos:[{id:"yoga-container",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*B_DmQ6lzHcIAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Rect, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin as PluginYoga } from '@antv/g-plugin-yoga';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\nconst plugin = new PluginYoga();\n\ncanvasRenderer.registerPlugin(plugin);\nwebglRenderer.registerPlugin(plugin);\nsvgRenderer.registerPlugin(plugin);\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // you can use Group if you want this container invisible\n  const root = new Rect({\n    id: 'root',\n    style: {\n      fill: '#C6E5FF',\n      width: 500,\n      height: 300,\n      display: 'flex',\n      justifyContent: 'center',\n      x: 50,\n      y: 50,\n    },\n  });\n  canvas.appendChild(root);\n\n  const node1 = new Rect({\n    id: 'node1',\n    style: {\n      fill: 'white',\n      stroke: 'grey',\n      lineWidth: 1,\n      opacity: 0.8,\n      width: 100,\n      height: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      // alignSelf: 'center'\n    },\n  });\n  node1.appendChild(\n    new Text({\n      id: 'node1-text',\n      style: {\n        fontFamily: 'PingFang SC',\n        fontSize: 32,\n        fill: '#1890FF',\n        text: '1',\n      },\n    }),\n  );\n  const node2 = new Rect({\n    id: 'node2',\n    style: {\n      fill: 'white',\n      stroke: 'grey',\n      lineWidth: 1,\n      opacity: 0.8,\n      width: 100,\n      height: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  });\n  node2.appendChild(\n    new Text({\n      id: 'node2-text',\n      style: {\n        fontFamily: 'PingFang SC',\n        fontSize: 32,\n        fill: '#1890FF',\n        text: '2',\n      },\n    }),\n  );\n  root.appendChild(node1);\n  root.appendChild(node2);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', [\n      'canvas',\n      'svg',\n      'webgl',\n      'webgpu',\n      'canvaskit',\n    ])\n    .onChange((rendererName) => {\n      let renderer;\n      if (rendererName === 'canvas') {\n        renderer = canvasRenderer;\n      } else if (rendererName === 'svg') {\n        renderer = svgRenderer;\n      } else if (rendererName === 'webgl') {\n        renderer = webglRenderer;\n      } else if (rendererName === 'canvaskit') {\n        renderer = canvaskitRenderer;\n      }\n      canvas.setRenderer(renderer);\n    });\n  rendererFolder.open();\n\n  const layoutFolder = gui.addFolder('Layout');\n  const flexFolder = gui.addFolder('Flex');\n  const config = {\n    flexDirection: 'row',\n    flexWrap: 'no-wrap',\n    justifyContent: 'center',\n    alignItems: 'stretch',\n    alignContent: 'flex-start',\n    width: 500,\n    height: 300,\n    paddingTop: 0,\n    paddingRight: 0,\n    paddingBottom: 0,\n    paddingLeft: 0,\n    'paddingTop(percent)': 0,\n    'paddingRight(percent)': 0,\n    'paddingBottom(percent)': 0,\n    'paddingLeft(percent)': 0,\n    appendChild: () => {\n      const num = root.children.length;\n      const id = num + 1;\n      const rect = new Rect({\n        id: `node${id}`,\n        style: {\n          fill: 'white',\n          stroke: 'grey',\n          lineWidth: 1,\n          opacity: 0.8,\n          width: 100,\n          height: 100,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        },\n      });\n      const text = new Text({\n        id: `node${id}-text`,\n        style: {\n          fontFamily: 'PingFang SC',\n          fontSize: 32,\n          fill: '#1890FF',\n          text: `${id}`,\n        },\n      });\n      rect.appendChild(text);\n      root.appendChild(rect);\n    },\n    removeChild: () => {\n      const num = root.children.length;\n      if (num) {\n        root.removeChild(root.children[num - 1]);\n      }\n    },\n  };\n  flexFolder\n    .add(config, 'flexDirection', [\n      'row',\n      'column',\n      'row-reverse',\n      'column-reverse',\n    ])\n    .onChange((flexDirection) => {\n      root.style.flexDirection = flexDirection;\n    });\n  flexFolder\n    .add(config, 'flexWrap', ['wrap', 'no-wrap', 'wrap-reverse'])\n    .onChange((flexWrap) => {\n      root.style.flexWrap = flexWrap;\n    });\n  layoutFolder\n    .add(config, 'justifyContent', [\n      'flex-start',\n      'flex-end',\n      'center',\n      'space-between',\n      'space-around',\n      'space-evenly',\n    ])\n    .onChange((justifyContent) => {\n      root.style.justifyContent = justifyContent;\n    });\n  layoutFolder\n    .add(config, 'alignItems', [\n      'stretch',\n      'auto',\n      'baseline',\n      'center',\n      'flex-start',\n      'flex-end',\n      'space-between',\n      'space-around',\n    ])\n    .onChange((alignItems) => {\n      root.style.alignItems = alignItems;\n    });\n  layoutFolder\n    .add(config, 'alignContent', [\n      'stretch',\n      'center',\n      'flex-start',\n      'flex-end',\n      'space-between',\n      'space-around',\n    ])\n    .onChange((alignContent) => {\n      root.style.alignContent = alignContent;\n    });\n  layoutFolder.add(config, 'width', 200, 600).onChange((width) => {\n    root.style.width = width;\n  });\n  layoutFolder.add(config, 'height', 200, 500).onChange((height) => {\n    root.style.height = height;\n  });\n  layoutFolder.add(config, 'paddingTop', 0, 50).onChange((paddingTop) => {\n    root.style.paddingTop = paddingTop;\n  });\n  layoutFolder.add(config, 'paddingRight', 0, 50).onChange((paddingRight) => {\n    root.style.paddingRight = paddingRight;\n  });\n  layoutFolder.add(config, 'paddingBottom', 0, 50).onChange((paddingBottom) => {\n    root.style.paddingBottom = paddingBottom;\n  });\n  layoutFolder.add(config, 'paddingLeft', 0, 50).onChange((paddingLeft) => {\n    root.style.paddingLeft = paddingLeft;\n  });\n  layoutFolder\n    .add(config, 'paddingTop(percent)', 0, 100)\n    .onChange((paddingTop) => {\n      root.style.paddingTop = `${paddingTop}%`;\n    });\n  layoutFolder\n    .add(config, 'paddingRight(percent)', 0, 100)\n    .onChange((paddingRight) => {\n      root.style.paddingRight = `${paddingRight}%`;\n    });\n  layoutFolder\n    .add(config, 'paddingBottom(percent)', 0, 100)\n    .onChange((paddingBottom) => {\n      root.style.paddingBottom = `${paddingBottom}%`;\n    });\n  layoutFolder\n    .add(config, 'paddingLeft(percent)', 0, 100)\n    .onChange((paddingLeft) => {\n      root.style.paddingLeft = `${paddingLeft}%`;\n    });\n  layoutFolder.add(config, 'appendChild').name('appendChild');\n  layoutFolder.add(config, 'removeChild').name('removeChild');\n});\n",title:{zh:"使用 Yoga 排版引擎 - 容器配置",en:"Use Yoga layout engine - container"},filename:"yoga-container.js",isNew:!1},{id:"yoga-child",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*2zZaS6PlrOcAAAAAAAAAAAAAARQnAQ",source:"import {\n  Canvas,\n  CanvasEvent,\n  Circle,\n  Image,\n  Polygon,\n  Rect,\n  Text,\n} from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Plugin as PluginYoga } from '@antv/g-plugin-yoga';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst canvasRenderer = new CanvasRenderer();\nconst plugin = new PluginYoga();\ncanvasRenderer.registerPlugin(plugin);\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const root = new Rect({\n    id: 'root',\n    style: {\n      fill: '#C6E5FF',\n      width: 500,\n      height: 300,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      x: 50,\n      y: 50,\n    },\n  });\n  canvas.appendChild(root);\n\n  const node1 = new Rect({\n    id: 'node1',\n    style: {\n      fill: 'white',\n      stroke: 'grey',\n      lineWidth: 1,\n      opacity: 0.8,\n      width: 100,\n      height: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  });\n  node1.appendChild(\n    new Text({\n      id: 'node1-text',\n      style: {\n        fontFamily: 'PingFang SC',\n        fontSize: 32,\n        fill: '#1890FF',\n        text: '1',\n      },\n    }),\n  );\n  const node2 = new Rect({\n    id: 'node2',\n    style: {\n      fill: 'white',\n      stroke: 'grey',\n      lineWidth: 1,\n      opacity: 0.8,\n      width: 100,\n      height: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  });\n  node2.appendChild(\n    new Text({\n      id: 'node2-text',\n      style: {\n        fontFamily: 'PingFang SC',\n        fontSize: 32,\n        fill: '#1890FF',\n        text: '2',\n      },\n    }),\n  );\n  const image = new Image({\n    style: {\n      width: 100,\n      height: 100,\n      src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n    },\n  });\n  const polygon = new Polygon({\n    style: {\n      points: [\n        [20, 10],\n        [40, 10],\n        [40 + 20 * Math.sin(Math.PI / 6), 10 + 20 * Math.cos(Math.PI / 6)],\n        [40, 10 + 20 * Math.cos(Math.PI / 6) * 2],\n        [20, 10 + 20 * Math.cos(Math.PI / 6) * 2],\n        [20 - 20 * Math.sin(Math.PI / 6), 10 + 20 * Math.cos(Math.PI / 6)],\n      ],\n      fill: '#C6E5FF',\n      stroke: '#1890FF',\n      lineWidth: 2,\n    },\n  });\n  const circle = new Circle({\n    style: {\n      r: 20,\n      fill: '#1890FF',\n    },\n  });\n\n  root.appendChild(node1);\n  root.appendChild(node2);\n  root.appendChild(image);\n  root.appendChild(polygon);\n  root.appendChild(circle);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const layoutFolder = gui.addFolder(\"Node1's Layout\");\n  // const flexFolder = gui.addFolder('Flex');\n  const config = {\n    // flexDirection: 'row',\n    // flexWrap: 'no-wrap',\n    position: 'relative',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    'top(percent)': 0,\n    'right(percent)': 0,\n    'bottom(percent)': 0,\n    'left(percent)': 0,\n    width: 100,\n    height: 100,\n    'width(percent)': 0,\n    'height(percent)': 0,\n    marginTop: 0,\n    marginRight: 0,\n    marginBottom: 0,\n    marginLeft: 0,\n    'marginTop(percent)': 0,\n    'marginRight(percent)': 0,\n    'marginBottom(percent)': 0,\n    'marginLeft(percent)': 0,\n    paddingTop: 0,\n    paddingRight: 0,\n    paddingBottom: 0,\n    paddingLeft: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n  };\n  layoutFolder\n    .add(config, 'position', ['relative', 'absolute'])\n    .onChange((position) => {\n      node1.style.position = position;\n    });\n  layoutFolder.add(config, 'top', -50, 50).onChange((top) => {\n    node1.style.top = top;\n  });\n  layoutFolder.add(config, 'right', -50, 50).onChange((right) => {\n    node1.style.right = right;\n  });\n  layoutFolder.add(config, 'bottom', -50, 50).onChange((bottom) => {\n    node1.style.bottom = bottom;\n  });\n  layoutFolder.add(config, 'left', -50, 50).onChange((left) => {\n    node1.style.left = left;\n  });\n  layoutFolder.add(config, 'top(percent)', -100, 100).onChange((topPercent) => {\n    node1.style.top = `${topPercent}%`;\n  });\n  layoutFolder\n    .add(config, 'right(percent)', -100, 100)\n    .onChange((rightPercent) => {\n      node1.style.right = `${rightPercent}%`;\n    });\n  layoutFolder\n    .add(config, 'bottom(percent)', -100, 100)\n    .onChange((bottomPercent) => {\n      node1.style.bottom = `${bottomPercent}%`;\n    });\n  layoutFolder\n    .add(config, 'left(percent)', -100, 100)\n    .onChange((leftPercent) => {\n      node1.style.left = `${leftPercent}%`;\n    });\n  layoutFolder\n    .add(config, 'justifyContent', [\n      'flex-start',\n      'flex-end',\n      'center',\n      'space-between',\n      'space-around',\n      'space-evenly',\n    ])\n    .onChange((justifyContent) => {\n      node1.style.justifyContent = justifyContent;\n    });\n  layoutFolder\n    .add(config, 'alignItems', [\n      'stretch',\n      'auto',\n      'baseline',\n      'center',\n      'flex-start',\n      'flex-end',\n      'space-between',\n      'space-around',\n    ])\n    .onChange((alignItems) => {\n      node1.style.alignItems = alignItems;\n    });\n  layoutFolder.add(config, 'width', 50, 200).onChange((width) => {\n    node1.style.width = width;\n  });\n  layoutFolder.add(config, 'height', 50, 200).onChange((height) => {\n    node1.style.height = height;\n  });\n  layoutFolder\n    .add(config, 'width(percent)', 0, 100)\n    .onChange((widthPercent) => {\n      node1.style.width = `${widthPercent}%`;\n    });\n  layoutFolder\n    .add(config, 'height(percent)', 0, 100)\n    .onChange((heightPercent) => {\n      node1.style.height = `${heightPercent}%`;\n    });\n  layoutFolder.add(config, 'marginTop', 0, 50).onChange((marginTop) => {\n    node1.style.marginTop = marginTop;\n  });\n  layoutFolder.add(config, 'marginRight', 0, 50).onChange((marginRight) => {\n    node1.style.marginRight = marginRight;\n  });\n  layoutFolder.add(config, 'marginBottom', 0, 50).onChange((marginBottom) => {\n    node1.style.marginBottom = marginBottom;\n  });\n  layoutFolder.add(config, 'marginLeft', 0, 50).onChange((marginLeft) => {\n    node1.style.marginLeft = marginLeft;\n  });\n  layoutFolder\n    .add(config, 'marginTop(percent)', 0, 100)\n    .onChange((marginTop) => {\n      node1.style.marginTop = `${marginTop}%`;\n    });\n  layoutFolder\n    .add(config, 'marginRight(percent)', 0, 100)\n    .onChange((marginRight) => {\n      node1.style.marginRight = `${marginRight}%`;\n    });\n  layoutFolder\n    .add(config, 'marginBottom(percent)', 0, 100)\n    .onChange((marginBottom) => {\n      node1.style.marginBottom = `${marginBottom}%`;\n    });\n  layoutFolder\n    .add(config, 'marginLeft(percent)', 0, 100)\n    .onChange((marginLeft) => {\n      node1.style.marginLeft = `${marginLeft}%`;\n    });\n  layoutFolder.add(config, 'paddingTop', 0, 50).onChange((paddingTop) => {\n    node1.style.paddingTop = paddingTop;\n  });\n  layoutFolder.add(config, 'paddingRight', 0, 50).onChange((paddingRight) => {\n    node1.style.paddingRight = paddingRight;\n  });\n  layoutFolder.add(config, 'paddingBottom', 0, 50).onChange((paddingBottom) => {\n    node1.style.paddingBottom = paddingBottom;\n  });\n  layoutFolder.add(config, 'paddingLeft', 0, 50).onChange((paddingLeft) => {\n    node1.style.paddingLeft = paddingLeft;\n  });\n});\n",title:{zh:"使用 Yoga 排版引擎 - 子元素配置",en:"Use Yoga layout engine - child element"},filename:"yoga-child.js",isNew:!1},{id:"yoga-available-space",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*fbvlTpdHR0IAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Rect, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Plugin as PluginYoga } from '@antv/g-plugin-yoga';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst canvasRenderer = new CanvasRenderer();\nconst plugin = new PluginYoga();\ncanvasRenderer.registerPlugin(plugin);\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const root = new Rect({\n    id: 'root',\n    style: {\n      fill: '#C6E5FF',\n      width: 500,\n      height: 300,\n      display: 'flex',\n      x: 50,\n      y: 50,\n    },\n  });\n  canvas.appendChild(root);\n\n  const node1 = new Rect({\n    id: 'node1',\n    style: {\n      fill: 'white',\n      stroke: 'grey',\n      lineWidth: 1,\n      opacity: 0.8,\n      width: 100,\n      height: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexGrow: 1,\n    },\n  });\n  node1.appendChild(\n    new Text({\n      id: 'node1-text',\n      style: {\n        fontFamily: 'PingFang SC',\n        fontSize: 32,\n        fill: '#1890FF',\n        text: '1',\n      },\n    }),\n  );\n  const node2 = new Rect({\n    id: 'node2',\n    style: {\n      fill: 'white',\n      stroke: 'grey',\n      lineWidth: 1,\n      opacity: 0.8,\n      width: 100,\n      height: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexGrow: 1,\n    },\n  });\n  node2.appendChild(\n    new Text({\n      id: 'node2-text',\n      style: {\n        fontFamily: 'PingFang SC',\n        fontSize: 32,\n        fill: '#1890FF',\n        text: '2',\n      },\n    }),\n  );\n\n  root.appendChild(node1);\n  root.appendChild(node2);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const flexFolder1 = gui.addFolder(\"Node1's Flex\");\n  const config1 = {\n    flexGrow: 1,\n    flexShrink: 1,\n    maxWidth: 0,\n    minWidth: 0,\n    setMaxWidthNaN: () => {\n      node1.style.maxWidth = NaN;\n    },\n    setMinWidthNaN: () => {\n      node1.style.minWidth = NaN;\n    },\n  };\n  flexFolder1.add(config1, 'flexGrow', 0, 1).onChange((flexGrow) => {\n    node1.style.flexGrow = flexGrow;\n  });\n  flexFolder1.add(config1, 'flexShrink', 0, 1).onChange((flexShrink) => {\n    node1.style.flexShrink = flexShrink;\n  });\n  flexFolder1.add(config1, 'maxWidth', 0, 300).onChange((maxWidth) => {\n    node1.style.maxWidth = maxWidth;\n  });\n  flexFolder1.add(config1, 'setMaxWidthNaN').name('set maxWidth to NaN');\n  flexFolder1.add(config1, 'minWidth', 0, 300).onChange((minWidth) => {\n    node1.style.minWidth = minWidth;\n  });\n  flexFolder1.add(config1, 'setMinWidthNaN').name('set minWidth to NaN');\n\n  const flexFolder2 = gui.addFolder(\"Node2's Flex\");\n  const config2 = {\n    flexGrow: 1,\n    flexShrink: 1,\n    maxWidth: 0,\n    minWidth: 0,\n    setMaxWidthNaN: () => {\n      node2.style.maxWidth = NaN;\n    },\n    setMinWidthNaN: () => {\n      node2.style.minWidth = NaN;\n    },\n  };\n  flexFolder2.add(config2, 'flexGrow', 0, 1).onChange((flexGrow) => {\n    node2.style.flexGrow = flexGrow;\n  });\n  flexFolder2.add(config2, 'flexShrink', 0, 1).onChange((flexShrink) => {\n    node2.style.flexShrink = flexShrink;\n  });\n  flexFolder2.add(config2, 'maxWidth', 0, 300).onChange((maxWidth) => {\n    node2.style.maxWidth = maxWidth;\n  });\n  flexFolder2.add(config2, 'setMaxWidthNaN').name('set maxWidth to NaN');\n  flexFolder2.add(config2, 'minWidth', 0, 300).onChange((minWidth) => {\n    node2.style.minWidth = minWidth;\n  });\n  flexFolder2.add(config2, 'setMinWidthNaN').name('set minWidth to NaN');\n\n  const layoutConfig = {\n    width: 500,\n    height: 300,\n  };\n  const layoutFolder = gui.addFolder(\"Container's Layout\");\n  layoutFolder.add(layoutConfig, 'width', 100, 600).onChange((width) => {\n    root.style.width = width;\n  });\n  layoutFolder.add(layoutConfig, 'height', 200, 500).onChange((height) => {\n    root.style.height = height;\n  });\n});\n",title:{zh:"使用 Yoga 排版引擎 - 可用空间",en:"Use Yoga layout engine - available space"},filename:"yoga-available-space.js",isNew:!1},{id:"yoga-text",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*IH1fSJN9fsMAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Group, Rect, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Plugin as PluginYoga } from '@antv/g-plugin-yoga';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst canvasRenderer = new CanvasRenderer();\nconst plugin = new PluginYoga();\ncanvasRenderer.registerPlugin(plugin);\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const root = new Rect({\n    id: 'root',\n    style: {\n      fill: '#C6E5FF',\n      width: 500,\n      height: 300,\n      x: 50,\n      y: 50,\n      display: 'flex',\n      flexDirection: 'column',\n      padding: [10, 10, 10, 10],\n    },\n  });\n  canvas.appendChild(root);\n\n  const topPanel = new Rect({\n    style: {\n      fill: 'white',\n      stroke: 'grey',\n      lineWidth: 1,\n      opacity: 0.8,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: '100%',\n      height: 60,\n      padding: [10, 10, 10, 10],\n      marginBottom: 10,\n    },\n  });\n  topPanel.appendChild(\n    new Text({\n      style: {\n        fontFamily: 'PingFang SC',\n        fontSize: 24,\n        fill: '#1890FF',\n        text: '1',\n      },\n    }),\n  );\n  const bottomPanel = new Group({\n    style: {\n      display: 'flex',\n      width: '100%',\n      flexGrow: 1,\n    },\n  });\n  const leftPanel = new Rect({\n    style: {\n      fill: 'white',\n      stroke: 'grey',\n      lineWidth: 1,\n      opacity: 0.8,\n      display: 'flex',\n      height: '100%',\n      flexGrow: 1,\n      marginRight: 10,\n      padding: [10, 10, 10, 10],\n    },\n  });\n  const leftPanelText = new Text({\n    style: {\n      fontFamily: 'PingFang SC',\n      fontSize: 32,\n      fill: '#1890FF',\n      text: '这是测试文字，这是测试文字，这是测试文字，这是测试文字',\n      wordWrap: true,\n      width: '100%',\n    },\n  });\n  leftPanel.appendChild(leftPanelText);\n  const rightPanel = new Group({\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      width: 100,\n      height: '100%',\n    },\n  });\n  const node1 = new Rect({\n    style: {\n      fill: 'white',\n      stroke: 'grey',\n      lineWidth: 1,\n      opacity: 0.8,\n      height: 100,\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginBottom: 10,\n    },\n  });\n  node1.appendChild(\n    new Text({\n      style: {\n        fontFamily: 'PingFang SC',\n        fontSize: 32,\n        fill: '#1890FF',\n        text: '2',\n      },\n    }),\n  );\n  const node2 = new Rect({\n    style: {\n      fill: 'white',\n      stroke: 'grey',\n      lineWidth: 1,\n      opacity: 0.8,\n      width: '100%',\n      display: 'flex',\n      flexGrow: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  });\n  node2.appendChild(\n    new Text({\n      style: {\n        fontFamily: 'PingFang SC',\n        fontSize: 32,\n        fill: '#1890FF',\n        text: '3',\n      },\n    }),\n  );\n  const circle = new Circle({\n    style: {\n      r: 20,\n      fill: '#1890FF',\n      marginTop: 10,\n    },\n  });\n\n  root.appendChild(topPanel);\n  root.appendChild(bottomPanel);\n  bottomPanel.appendChild(leftPanel);\n  bottomPanel.appendChild(rightPanel);\n  rightPanel.appendChild(node1);\n  rightPanel.appendChild(node2);\n  rightPanel.appendChild(circle);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const layoutConfig = {\n    width: 500,\n    height: 300,\n  };\n  const layoutFolder = gui.addFolder(\"Container's Layout\");\n  layoutFolder.add(layoutConfig, 'width', 100, 600).onChange((width) => {\n    root.style.width = width;\n  });\n  layoutFolder.add(layoutConfig, 'height', 200, 500).onChange((height) => {\n    root.style.height = height;\n  });\n\n  const leftConfig = {\n    'width(percent)': 100,\n  };\n  const leftFolder = gui.addFolder(\"LeftPanel's Layout\");\n  leftFolder.add(leftConfig, 'width(percent)', 0, 100).onChange((width) => {\n    leftPanelText.style.width = `${width}%`;\n  });\n});\n",title:{zh:"使用 Yoga 排版引擎 - 文字排版",en:"Use Yoga layout engine - text"},filename:"yoga-text.js",isNew:!1},{id:"yoga-animation",source:"import { Canvas, CanvasEvent, Rect, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Plugin as PluginYoga } from '@antv/g-plugin-yoga';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst canvasRenderer = new CanvasRenderer();\nconst plugin = new PluginYoga();\ncanvasRenderer.registerPlugin(plugin);\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const root = new Rect({\n    id: 'root',\n    style: {\n      fill: '#C6E5FF',\n      width: 500,\n      height: 300,\n      display: 'flex',\n      x: 50,\n      y: 50,\n    },\n  });\n  canvas.appendChild(root);\n\n  const node1 = new Rect({\n    id: 'node1',\n    style: {\n      fill: 'white',\n      stroke: 'grey',\n      lineWidth: 1,\n      opacity: 0.8,\n      width: 100,\n      height: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  });\n  node1.appendChild(\n    new Text({\n      id: 'node1-text',\n      style: {\n        fontFamily: 'PingFang SC',\n        fontSize: 32,\n        fill: '#1890FF',\n        text: '1',\n      },\n    }),\n  );\n  const node2 = new Rect({\n    id: 'node2',\n    style: {\n      fill: 'white',\n      stroke: 'grey',\n      lineWidth: 1,\n      opacity: 0.8,\n      width: 100,\n      height: 100,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexGrow: 1,\n    },\n  });\n  node2.appendChild(\n    new Text({\n      id: 'node2-text',\n      style: {\n        fontFamily: 'PingFang SC',\n        fontSize: 32,\n        fill: '#1890FF',\n        text: '2',\n      },\n    }),\n  );\n\n  root.appendChild(node1);\n  root.appendChild(node2);\n\n  node1.animate(\n    [\n      { top: 0, left: 0, width: 100, marginAll: 0, paddingLeft: 0 },\n      { top: 100, left: 100, width: 200, marginAll: 20, paddingLeft: 50 },\n    ],\n    {\n      duration: 1000,\n      easing: 'cubic-bezier(0.250, 0.460, 0.450, 0.940)',\n      fill: 'both',\n      iterations: Infinity,\n      direction: 'alternate-reverse',\n    },\n  );\n\n  node2.animate([{ flexGrow: 1 }, { flexGrow: 0.5 }], {\n    duration: 1000,\n    easing: 'cubic-bezier(0.250, 0.460, 0.450, 0.940)',\n    fill: 'both',\n    iterations: Infinity,\n    direction: 'alternate-reverse',\n  });\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const layoutConfig = {\n    width: 500,\n    height: 300,\n  };\n  const layoutFolder = gui.addFolder(\"Container's Layout\");\n  layoutFolder.add(layoutConfig, 'width', 100, 600).onChange((width) => {\n    root.style.width = width;\n  });\n  layoutFolder.add(layoutConfig, 'height', 200, 500).onChange((height) => {\n    root.style.height = height;\n  });\n});\n",title:{zh:"使用 Yoga 排版引擎 - 对属性应用动画",en:"Use Yoga layout engine - use animation"},filename:"yoga-animation.js",isNew:!1}],icon:"",id:"yoga",title:{en:"Yoga Layout Engine",zh:"Yoga 排版引擎"},api:null,childrenKey:"demos",order:11},{demos:[{id:"zdog",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Plugin as PluginRoughCanvasRenderer } from '@antv/g-plugin-zdog-canvas-renderer';\nimport { Plugin as PluginRoughSvgRenderer } from '@antv/g-plugin-zdog-svg-renderer';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\ncanvasRenderer.registerPlugin(new PluginRoughCanvasRenderer());\nconst svgRenderer = new SVGRenderer();\nsvgRenderer.registerPlugin(new PluginRoughSvgRenderer());\n\n// create a canvas & use `g-canvas`\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  /**\n   * Circle\n   */\n  const circle = new Circle({\n    style: {\n      cx: 150,\n      cy: 100,\n      r: 50,\n      fill: '#1890FF',\n      stroke: '#F04864',\n      strokeOpacity: 0.5,\n      lineWidth: 4,\n      cursor: 'pointer',\n    },\n  });\n  canvas.appendChild(circle);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', ['canvas', 'svg'])\n    .onChange((renderer) => {\n      canvas.setRenderer(renderer === 'canvas' ? canvasRenderer : svgRenderer);\n    });\n  rendererFolder.open();\n});\n",title:{zh:"使用 Zdog 渲染",en:"Use Zdog"},filename:"zdog.js",isNew:!1}],icon:"",id:"zdog",title:{en:"Zdog",zh:"Zdog 伪 3D 效果"},api:null,childrenKey:"demos",order:11},{demos:[{id:"annotation",screenshot:"https://mdn.alipayobjects.com/antforest/afts/img/A*joHKRpe9U4YAAAAAAAAAAAAADrd2AQ/Dec-13-2022%2015-08-49.gif",source:"import {\n  Canvas,\n  CanvasEvent,\n  Circle,\n  Ellipse,\n  Image,\n  Line,\n  Polyline,\n  Polygon,\n  Rect,\n} from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin as AnnotationPlugin } from '@antv/g-plugin-annotation';\nimport { Plugin as DragndropPlugin } from '@antv/g-plugin-dragndrop';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\nconst annotationPlugin = new AnnotationPlugin({\n  enableDeleteTargetWithShortcuts: true,\n  enableDeleteAnchorsWithShortcuts: true,\n  enableAutoSwitchDrawingMode: true,\n  enableDisplayMidAnchors: true,\n  enableRotateAnchor: true,\n  selectableStyle: {\n    selectionFill: 'rgba(24,144,255,0.15)',\n    selectionStroke: '#1890FF',\n    selectionStrokeWidth: 2.5,\n    anchorFill: '#1890FF',\n    anchorStroke: '#1890FF',\n    selectedAnchorSize: 10,\n    selectedAnchorFill: 'red',\n    selectedAnchorStroke: 'blue',\n    selectedAnchorStrokeWidth: 10,\n    selectedAnchorStrokeOpacity: 0.6,\n    midAnchorFillOpacity: 0.6,\n  },\n});\ncanvasRenderer.registerPlugin(annotationPlugin);\nsvgRenderer.registerPlugin(annotationPlugin);\nwebglRenderer.registerPlugin(annotationPlugin);\nwebgpuRenderer.registerPlugin(annotationPlugin);\ncanvaskitRenderer.registerPlugin(annotationPlugin);\n\nconst dragndropPlugin = new DragndropPlugin({\n  dragstartDistanceThreshold: 10,\n  dragstartTimeThreshold: 100,\n});\ncanvasRenderer.registerPlugin(dragndropPlugin);\nsvgRenderer.registerPlugin(dragndropPlugin);\nwebglRenderer.registerPlugin(dragndropPlugin);\nwebgpuRenderer.registerPlugin(dragndropPlugin);\ncanvaskitRenderer.registerPlugin(dragndropPlugin);\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst circle = new Circle({\n  style: {\n    cx: 200,\n    cy: 200,\n    r: 100,\n    stroke: '#F04864',\n    lineWidth: 10,\n    selectable: true,\n  },\n});\n\nconst ellipse = new Ellipse({\n  style: {\n    cx: 440,\n    cy: 200,\n    rx: 100,\n    ry: 50,\n    stroke: '#F04864',\n    lineWidth: 10,\n    selectable: true,\n  },\n});\n\nconst image = new Image({\n  style: {\n    x: 300,\n    y: 280,\n    width: 200,\n    height: 200,\n    src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n    // transform: 'scale(0.5) rotate(30deg)',\n    selectable: true,\n  },\n});\nimage.addEventListener('selected', () => {\n  console.log('image selected');\n});\nimage.addEventListener('deselected', () => {\n  console.log('image deselected');\n});\n\nconst rect = new Rect({\n  style: {\n    x: 100,\n    y: 280,\n    width: 100,\n    height: 200,\n    fill: 'blue',\n    stroke: 'red',\n    selectable: true,\n  },\n});\n\nconst line = new Line({\n  style: {\n    x1: 100,\n    y1: 100,\n    x2: 100,\n    y2: 300,\n    lineWidth: 10,\n    stroke: 'red',\n    selectable: true,\n  },\n});\n\nconst polyline = new Polyline({\n  style: {\n    points: [\n      [200, 100],\n      [300, 100],\n      [300, 200],\n      [300, 300],\n    ],\n    lineWidth: 10,\n    stroke: 'red',\n    selectable: true,\n  },\n});\n\nconst polygon = new Polygon({\n  style: {\n    points: [\n      [100, 100],\n      [300, 100],\n      [300, 300],\n      [100, 300],\n    ],\n    lineWidth: 10,\n    stroke: 'red',\n    selectable: true,\n    selectableUI: 'rect',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle);\n  canvas.appendChild(ellipse);\n  canvas.appendChild(image);\n  canvas.appendChild(rect);\n  canvas.appendChild(line);\n  canvas.appendChild(polyline);\n  canvas.appendChild(polygon);\n\n  annotationPlugin.setDrawingMode(true);\n  annotationPlugin.setDrawer('rect');\n\n  annotationPlugin.addEventListener('drawer:enable', (setDrawer) => {\n    console.log('drawer:enable', setDrawer);\n  });\n\n  annotationPlugin.addEventListener('draw:start', (toolstate) => {\n    console.log('draw:start', toolstate);\n  });\n\n  annotationPlugin.addEventListener('draw:complete', ({ type, path }) => {\n    // use any brush you preferred\n    const brush = {\n      stroke: 'black',\n      strokeWidth: 10,\n      selectable: true,\n    };\n\n    if (type === 'polyline') {\n      const polyline = new Polyline({\n        style: {\n          ...brush,\n          points: path.map(({ x, y }) => [x, y]),\n        },\n      });\n      canvas.appendChild(polyline);\n    } else if (type === 'polygon') {\n      const polygon = new Polygon({\n        style: {\n          ...brush,\n          points: path.map(({ x, y }) => [x, y]),\n        },\n      });\n      canvas.appendChild(polygon);\n    } else if (type === 'rect') {\n      const rect = new Polygon({\n        style: {\n          ...brush,\n          selectableUI: 'rect',\n          points: path.map(({ x, y }) => [x, y]),\n        },\n      });\n      canvas.appendChild(rect);\n    } else if (type === 'circle') {\n      const circle = new Circle({\n        style: {\n          ...brush,\n          cx: path[0].x,\n          cy: path[0].y,\n          r: 20,\n        },\n      });\n      canvas.appendChild(circle);\n    }\n  });\n\n  annotationPlugin.addEventListener('draw:cancel', (toolstate) => {\n    console.log('draw:cancel', toolstate);\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst selectableFolder = gui.addFolder('selectable');\nconst selectableConfig = {\n  selectionFill: 'rgba(24,144,255,0.15)',\n  selectionFillOpacity: 1,\n  selectionStroke: '#1890FF',\n  selectionStrokeOpacity: 1,\n  selectionStrokeWidth: 2.5,\n  selectionLineDash: 0,\n  anchorFill: '#1890FF',\n  anchorFillOpacity: 1,\n  anchorStroke: '#1890FF',\n  anchorStrokeOpacity: 1,\n  anchorStrokeWidth: 1,\n  anchorSize: 6,\n  selectedAnchorFill: '#1890FF',\n  allowVertexAdditionAndDeletion: true,\n  allowTargetRotation: true,\n};\nselectableFolder\n  .addColor(selectableConfig, 'selectionFill')\n  .onChange((selectionFill) => {\n    annotationPlugin.updateSelectableStyle({\n      selectionFill,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'selectionFillOpacity', 0, 1)\n  .onChange((selectionFillOpacity) => {\n    annotationPlugin.updateSelectableStyle({\n      selectionFillOpacity,\n    });\n  });\nselectableFolder\n  .addColor(selectableConfig, 'selectionStroke')\n  .onChange((selectionStroke) => {\n    annotationPlugin.updateSelectableStyle({\n      selectionStroke,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'selectionStrokeOpacity', 0, 1)\n  .onChange((selectionStrokeOpacity) => {\n    annotationPlugin.updateSelectableStyle({\n      selectionStrokeOpacity,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'selectionStrokeWidth', 1, 20)\n  .onChange((selectionStrokeWidth) => {\n    annotationPlugin.updateSelectableStyle({\n      selectionStrokeWidth,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'selectionLineDash', 0, 20)\n  .onChange((selectionLineDash) => {\n    annotationPlugin.updateSelectableStyle({\n      selectionLineDash,\n    });\n  });\nselectableFolder\n  .addColor(selectableConfig, 'anchorFill')\n  .onChange((anchorFill) => {\n    annotationPlugin.updateSelectableStyle({\n      anchorFill,\n    });\n  });\nselectableFolder\n  .addColor(selectableConfig, 'anchorStroke')\n  .onChange((anchorStroke) => {\n    annotationPlugin.updateSelectableStyle({\n      anchorStroke,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'anchorSize', 5, 20)\n  .onChange((anchorSize) => {\n    annotationPlugin.updateSelectableStyle({\n      anchorSize,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'anchorStrokeWidth', 1, 20)\n  .onChange((anchorStrokeWidth) => {\n    annotationPlugin.updateSelectableStyle({\n      anchorStrokeWidth,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'anchorFillOpacity', 0, 1)\n  .onChange((anchorFillOpacity) => {\n    annotationPlugin.updateSelectableStyle({\n      anchorFillOpacity,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'anchorStrokeOpacity', 0, 1)\n  .onChange((anchorStrokeOpacity) => {\n    annotationPlugin.updateSelectableStyle({\n      anchorStrokeOpacity,\n    });\n  });\nselectableFolder\n  .addColor(selectableConfig, 'selectedAnchorFill')\n  .onChange((selectedAnchorFill) => {\n    annotationPlugin.updateSelectableStyle({\n      selectedAnchorFill,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'allowVertexAdditionAndDeletion')\n  .onChange((allowed) => {\n    annotationPlugin.allowVertexAdditionAndDeletion(allowed);\n  });\nselectableFolder\n  .add(selectableConfig, 'allowTargetRotation')\n  .onChange((allowed) => {\n    annotationPlugin.allowTargetRotation(allowed);\n  });\nselectableFolder.open();\n\nconst drawerFolder = gui.addFolder('drawer');\nconst drawerConfig = {\n  rectStroke: '#FAAD14',\n  rectStrokeWidth: 2.5,\n  rectLineDash: 6,\n  polylineVertexFill: '#FFFFFF',\n  polylineVertexSize: 6,\n  polylineVertexStroke: '#FAAD14',\n  polylineVertexStrokeWidth: 2,\n  polylineActiveVertexFill: '#FAAD14',\n  polylineActiveVertexSize: 6,\n  polylineActiveVertexStroke: '#FAAD14',\n  polylineActiveVertexStrokeWidth: 4,\n  polylineSegmentStroke: '#FAAD14',\n  polylineActiveSegmentStroke: '#FAAD14',\n};\ndrawerFolder.addColor(drawerConfig, 'rectStroke').onChange((rectStroke) => {\n  annotationPlugin.updateDrawerStyle({\n    rectStroke,\n  });\n});\ndrawerFolder\n  .add(drawerConfig, 'rectStrokeWidth', 0, 10)\n  .onChange((rectStrokeWidth) => {\n    annotationPlugin.updateDrawerStyle({\n      rectStrokeWidth,\n    });\n  });\ndrawerFolder\n  .add(drawerConfig, 'rectLineDash', 0, 10)\n  .onChange((rectLineDash) => {\n    annotationPlugin.updateDrawerStyle({\n      rectLineDash,\n    });\n  });\ndrawerFolder\n  .addColor(drawerConfig, 'polylineVertexFill')\n  .onChange((polylineVertexFill) => {\n    annotationPlugin.updateDrawerStyle({\n      polylineVertexFill,\n    });\n  });\ndrawerFolder\n  .addColor(drawerConfig, 'polylineVertexStroke')\n  .onChange((polylineVertexStroke) => {\n    annotationPlugin.updateDrawerStyle({\n      polylineVertexStroke,\n    });\n  });\ndrawerFolder\n  .add(drawerConfig, 'polylineVertexSize', 0, 10)\n  .onChange((polylineVertexSize) => {\n    annotationPlugin.updateDrawerStyle({\n      polylineVertexSize,\n    });\n  });\ndrawerFolder\n  .add(drawerConfig, 'polylineVertexStrokeWidth', 0, 10)\n  .onChange((polylineVertexStrokeWidth) => {\n    annotationPlugin.updateDrawerStyle({\n      polylineVertexStrokeWidth,\n    });\n  });\ndrawerFolder\n  .addColor(drawerConfig, 'polylineSegmentStroke')\n  .onChange((polylineSegmentStroke) => {\n    annotationPlugin.updateDrawerStyle({\n      polylineSegmentStroke,\n    });\n  });\n\ndrawerFolder\n  .addColor(drawerConfig, 'polylineActiveVertexFill')\n  .onChange((polylineActiveVertexFill) => {\n    annotationPlugin.updateDrawerStyle({\n      polylineActiveVertexFill,\n    });\n  });\ndrawerFolder\n  .addColor(drawerConfig, 'polylineActiveVertexStroke')\n  .onChange((polylineActiveVertexStroke) => {\n    annotationPlugin.updateDrawerStyle({\n      polylineActiveVertexStroke,\n    });\n  });\ndrawerFolder\n  .add(drawerConfig, 'polylineActiveVertexSize', 0, 10)\n  .onChange((polylineActiveVertexSize) => {\n    annotationPlugin.updateDrawerStyle({\n      polylineActiveVertexSize,\n    });\n  });\ndrawerFolder\n  .add(drawerConfig, 'polylineActiveVertexStrokeWidth', 0, 10)\n  .onChange((polylineActiveVertexStrokeWidth) => {\n    annotationPlugin.updateDrawerStyle({\n      polylineActiveVertexStrokeWidth,\n    });\n  });\ndrawerFolder\n  .addColor(drawerConfig, 'polylineActiveSegmentStroke')\n  .onChange((polylineActiveSegmentStroke) => {\n    annotationPlugin.updateDrawerStyle({\n      polylineActiveSegmentStroke,\n    });\n  });\ndrawerFolder.close();\n\nconst apiFolder = gui.addFolder('API');\nconst apiConfig = {\n  setDrawingMode: true,\n  setDrawer: 'rect',\n  selectDisplayObject: 'none',\n  deselectDisplayObject: 'none',\n  getSelectedDisplayObjects: () => {\n    console.log(annotationPlugin.getSelectedDisplayObjects());\n  },\n  removeImage: () => {\n    image.remove();\n  },\n};\napiFolder.add(apiConfig, 'setDrawingMode').onChange((enable) => {\n  annotationPlugin.setDrawingMode(enable);\n});\napiFolder\n  .add(apiConfig, 'setDrawer', ['rect', 'polyline', 'polygon', 'circle'])\n  .onChange((drawer) => {\n    annotationPlugin.setDrawer(drawer);\n  });\napiFolder\n  .add(apiConfig, 'selectDisplayObject', [\n    'rect',\n    'image',\n    'circle',\n    'ellipse',\n    'line',\n    'polyline',\n    'none',\n  ])\n  .onChange((shape) => {\n    let target;\n    if (shape === 'rect') {\n      target = rect;\n    } else if (shape === 'image') {\n      target = image;\n    } else if (shape === 'circle') {\n      target = circle;\n    } else if (shape === 'ellipse') {\n      target = ellipse;\n    } else if (shape === 'line') {\n      target = line;\n    } else if (shape === 'polyline') {\n      target = polyline;\n    }\n    annotationPlugin.selectDisplayObject(target);\n  });\n\napiFolder\n  .add(apiConfig, 'deselectDisplayObject', [\n    'rect',\n    'image',\n    'circle',\n    'ellipse',\n    'line',\n    'polyline',\n    'none',\n  ])\n  .onChange((shape) => {\n    let target;\n    if (shape === 'rect') {\n      target = rect;\n    } else if (shape === 'image') {\n      target = image;\n    } else if (shape === 'circle') {\n      target = circle;\n    } else if (shape === 'ellipse') {\n      target = ellipse;\n    } else if (shape === 'line') {\n      target = line;\n    } else if (shape === 'polyline') {\n      target = polyline;\n    }\n    annotationPlugin.deselectDisplayObject(target);\n  });\n\napiFolder.add(apiConfig, 'getSelectedDisplayObjects');\napiFolder.add(apiConfig, 'removeImage');\napiFolder.open();\n\nconst camera = canvas.getCamera();\nconst cameraFolder = gui.addFolder('camera actions');\nconst cameraConfig = {\n  panX: 0,\n  panY: 0,\n  zoom: 1,\n  roll: 0,\n};\ncameraFolder.add(cameraConfig, 'zoom', 0.1, 10).onChange((zoom) => {\n  camera.setZoom(zoom);\n});\ncameraFolder.add(cameraConfig, 'roll', -90, 90).onChange((roll) => {\n  camera.rotate(0, 0, roll);\n});\ncameraFolder.open();\n",title:{zh:"使用标注",en:"Use annotation"},filename:"annotation.js",isNew:!1},{id:"selectable-image",source:"import { Canvas, CanvasEvent, Image } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin as AnnotationPlugin } from '@antv/g-plugin-annotation';\nimport { Plugin as DragndropPlugin } from '@antv/g-plugin-dragndrop';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\nconst annotationPlugin = new AnnotationPlugin({\n  enableDeleteTargetWithShortcuts: true,\n  enableDeleteAnchorsWithShortcuts: true,\n  enableAutoSwitchDrawingMode: true,\n  enableDisplayMidAnchors: true,\n  enableRotateAnchor: true,\n  selectableStyle: {\n    selectionFill: 'rgba(24,144,255,0.15)',\n    selectionStroke: '#1890FF',\n    selectionStrokeWidth: 2.5,\n    anchorFill: '#1890FF',\n    anchorStroke: '#1890FF',\n    selectedAnchorSize: 10,\n    selectedAnchorFill: 'red',\n    selectedAnchorStroke: 'blue',\n    selectedAnchorStrokeWidth: 10,\n    selectedAnchorStrokeOpacity: 0.6,\n    midAnchorFillOpacity: 0.6,\n  },\n});\ncanvasRenderer.registerPlugin(annotationPlugin);\nsvgRenderer.registerPlugin(annotationPlugin);\nwebglRenderer.registerPlugin(annotationPlugin);\nwebgpuRenderer.registerPlugin(annotationPlugin);\ncanvaskitRenderer.registerPlugin(annotationPlugin);\n\nconst dragndropPlugin = new DragndropPlugin({\n  dragstartDistanceThreshold: 10,\n  dragstartTimeThreshold: 100,\n});\ncanvasRenderer.registerPlugin(dragndropPlugin);\nsvgRenderer.registerPlugin(dragndropPlugin);\nwebglRenderer.registerPlugin(dragndropPlugin);\nwebgpuRenderer.registerPlugin(dragndropPlugin);\ncanvaskitRenderer.registerPlugin(dragndropPlugin);\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst image = new Image({\n  style: {\n    x: 300,\n    y: 280,\n    width: 200,\n    height: 200,\n    src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n    selectable: true,\n  },\n});\nimage.addEventListener('selected', () => {\n  console.log('image selected');\n});\nimage.addEventListener('deselected', () => {\n  console.log('image deselected');\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(image);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst selectableFolder = gui.addFolder('selectable');\nconst selectableConfig = {\n  selectionFill: 'rgba(24,144,255,0.15)',\n  selectionFillOpacity: 1,\n  selectionStroke: '#1890FF',\n  selectionStrokeOpacity: 1,\n  selectionStrokeWidth: 2.5,\n  selectionLineDash: 0,\n  anchorFill: '#1890FF',\n  anchorFillOpacity: 1,\n  anchorStroke: '#1890FF',\n  anchorStrokeOpacity: 1,\n  anchorStrokeWidth: 1,\n  anchorSize: 6,\n  selectedAnchorFill: '#1890FF',\n};\nselectableFolder\n  .addColor(selectableConfig, 'selectionFill')\n  .onChange((selectionFill) => {\n    annotationPlugin.updateSelectableStyle({\n      selectionFill,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'selectionFillOpacity', 0, 1)\n  .onChange((selectionFillOpacity) => {\n    annotationPlugin.updateSelectableStyle({\n      selectionFillOpacity,\n    });\n  });\nselectableFolder\n  .addColor(selectableConfig, 'selectionStroke')\n  .onChange((selectionStroke) => {\n    annotationPlugin.updateSelectableStyle({\n      selectionStroke,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'selectionStrokeOpacity', 0, 1)\n  .onChange((selectionStrokeOpacity) => {\n    annotationPlugin.updateSelectableStyle({\n      selectionStrokeOpacity,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'selectionStrokeWidth', 1, 20)\n  .onChange((selectionStrokeWidth) => {\n    annotationPlugin.updateSelectableStyle({\n      selectionStrokeWidth,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'selectionLineDash', 0, 20)\n  .onChange((selectionLineDash) => {\n    annotationPlugin.updateSelectableStyle({\n      selectionLineDash,\n    });\n  });\nselectableFolder\n  .addColor(selectableConfig, 'anchorFill')\n  .onChange((anchorFill) => {\n    annotationPlugin.updateSelectableStyle({\n      anchorFill,\n    });\n  });\nselectableFolder\n  .addColor(selectableConfig, 'anchorStroke')\n  .onChange((anchorStroke) => {\n    annotationPlugin.updateSelectableStyle({\n      anchorStroke,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'anchorSize', 5, 20)\n  .onChange((anchorSize) => {\n    annotationPlugin.updateSelectableStyle({\n      anchorSize,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'anchorStrokeWidth', 1, 20)\n  .onChange((anchorStrokeWidth) => {\n    annotationPlugin.updateSelectableStyle({\n      anchorStrokeWidth,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'anchorFillOpacity', 0, 1)\n  .onChange((anchorFillOpacity) => {\n    annotationPlugin.updateSelectableStyle({\n      anchorFillOpacity,\n    });\n  });\nselectableFolder\n  .add(selectableConfig, 'anchorStrokeOpacity', 0, 1)\n  .onChange((anchorStrokeOpacity) => {\n    annotationPlugin.updateSelectableStyle({\n      anchorStrokeOpacity,\n    });\n  });\nselectableFolder\n  .addColor(selectableConfig, 'selectedAnchorFill')\n  .onChange((selectedAnchorFill) => {\n    annotationPlugin.updateSelectableStyle({\n      selectedAnchorFill,\n    });\n  });\nselectableFolder.open();\n\nconst targetFolder = gui.addFolder('change image');\nconst targetConfig = {\n  opacity: 1,\n  reposition: () => {\n    image.setPosition(200, 200);\n    image.style.width = 100;\n    image.style.src =\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8eoKRbfOwgAAAAAAAAAAAABkARQnAQ';\n    annotationPlugin.refreshSelectableUI(image);\n  },\n};\ntargetFolder.add(targetConfig, 'opacity', 0, 1).onChange((opacity) => {\n  image.style.opacity = opacity;\n\n  const ui = annotationPlugin.getSelectableUI(image);\n  const maskImage = ui.querySelector('image');\n  maskImage.style.opacity = opacity;\n});\ntargetFolder.add(targetConfig, 'reposition');\n\ntargetFolder.open();\n",title:{zh:"操作图片",en:"Select image"},filename:"selectable-image.js",isNew:!1}],icon:"",id:"annotation",title:{en:"Annotation",zh:"标注"},api:null,childrenKey:"demos",order:20},{demos:[{id:"orbit-control",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*1u8eRKMbVX8AAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, CameraType } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshBasicMaterial,\n  CubeGeometry,\n  Mesh,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\n(async () => {\n  await canvas.ready;\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n  const map = plugin.loadTexture(\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8TlCRIsKeUkAAAAAAAAAAAAAARQnAQ',\n  );\n\n  const cubeGeometry = new CubeGeometry(device, {\n    width: 200,\n    height: 200,\n    depth: 200,\n  });\n  const basicMaterial = new MeshBasicMaterial(device, {\n    // wireframe: true,\n    map,\n  });\n\n  const cube = new Mesh({\n    style: {\n      fill: '#1890FF',\n      opacity: 1,\n      geometry: cubeGeometry,\n      material: basicMaterial,\n    },\n  });\n\n  cube.setPosition(300, 250, 0);\n\n  canvas.appendChild(cube);\n\n  const camera = canvas.getCamera();\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n    cube.rotate(0, 1, 0);\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const cameraFolder = gui.addFolder('camera');\n  const cameraConfig = {\n    type: 'Exploring',\n  };\n\n  const types = ['Orbiting', 'Exploring', 'Tracking'];\n  const enums = [\n    CameraType.ORBITING,\n    CameraType.EXPLORING,\n    CameraType.TRACKING,\n  ];\n  cameraFolder.add(cameraConfig, 'type', types).onChange((type) => {\n    const index = types.indexOf(type);\n    camera.setType(enums[index]);\n  });\n})();\n",title:{zh:"使用 Orbit Control",en:"Use orbit control"},filename:"orbit-control.js",isNew:!1}],icon:"",id:"control",title:{en:"Camera Control",zh:"相机控制"},api:null,childrenKey:"demos",order:20},{demos:[{id:"css-select",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*enWBR60fAnEAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Circle, Group } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Plugin } from '@antv/g-plugin-css-select';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\nsolarSystem\n   |    |\n   |   sun\n   |\n earthOrbit\n   |    |\n   |  earth\n   |\n  moonOrbit\n      |\n     moon\n */\n\n// create a canvas renderer\nconst canvasRenderer = new CanvasRenderer();\n// register CSS select plugin\ncanvasRenderer.registerPlugin(new Plugin());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst solarSystem = new Group({\n  id: 'solarSystem',\n});\nconst earthOrbit = new Group({\n  id: 'earthOrbit',\n});\nconst moonOrbit = new Group({\n  id: 'moonOrbit',\n});\n\nconst sun = new Circle({\n  id: 'sun',\n  className: 'classname-sun',\n  style: {\n    r: 100,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\nconst earth = new Circle({\n  id: 'earth',\n  className: 'classname-earth',\n  style: {\n    r: 50,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\nconst moon = new Circle({\n  id: 'moon',\n  className: 'classname-moon',\n  style: {\n    r: 25,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\n\nsolarSystem.appendChild(sun);\nsolarSystem.appendChild(earthOrbit);\nearthOrbit.appendChild(earth);\nearthOrbit.appendChild(moonOrbit);\nmoonOrbit.appendChild(moon);\n\nsolarSystem.setPosition(300, 250);\nearthOrbit.translate(100, 0);\nmoonOrbit.translate(100, 0);\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(solarSystem);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false, width: 400 });\n$wrapper.appendChild(gui.domElement);\nconst selectorFolder = gui.addFolder('CSS Selector');\nconst selectorConfig = {\n  getElementById: 'sun',\n  getElementsByClassName: 'classname-sun',\n  getElementsByTagName: 'circle',\n  querySelector: '[r=100]',\n  querySelectorAll: '[r=100]',\n};\nconst clear = () => {\n  solarSystem.forEach((child) => {\n    child.setAttribute('fill', '#1890FF');\n  });\n};\nselectorFolder\n  .add(selectorConfig, 'getElementById', ['sun', 'earth', 'moon'])\n  .onChange((id) => {\n    clear();\n    const target = solarSystem.getElementById(id);\n    target.setAttribute('fill', '#F04864');\n  });\nselectorFolder\n  .add(selectorConfig, 'getElementsByClassName', [\n    'classname-sun',\n    'classname-earth',\n    'classname-moon',\n  ])\n  .onChange((className) => {\n    clear();\n    const targets = solarSystem.getElementsByClassName(className);\n    targets.forEach((target) => {\n      target.setAttribute('fill', '#F04864');\n    });\n  });\nselectorFolder\n  .add(selectorConfig, 'getElementsByTagName', ['circle', 'rect'])\n  .onChange((className) => {\n    clear();\n    const targets = solarSystem.getElementsByTagName(className);\n    targets.forEach((target) => {\n      target.setAttribute('fill', '#F04864');\n    });\n  });\nselectorFolder\n  .add(selectorConfig, 'querySelector', ['[r=100]', '[r=50]', '[r=25]'])\n  .onChange((selector) => {\n    clear();\n    const target = solarSystem.querySelector(selector);\n    target.setAttribute('fill', '#F04864');\n  });\nselectorFolder\n  .add(selectorConfig, 'querySelectorAll', ['[r=100]', '[r=50]', '[r=25]'])\n  .onChange((selector) => {\n    clear();\n    const targets = solarSystem.querySelectorAll(selector);\n    targets.forEach((target) => {\n      target.setAttribute('fill', '#F04864');\n    });\n  });\nselectorFolder.open();\n",title:{zh:"CSS 选择器插件",en:"CSS Selector Plugin"},filename:"css-select.js",isNew:!1}],icon:"",id:"css-select",title:{en:"CSS Select",zh:"CSS 选择器"},api:null,childrenKey:"demos",order:20}],childrenKey:"examples"},{id:"gpgpu",title:{zh:"GPGPU",en:"GPGPU"},examples:[{demos:[{id:"add-2-vectors",source:"import { WebGPUDeviceContribution, BufferUsage } from '@antv/g-device-api';\n\nconst $canvas = document.createElement('canvas');\n\n(async () => {\n  const deviceContributionWebGPU = new WebGPUDeviceContribution({\n    shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n  });\n\n  const swapChain = await deviceContributionWebGPU.createSwapChain($canvas);\n  const device = swapChain.getDevice();\n\n  const program = device.createProgram({\n    compute: {\n      wgsl: `\n      @binding(0) @group(0) var<storage, read_write> input : array<i32>;\n      @binding(1) @group(0) var<storage, read_write> output : array<i32>;\n      \n      @compute @workgroup_size(8, 8)\n      fn main(\n        @builtin(global_invocation_id) global_id : vec3<u32>\n      ) {\n        var index = global_id.x;\n        output[index] = input[index] + output[index];\n      }\n      `,\n    },\n  });\n\n  const inputBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n    viewOrSize: new Int32Array([1, 2, 3, 4]),\n  });\n  const outputBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n    viewOrSize: new Int32Array([1, 2, 3, 4]),\n  });\n\n  const pipeline = device.createComputePipeline({\n    inputLayout: null,\n    program,\n  });\n  const bindings = device.createBindings({\n    pipeline,\n    storageBufferBindings: [\n      {\n        binding: 0,\n        buffer: inputBuffer,\n      },\n      {\n        binding: 1,\n        buffer: outputBuffer,\n      },\n    ],\n  });\n\n  const computePass = device.createComputePass();\n  computePass.setPipeline(pipeline);\n  computePass.setBindings(bindings);\n  computePass.dispatchWorkgroups(1);\n  device.submitPass(computePass);\n\n  const readback = device.createReadback();\n  const output = await readback.readBuffer(outputBuffer);\n  console.log(output);\n})();\n",title:{zh:"向量相加 WebGPU",en:"Add 2 vectors"},filename:"add-2-vectors.js",isNew:!1},{id:"matrix-multiplication",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*PzQMRKjwro4AAAAAAAAAAAAADmJ7AQ",source:"import { WebGPUDeviceContribution, BufferUsage } from '@antv/g-device-api';\nimport * as lil from 'lil-gui';\n\n/**\n * ported from https://web.dev/gpu-compute/\n *\n * should run under WebGPU-supported browsers such as Chrome 94+\n */\n\nconst WORKGROUP_SIZE_X = 8;\nconst WORKGROUP_SIZE_Y = 8;\nconst $canvas = document.createElement('canvas');\n\n(async () => {\n  const deviceContributionWebGPU = new WebGPUDeviceContribution({\n    shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n  });\n\n  const swapChain = await deviceContributionWebGPU.createSwapChain($canvas);\n  const device = swapChain.getDevice();\n\n  const program = device.createProgram({\n    compute: {\n      wgsl: `\n  struct Matrix {\n    size : vec2<f32>,\n    numbers: array<f32>,\n  };\n  \n  @group(0) @binding(0) var<storage, read> firstMatrix : Matrix;\n  @group(0) @binding(1) var<storage, read> secondMatrix : Matrix;\n  @group(0) @binding(2) var<storage, read_write> resultMatrix : Matrix;\n  \n  @compute @workgroup_size(${WORKGROUP_SIZE_X}, ${WORKGROUP_SIZE_Y})\n  fn main(\n    @builtin(global_invocation_id) global_id : vec3<u32>\n  ) {\n    // Guard against out-of-bounds work group sizes\n    if (global_id.x >= u32(firstMatrix.size.x) || global_id.y >= u32(secondMatrix.size.y)) {\n      return;\n    }\n  \n    resultMatrix.size = vec2<f32>(firstMatrix.size.x, secondMatrix.size.y);\n  \n    let resultCell = vec2<u32>(global_id.x, global_id.y);\n    var result = 0.0;\n    for (var i = 0u; i < u32(firstMatrix.size.y); i = i + 1u) {\n      let a = i + resultCell.x * u32(firstMatrix.size.y);\n      let b = resultCell.y + i * u32(secondMatrix.size.y);\n      result = result + firstMatrix.numbers[a] * secondMatrix.numbers[b];\n    }\n  \n    let index = resultCell.y + resultCell.x * u32(secondMatrix.size.y);\n    resultMatrix.numbers[index] = result;\n  }\n      `,\n    },\n  });\n\n  const pipeline = device.createComputePipeline({\n    inputLayout: null,\n    program,\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild(gui.domElement);\n  const folder = gui.addFolder('matrix size');\n  const config = {\n    size: 32,\n  };\n  folder.add(config, 'size', [32, 64, 128, 256, 512, 1024]).onChange((size) => {\n    const first = new Float32Array(\n      [size, size].concat(new Array(size * size).fill(Math.random())),\n    );\n    const second = new Float32Array(\n      [size, size].concat(new Array(size * size).fill(Math.random())),\n    );\n    calc(first, second);\n  });\n  folder.open();\n\n  const cpuMultiplication = (firstMatrix, secondMatrix, $div) => {\n    const startTime = window.performance.now();\n\n    const x = firstMatrix[0];\n    const z = firstMatrix[1];\n    const y = secondMatrix[1];\n\n    const resultMatrix = new Float32Array(firstMatrix[0] * secondMatrix[1]);\n\n    let productRow = Array.apply(null, new Array(y)).map(\n      Number.prototype.valueOf,\n      0,\n    );\n    let product = new Array(x);\n    for (let p = 0; p < x; p++) {\n      product[p] = productRow.slice();\n    }\n    for (let i = 0; i < x; i++) {\n      for (let j = 0; j < y; j++) {\n        for (let k = 0; k < z; k++) {\n          product[i][j] += firstMatrix[i * x + k] * secondMatrix[k * y + j];\n        }\n      }\n    }\n\n    const elapsed = window.performance.now() - startTime;\n    setCPUTimeElapsed(elapsed, $div);\n\n    return elapsed;\n  };\n\n  const gpuMultiplication = async (firstMatrix, secondMatrix, $div) => {\n    let startTime = window.performance.now();\n    const x = Math.ceil(firstMatrix[0] / WORKGROUP_SIZE_X); // X dimension of the grid of workgroups to dispatch.\n    const y = Math.ceil(secondMatrix[1] / WORKGROUP_SIZE_Y); // Y dimension of the grid of workgroups to dispatch.\n    const resultMatrixBufferSize = 2 + firstMatrix[0] * secondMatrix[1];\n    const resultMatrix = new Float32Array(resultMatrixBufferSize);\n\n    const firstMatrixBuffer = device.createBuffer({\n      usage: BufferUsage.STORAGE,\n      viewOrSize: firstMatrix,\n    });\n    const secondMatrixBuffer = device.createBuffer({\n      usage: BufferUsage.STORAGE,\n      viewOrSize: secondMatrix,\n    });\n    const resultBuffer = device.createBuffer({\n      usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n      viewOrSize: resultMatrix,\n    });\n    const readback = device.createReadback();\n\n    console.log(secondMatrix);\n\n    const bindings = device.createBindings({\n      pipeline,\n      storageBufferBindings: [\n        {\n          binding: 0,\n          buffer: firstMatrixBuffer,\n        },\n        {\n          binding: 1,\n          buffer: secondMatrixBuffer,\n        },\n        {\n          binding: 2,\n          buffer: resultBuffer,\n        },\n      ],\n    });\n\n    const computePass = device.createComputePass();\n    computePass.setPipeline(pipeline);\n    computePass.setBindings(bindings);\n    computePass.dispatchWorkgroups(x, y);\n    device.submitPass(computePass);\n\n    await readback.readBuffer(resultBuffer);\n    const elapsed = window.performance.now() - startTime;\n\n    setGPUTimeElapsed(elapsed, $div);\n\n    // output\n    console.log(resultMatrix);\n    return elapsed;\n  };\n\n  const calc = async (firstMatrix, secondMatrix) => {\n    const $div = document.createElement('div');\n    $div.textContent = `Matrix size: ${firstMatrix[0]} * ${firstMatrix[1]}`;\n    $wrapper.appendChild($div);\n\n    const cpuTimeElapsed = cpuMultiplication(firstMatrix, secondMatrix, $div);\n    const gpuTimeElapsed = await gpuMultiplication(\n      firstMatrix,\n      secondMatrix,\n      $div,\n    );\n    const speedUp = Number.parseFloat(cpuTimeElapsed / gpuTimeElapsed).toFixed(\n      1,\n    );\n\n    const $speedUp = document.createElement('div');\n    $speedUp.textContent = `SpeedUp: ${speedUp}x`;\n    $speedUp.style = 'font-weight: bold; margin-bottom: 16px;';\n    $wrapper.appendChild($speedUp);\n  };\n\n  const setCPUTimeElapsed = (time, $div) => {\n    const $cpu = document.createElement('div');\n    $cpu.textContent = `CPU Time Elapsed: ${Number.parseFloat(time).toFixed(\n      2,\n    )}ms`;\n    $div.appendChild($cpu);\n  };\n  const setGPUTimeElapsed = (time, $div) => {\n    const $gpu = document.createElement('div');\n    $gpu.textContent = `GPU Time Elapsed: ${Number.parseFloat(time).toFixed(\n      2,\n    )}ms`;\n    $div.appendChild($gpu);\n  };\n\n  calc(\n    new Float32Array([2 /* rows */, 4 /* columns */, 1, 2, 3, 4, 5, 6, 7, 8]),\n    new Float32Array([4 /* rows */, 2 /* columns */, 1, 2, 3, 4, 5, 6, 7, 8]),\n  );\n})();\n",title:{zh:"矩阵乘法",en:"Matrix multiplication"},filename:"matrix-multiplication.js",isNew:!1},{id:"reduce",source:"import * as lil from 'lil-gui';\nimport { WebGPUDeviceContribution, BufferUsage } from '@antv/g-device-api';\n\n/**\n * ported from https://github.com/9ballsyndrome/WebGL_Compute_shader/blob/master/webgl-compute-bitonicSort/js/script.js\n */\n\nconst $canvas = document.createElement('canvas');\n\n(async () => {\n  const deviceContributionWebGPU = new WebGPUDeviceContribution({\n    shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n  });\n\n  const swapChain = await deviceContributionWebGPU.createSwapChain($canvas);\n  const device = swapChain.getDevice();\n\n  // create a canvas\n  const $wrapper = document.getElementById('container');\n\n  const workgroupSize = 128;\n\n  const program = device.createProgram({\n    compute: {\n      wgsl: `\n  struct Array {\n    size: u32,\n    data: array<f32>,\n  };\n  \n  @group(0) @binding(0) var<storage, read_write> input : Array;\n  \n  var<workgroup> sharedData : array<f32, ${workgroupSize}>;\n  \n  @compute @workgroup_size(${workgroupSize}, 1)\n  fn main(\n    @builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n  ) {\n    var tid = local_id.x;\n    // var i = global_id.x;\n  \n    // version 4\n    var i = workgroup_id.x * ${workgroupSize}u * 2u + local_id.x;\n    sharedData[tid] = input.data[i] + input.data[i + ${workgroupSize}u];\n    // sharedData[tid] = input.data[i];\n    workgroupBarrier();\n  \n    // version 5\n    // for (var s = ${workgroupSize}u / 2u; s > 32u; s = s >> 1u) {\n    // version 3\n    for (var s = ${workgroupSize}u / 2u; s > 0u; s = s >> 1u) {\n      if (tid < s) {\n        sharedData[tid] = sharedData[tid] + sharedData[tid + s];\n      }\n  \n    // for (var s = 1u; s < ${workgroupSize}u; s = s * 2u) {\n      // version 1\n      // if (tid % (s * 2u) == 0u) {\n      //   sharedData[tid] = sharedData[tid] + sharedData[tid + s];\n      // }\n  \n      // version 2\n      // var index = 2u * s * tid;\n      // if (index < ${workgroupSize}u) {\n      //   sharedData[index] = sharedData[index] + sharedData[index + s];\n      // }\n      \n      workgroupBarrier();\n    }\n  \n    // if (tid < 32u) {\n    //   sharedData[tid] =\n    //     sharedData[tid + 32u]\n    //     + sharedData[tid + 16u]\n    //     + sharedData[tid + 8u]\n    //     + sharedData[tid + 4u]\n    //     + sharedData[tid + 2u]\n    //     + sharedData[tid + 1u];\n    // }\n  \n    if (tid == 0u) {\n      input.data[workgroup_id.x] = sharedData[0u];\n    }\n  }\n`,\n    },\n  });\n\n  const pipeline = device.createComputePipeline({\n    inputLayout: null,\n    program,\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const folder = gui.addFolder('array size');\n  const config = {\n    size: 32,\n  };\n  folder\n    .add(config, 'size', [32, 1000, 10000, 100000, 1000000])\n    .onChange((size) => {\n      calc(new Array(Number(size)).fill(undefined).map(() => Math.random()));\n    });\n  folder.open();\n\n  const cpuReduceSum = (array) => {\n    const startTime = window.performance.now();\n    console.log(array.reduce((prev, cur) => prev + cur, 0));\n    console.log(`CPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n  };\n\n  const gpuReduceSum = async (array) => {\n    const padding = array.concat(\n      new Array(workgroupSize - (array.length % workgroupSize)).fill(0),\n    );\n\n    const input = new Float32Array(\n      [padding.length] // size\n        .concat(padding), // origin data\n    );\n\n    let startTime = window.performance.now();\n\n    const result = device.createBuffer({\n      usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n      viewOrSize: input,\n    });\n    const readback = device.createReadback();\n    const bindings = device.createBindings({\n      pipeline,\n      storageBufferBindings: [\n        {\n          binding: 0,\n          buffer: result,\n        },\n      ],\n    });\n\n    const computePass = device.createComputePass();\n    computePass.setPipeline(pipeline);\n    computePass.setBindings(bindings);\n    computePass.dispatchWorkgroups(Math.ceil(array.length / workgroupSize), 1);\n    device.submitPass(computePass);\n\n    // result\n    await readback.readBuffer(result);\n\n    console.log(\n      input\n        .slice(1, padding.length / workgroupSize + 1)\n        .reduce((prev, cur) => prev + cur, 0),\n    );\n    console.log(`GPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n  };\n\n  const calc = async (array) => {\n    cpuReduceSum(array);\n    gpuReduceSum(array);\n  };\n\n  const $text = document.createElement('div');\n  $text.textContent =\n    'Please open the devtools, the CPU & CPU time will be printed in console.';\n  $wrapper.appendChild($text);\n\n  calc(new Array(200).fill(1));\n})();\n",title:{zh:"Reduce Sum",en:"Reduce Sum"},filename:"reduce.js",isNew:!1},{id:"compute-shader-test",source:"import { WebGPUDeviceContribution, BufferUsage } from '@antv/g-device-api';\n\n/**\n * ported from Tint\n * @see https://dawn.googlesource.com/tint/+/f9d19719fd500668e1f74d98e881073baeaf03ff/test/intrinsics/gen/atomicSub/051100.wgsl\n */\n\nconst $canvas = document.createElement('canvas');\n\n(async () => {\n  const deviceContributionWebGPU = new WebGPUDeviceContribution({\n    shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n  });\n\n  const swapChain = await deviceContributionWebGPU.createSwapChain($canvas);\n  const device = swapChain.getDevice();\n\n  const program = device.createProgram({\n    compute: {\n      wgsl: `\n      \nstruct Buffer {\n  data: array<i32>,\n};\nstruct AtomicBuffer {\n  data: array<atomic<i32>>,\n};\nstruct Params {\n  k: i32,\n  center: vec2<i32>,\n};\n\n@binding(0) @group(0) var<storage, read_write> input : Buffer;\n@binding(1) @group(0) var<storage, read_write> output : AtomicBuffer;\n@binding(2) @group(0) var<uniform> params : Params;\n\n@compute @workgroup_size(8, 8)\nfn main(\n  @builtin(global_invocation_id) global_id : vec3<u32>\n) {\n  var index = global_id.x;\n  if (index >= u32(4)) {\n    return;\n  }\n\n  input.data[index] = input.data[index] + params.k;\n\n  atomicSub(&output.data[index], 1);\n}\n      `,\n    },\n  });\n\n  const inputBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n    viewOrSize: new Int32Array([1, 2, 3, 4]),\n  });\n  const outputBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n    viewOrSize: new Int32Array([0, 0, 0, 0]),\n  });\n  const uniformBuffer = device.createBuffer({\n    usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n    viewOrSize: new Int32Array([1, 0, 0, 0]),\n  });\n\n  const pipeline = device.createComputePipeline({\n    inputLayout: null,\n    program,\n  });\n  const bindings = device.createBindings({\n    pipeline,\n    storageBufferBindings: [\n      {\n        binding: 0,\n        buffer: inputBuffer,\n      },\n      {\n        binding: 1,\n        buffer: outputBuffer,\n      },\n    ],\n    uniformBufferBindings: [\n      {\n        binding: 2,\n        buffer: uniformBuffer,\n        size: 4 * 4,\n      },\n    ],\n  });\n\n  const computePass = device.createComputePass();\n  computePass.setPipeline(pipeline);\n  computePass.setBindings(bindings);\n\n  for (let i = 0; i < 100; i++) {\n    uniformBuffer.setSubData(\n      0,\n      new Uint8Array(new Int32Array([2, 0, 0, 0]).buffer),\n    );\n    computePass.dispatchWorkgroups(1);\n\n    uniformBuffer.setSubData(\n      0,\n      new Uint8Array(new Int32Array([-2, 0, 0, 0]).buffer),\n    );\n    computePass.dispatchWorkgroups(1);\n  }\n\n  device.submitPass(computePass);\n\n  const readback = device.createReadback();\n  const input = await readback.readBuffer(inputBuffer);\n  const output = await readback.readBuffer(outputBuffer);\n  console.log(input, output);\n})();\n",title:{zh:"Compute Shader 测试",en:"Compute Shader"},filename:"compute-shader-test.js",isNew:!1}],icon:"",id:"basic-algorithm",title:{en:"Simple Algorithm",zh:"简单算法"},api:null,childrenKey:"demos",order:0},{demos:[{id:"webgpu-graph-pagerank",source:"import { WebGPUGraph } from '@antv/webgpu-graph';\nimport { Algorithm } from '@antv/g6';\nimport * as lil from 'lil-gui';\n\n/**\n * @see /zh/docs/api/gpgpu/webgpu-graph#pagerank\n */\n\n// GPU version\nconst graph = new WebGPUGraph();\n// CPU version\nconst { pageRank } = Algorithm;\n\nconst calcInCPU = (data) => {\n  const startTime = window.performance.now();\n  const result = pageRank(data);\n  console.log(`CPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n  // console.log('CPU result: ', result);\n};\nconst calcInGPU = async (data) => {\n  const startTime = window.performance.now();\n  const result = await graph.pageRank(data);\n  console.log(`GPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n  // console.log('GPU result: ', result);\n};\n\nconst simpleDataset = {\n  nodes: [\n    {\n      id: 'A',\n      label: 'A',\n    },\n    {\n      id: 'B',\n      label: 'B',\n    },\n    {\n      id: 'C',\n      label: 'C',\n    },\n    {\n      id: 'D',\n      label: 'D',\n    },\n    {\n      id: 'E',\n      label: 'E',\n    },\n    {\n      id: 'F',\n      label: 'F',\n    },\n    {\n      id: 'G',\n      label: 'G',\n    },\n    {\n      id: 'H',\n      label: 'H',\n    },\n    {\n      id: 'I',\n      label: 'I',\n    },\n    {\n      id: 'J',\n      label: 'J',\n    },\n    {\n      id: 'K',\n      label: 'K',\n    },\n  ],\n  edges: [\n    {\n      source: 'D',\n      target: 'A',\n    },\n    {\n      source: 'D',\n      target: 'B',\n    },\n    {\n      source: 'B',\n      target: 'C',\n    },\n    {\n      source: 'C',\n      target: 'B',\n    },\n    {\n      source: 'F',\n      target: 'B',\n    },\n    {\n      source: 'F',\n      target: 'E',\n    },\n    {\n      source: 'E',\n      target: 'F',\n    },\n    {\n      source: 'E',\n      target: 'D',\n    },\n    {\n      source: 'E',\n      target: 'B',\n    },\n    {\n      source: 'K',\n      target: 'E',\n    },\n    {\n      source: 'J',\n      target: 'E',\n    },\n    {\n      source: 'I',\n      target: 'E',\n    },\n    {\n      source: 'H',\n      target: 'E',\n    },\n    {\n      source: 'G',\n      target: 'E',\n    },\n    {\n      source: 'G',\n      target: 'B',\n    },\n    {\n      source: 'H',\n      target: 'B',\n    },\n    {\n      source: 'I',\n      target: 'B',\n    },\n  ],\n};\n\ncalcInCPU(simpleDataset);\ncalcInGPU(simpleDataset);\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild(gui.domElement);\nconst folder = gui.addFolder('dataset');\nconst config = {\n  dataset: 'simple',\n};\nfolder\n  .add(config, 'dataset', [\n    'simple',\n    '8k nodes & 5k edges',\n    '1k nodes & 500k edges',\n  ])\n  .onChange(async (dataset) => {\n    let input;\n    if (dataset === 'simple') {\n      input = simpleDataset;\n    } else if (dataset === '8k nodes & 5k edges') {\n      const res = await fetch(\n        'https://gw.alipayobjects.com/os/basement_prod/0b9730ff-0850-46ff-84d0-1d4afecd43e6.json',\n      );\n      input = await res.json();\n    } else if (dataset === '1k nodes & 500k edges') {\n      const res = await fetch(\n        'https://gw.alipayobjects.com/os/bmw-prod/db52686c-423b-41d8-956b-38536252a48f.json',\n      );\n      input = await res.json();\n    }\n\n    calcInCPU(input);\n    calcInGPU(input);\n  });\nfolder.open();\n",title:{zh:"WebGPU Graph PageRank",en:"WebGPU Graph PageRank"},filename:"webgpu-graph-pagerank.js",isNew:!1},{id:"webgpu-graph-sssp",source:"import { Algorithm } from '@antv/g6';\nimport { WebGPUGraph } from '@antv/webgpu-graph';\nimport * as lil from 'lil-gui';\n\n/**\n * @see /zh/docs/api/gpgpu/webgpu-graph#sssp\n */\n\n// GPU version\nconst graph = new WebGPUGraph();\n// CPU version\nconst { findShortestPath } = Algorithm;\n\nconst calcInCPU = (data, sourceId, weightPropertyName) => {\n  const startTime = window.performance.now();\n  for (let i = 0; i < data.nodes.length; i++) {\n    const { length, path, allPath } = findShortestPath(\n      data,\n      sourceId,\n      data.nodes[i].id,\n      true,\n      weightPropertyName,\n    );\n    // console.log(`from A to ${data.nodes[i].id} = ${length}: `, path);\n  }\n  console.log(`CPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n};\nconst calcInGPU = async (data, sourceId, weightPropertyName) => {\n  const startTime = window.performance.now();\n  const result = await graph.sssp(data, sourceId, weightPropertyName);\n  console.log(`GPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n\n  // console.log(result);\n};\n\nconst simpleDataset = {\n  nodes: [\n    {\n      id: 'A',\n      label: 'A',\n    },\n    {\n      id: 'B',\n      label: 'B',\n    },\n    {\n      id: 'C',\n      label: 'C',\n    },\n    {\n      id: 'D',\n      label: 'D',\n    },\n    {\n      id: 'E',\n      label: 'E',\n    },\n  ],\n  edges: [\n    {\n      source: 'A',\n      target: 'B',\n      weight: 9,\n    },\n    {\n      source: 'A',\n      target: 'C',\n      weight: 4,\n    },\n    {\n      source: 'B',\n      target: 'C',\n      weight: 10,\n    },\n    {\n      source: 'B',\n      target: 'D',\n      weight: 2,\n    },\n    {\n      source: 'B',\n      target: 'E',\n      weight: 3,\n    },\n    {\n      source: 'C',\n      target: 'D',\n      weight: 2,\n    },\n    {\n      source: 'C',\n      target: 'E',\n      weight: 11,\n    },\n    {\n      source: 'D',\n      target: 'B',\n      weight: 2,\n    },\n    {\n      source: 'E',\n      target: 'D',\n      weight: 2,\n    },\n  ],\n};\n\ncalcInGPU(simpleDataset, 'A', 'weight');\ncalcInCPU(simpleDataset, 'A', 'weight');\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild(gui.domElement);\nconst folder = gui.addFolder('dataset');\nconst config = {\n  dataset: 'simple',\n};\nfolder\n  .add(config, 'dataset', ['simple', '1k nodes & 5k edges'])\n  .onChange(async (dataset) => {\n    if (dataset === 'simple') {\n      calcInGPU(simpleDataset, 'A', 'weight');\n      calcInCPU(simpleDataset, 'A', 'weight');\n    } else if (dataset === '1k nodes & 5k edges') {\n      const res = await fetch(\n        'https://gw.alipayobjects.com/os/bmw-prod/180daecd-28d0-4d8f-ac4b-064d21062c12.json',\n      );\n      const input = await res.json();\n      calcInGPU(input, '0', 'weight');\n      calcInCPU(input, '0', 'weight');\n    }\n  });\nfolder.open();\n\nconst $text = document.createElement('div');\n$text.textContent =\n  'Please open the devtools, the shortest paths will be printed in console.';\n$wrapper.appendChild($text);\n",title:{zh:"WebGPU Graph SSSP",en:"WebGPU Graph SSSP"},filename:"webgpu-graph-sssp.js",isNew:!1},{id:"webgpu-graph-bfs",source:"import { Algorithm } from '@antv/g6';\nimport { WebGPUGraph } from '@antv/webgpu-graph';\nimport * as lil from 'lil-gui';\n\n/**\n * @see /zh/docs/api/gpgpu/webgpu-graph#bfs\n */\n\n// GPU version\nconst graph = new WebGPUGraph();\n// CPU version\nconst { breadthFirstSearch } = Algorithm;\n\nconst simpleDataset = {\n  nodes: [\n    {\n      id: 'A',\n    },\n    {\n      id: 'B',\n    },\n    {\n      id: 'C',\n    },\n    {\n      id: 'D',\n    },\n    {\n      id: 'E',\n    },\n    {\n      id: 'F',\n    },\n    {\n      id: 'G',\n    },\n    {\n      id: 'H',\n    },\n  ],\n  edges: [\n    {\n      source: 'A',\n      target: 'B',\n    },\n    {\n      source: 'B',\n      target: 'C',\n    },\n    {\n      source: 'C',\n      target: 'G',\n    },\n    {\n      source: 'A',\n      target: 'D',\n    },\n    {\n      source: 'A',\n      target: 'E',\n    },\n    {\n      source: 'E',\n      target: 'F',\n    },\n    {\n      source: 'F',\n      target: 'D',\n    },\n  ],\n};\n\nconst calcInCPU = (data, root) => {\n  const startTime = window.performance.now();\n  breadthFirstSearch(data, root, {\n    enter: ({ current, previous }) => {\n      // 开始遍历点的回调\n      // console.log('enter', current);\n    },\n    leave: ({ current, previous }) => {\n      // 遍历完节点的回调\n      // console.log('leave', current);\n    },\n  });\n  console.log(`CPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n};\n\nconst calcInGPU = async (data, root) => {\n  const startTime = window.performance.now();\n  await graph.bfs(data, root);\n  console.log(`GPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n};\n\ncalcInCPU(simpleDataset, 'A');\ncalcInGPU(simpleDataset, 'A');\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild(gui.domElement);\nconst folder = gui.addFolder('dataset');\nconst config = {\n  dataset: 'simple',\n};\nfolder\n  .add(config, 'dataset', [\n    'simple',\n    '1k nodes & 5k edges',\n    '1k nodes & 500k edges',\n  ])\n  .onChange(async (dataset) => {\n    if (dataset === 'simple') {\n      calcInCPU(simpleDataset, 'A');\n      calcInGPU(simpleDataset, 'A');\n    } else if (dataset === '1k nodes & 5k edges') {\n      const res = await fetch(\n        'https://gw.alipayobjects.com/os/bmw-prod/180daecd-28d0-4d8f-ac4b-064d21062c12.json',\n      );\n      const input = await res.json();\n      calcInGPU(input, '0');\n      calcInCPU(input, '0');\n    } else if (dataset === '1k nodes & 500k edges') {\n      const res = await fetch(\n        'https://gw.alipayobjects.com/os/bmw-prod/db52686c-423b-41d8-956b-38536252a48f.json',\n      );\n      const input = await res.json();\n      calcInGPU(input, '0');\n      calcInCPU(input, '0');\n    }\n  });\nfolder.open();\n",title:{zh:"WebGPU Graph BFS",en:"WebGPU Graph BFS"},filename:"webgpu-graph-bfs.js",isNew:!1}],icon:"",id:"webgpu-graph",title:{en:"WebGPU Graph",zh:"WebGPU Graph"},api:null,childrenKey:"demos",order:1},{demos:[{id:"bfs",source:"import { Algorithm } from '@antv/g6';\n\n/**\n * Implementing Breadth First Search in CUDA\n * @see https://siddharths2710.wordpress.com/2017/05/16/implementing-breadth-first-search-in-cuda/\n *\n * compared with G6:\n * @see https://g6.antv.vision/zh/docs/api/Algorithm#breadthfirstsearch\n */\n\n// /**\n//  * use Compressed Sparse Row (CSR) for adjacency list\n//  */\n// // datasource: https://github.com/sengorajkumar/gpu_graph_algorithms/blob/master/input/simple.gr_E.csv\n// const V = [0, 1, 2, 3, 4];\n// const E = [1, 2, 2, 3, 4, 3, 4, 1, 3];\n// const I = [0, 2, 5, 7, 8, 10];\n// const W = [9, 4, 10, 2, 3, 2, 11, 2, 2];\n// const From = [0, 0, 1, 1, 1, 2, 2, 3, 4];\n// const To = [1, 2, 2, 3, 4, 3, 4, 1, 3];\n// const BLOCK_SIZE = 1;\n// const BLOCKS = 5;\n\n// const CANVAS_SIZE = 1;\n\n// const $wrapper = document.getElementById('container');\n// const $text = document.createElement('div');\n// $text.textContent = 'Please open the devtools, the top nodes will be printed in console.';\n// $wrapper.appendChild($text);\n\n// // use WebGPU\n// const renderer = new Renderer();\n// renderer.registerPlugin(new Plugin());\n\n// // create a canvas\n// const canvas = new Canvas({\n//   container: $wrapper,\n//   width: CANVAS_SIZE,\n//   height: CANVAS_SIZE,\n//   renderer,\n// });\n\n// canvas.addEventListener(CanvasEvent.READY, () => {\n//   const plugin = renderer.getPlugin('device-renderer');\n//   const device = plugin.getDevice();\n//   const storeKernel = new Kernel(device, {\n//     computeShader: `\n// struct Buffer {\n//   data: array<f32>,\n// };\n\n// @group(0) @binding(0) var<storage, read> r : Buffer;\n// @group(0) @binding(1) var<storage, read_write> r_last : Buffer;\n\n// @compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\n// fn main(\n//   @builtin(global_invocation_id) global_id : vec3<u32>\n// ) {\n//   var index = global_id.x;\n//   if (index < ${V.length}u) {\n//     r_last.data[index] = r.data[index];\n//   }\n// }`,\n//   });\n\n//   const matmulKernel = new Kernel(device, {\n//     computeShader: `\n// struct Buffer {\n//   data: array<f32>,\n// };\n\n// @group(0) @binding(0) var<storage, read> graph : Buffer;\n// @group(0) @binding(1) var<storage, read_write> r : Buffer;\n// @group(0) @binding(2) var<storage, read> r_last : Buffer;\n\n// @compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\n// fn main(\n//   @builtin(global_invocation_id) global_id : vec3<u32>\n// ) {\n//   var index = global_id.x;\n//   if (index < ${V.length}u) {\n//     var sum = 0.0;\n//     for (var i = 0u; i < ${V.length}u; i = i + 1u) {\n//       sum = sum + r_last.data[i] * graph.data[index * ${V.length}u + i];\n//     }\n//     r.data[index] = sum;\n//   }\n// }\n//     `,\n//   });\n\n//   const rankDiffKernel = new Kernel(device, {\n//     computeShader: `\n// struct Buffer {\n//   data: array<f32>,\n// };\n\n// @group(0) @binding(0) var<storage, read> r : Buffer;\n// @group(0) @binding(1) var<storage, read_write> r_last : Buffer;\n\n// @compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\n// fn main(\n//   @builtin(global_invocation_id) global_id : vec3<u32>\n// ) {\n//   var index = global_id.x;\n//   if (index < ${V.length}u) {\n//     r_last.data[index] = abs(r_last.data[index] - r.data[index]);\n//   }\n// }\n//     `,\n//   });\n\n//   pageRankGPU(device, storeKernel, matmulKernel, rankDiffKernel);\n// });\n\n// const pageRankGPU = async (device, storeKernel, matmulKernel, rankDiffKernel) => {\n//   const d = 0.85;\n//   const eps = 0.000001;\n//   let maxIteration = 1000;\n//   const n = V.length;\n//   const graph = new Float32Array(new Array(n * n).fill((1 - d) / n));\n//   const r = new Float32Array(new Array(n).fill(1 / n));\n\n//   From.forEach((from, i) => {\n//     graph[To[i] * n + from] += d * 1.0;\n//   });\n\n//   for (let j = 0; j < n; j++) {\n//     let sum = 0.0;\n\n//     for (let i = 0; i < n; ++i) {\n//       sum += graph[i * n + j];\n//     }\n\n//     for (let i = 0; i < n; ++i) {\n//       if (sum != 0.0) {\n//         graph[i * n + j] /= sum;\n//       } else {\n//         graph[i * n + j] = 1 / n;\n//       }\n//     }\n//   }\n\n//   const rBuffer = device.createBuffer({\n//     usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n//     viewOrSize: new Float32Array(r),\n//   });\n//   const rLastBuffer = device.createBuffer({\n//     usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n//     viewOrSize: new Float32Array(n),\n//   });\n//   const graphBuffer = device.createBuffer({\n//     usage: BufferUsage.STORAGE,\n//     viewOrSize: new Float32Array(graph),\n//   });\n\n//   const readback = device.createReadback();\n\n//   storeKernel.setBinding(0, rBuffer);\n//   storeKernel.setBinding(1, rLastBuffer);\n\n//   matmulKernel.setBinding(0, graphBuffer);\n//   matmulKernel.setBinding(1, rBuffer);\n//   matmulKernel.setBinding(2, rLastBuffer);\n\n//   rankDiffKernel.setBinding(0, rBuffer);\n//   rankDiffKernel.setBinding(1, rLastBuffer);\n\n//   const startTime = window.performance.now();\n//   while (maxIteration--) {\n//     storeKernel.dispatch(1, 1);\n\n//     matmulKernel.dispatch(1, 1);\n\n//     rankDiffKernel.dispatch(1, 1);\n\n//     const last = await readback.readBuffer(rLastBuffer);\n//     const result = last.reduce((prev, cur) => prev + cur, 0);\n//     if (result < eps) {\n//       const out = await readback.readBuffer(rBuffer);\n//       console.log(out);\n//       break;\n//     }\n//   }\n\n//   console.log(`GPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n// };\n\nconst { breadthFirstSearch } = Algorithm;\nconst data = {\n  nodes: [\n    {\n      id: 'A',\n    },\n    {\n      id: 'B',\n    },\n    {\n      id: 'C',\n    },\n    {\n      id: 'D',\n    },\n    {\n      id: 'E',\n    },\n    {\n      id: 'F',\n    },\n    {\n      id: 'G',\n    },\n  ],\n  edges: [\n    {\n      source: 'A',\n      target: 'B',\n    },\n    {\n      source: 'B',\n      target: 'C',\n    },\n    {\n      source: 'C',\n      target: 'G',\n    },\n    {\n      source: 'A',\n      target: 'D',\n    },\n    {\n      source: 'A',\n      target: 'E',\n    },\n    {\n      source: 'E',\n      target: 'F',\n    },\n    {\n      source: 'F',\n      target: 'D',\n    },\n    {\n      source: 'D',\n      target: 'G',\n    },\n  ],\n};\n\n(async () => {\n  // load & parse CSV datasets, which use Compressed Sparse Row (CSR) for adjacency list\n  // const [V, E, From, To, I, W] = await Promise.all(\n  //   [\n  //     'https://gw.alipayobjects.com/os/bmw-prod/0272cae4-5ae0-4fbd-93f9-2b6a8e640a24.csv',\n  //     'https://gw.alipayobjects.com/os/bmw-prod/e8b24b84-3cc4-4a73-b213-7edf4467e03a.csv',\n  //     'https://gw.alipayobjects.com/os/bmw-prod/cba4ec3d-4eca-4f85-ae54-faeee0fa708a.csv',\n  //     'https://gw.alipayobjects.com/os/bmw-prod/8582d1ca-9fe6-4afb-8364-df6ccc619594.csv',\n  //     'https://gw.alipayobjects.com/os/bmw-prod/d84981b4-edcf-4df5-b672-45b0000fc5da.csv',\n  //     'https://gw.alipayobjects.com/os/bmw-prod/eb455fa7-73ac-43fe-bc5e-d5e6c3a1fb77.csv',\n  //   ].map(async (url, i) => {\n  //     const res = await fetch(url);\n  //     // adjust index for V, E, From and To\n  //     return (await res.text()).split(',').map((v) => Number(v.trim()) - (i <= 3 ? 1 : 0));\n  //   }),\n  // );\n\n  // const bigDataSet = {\n  //   nodes: V.map((v) => ({\n  //     id: `${v}`,\n  //     label: `${v}`,\n  //   })),\n  //   edges: From.map((from, i) => ({\n  //     source: `${from}`,\n  //     target: `${To[i]}`,\n  //   })),\n  // };\n\n  const startTime = window.performance.now();\n  breadthFirstSearch(data, 'A', {\n    enter: ({ current, previous }) => {\n      console.log(current);\n      // 开始遍历点的回调\n    },\n    leave: ({ current, previous }) => {\n      // 遍历完节点的回调\n    },\n  });\n  console.log(`CPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n})();\n",title:{zh:"Breadth First Search",en:"Breadth First Search"},filename:"bfs.js",isNew:!1},{id:"louvain",source:"import { Algorithm } from '@antv/g6';\n\n/**\n * Implementing Louvain Clustering Algorithms in CUDA\n * @see https://github.com/rapidsai/cugraph/tree/branch-22.08/cpp/src/community\n * @see https://medium.com/walmartglobaltech/demystifying-louvains-algorithm-and-its-implementation-in-gpu-9a07cdd3b010\n *\n * compared with G6:\n * @see https://g6.antv.vision/zh/docs/api/Algorithm#louvain\n */\n\n// /**\n//  * use Compressed Sparse Row (CSR) for adjacency list\n//  */\n// // datasource: https://github.com/sengorajkumar/gpu_graph_algorithms/blob/master/input/simple.gr_E.csv\n// const V = [0, 1, 2, 3, 4];\n// const E = [1, 2, 2, 3, 4, 3, 4, 1, 3];\n// const I = [0, 2, 5, 7, 8, 10];\n// const W = [9, 4, 10, 2, 3, 2, 11, 2, 2];\n// const From = [0, 0, 1, 1, 1, 2, 2, 3, 4];\n// const To = [1, 2, 2, 3, 4, 3, 4, 1, 3];\n// const BLOCK_SIZE = 1;\n// const BLOCKS = 5;\n\n// const CANVAS_SIZE = 1;\n\n// const $wrapper = document.getElementById('container');\n// const $text = document.createElement('div');\n// $text.textContent = 'Please open the devtools, the top nodes will be printed in console.';\n// $wrapper.appendChild($text);\n\n// // use WebGPU\n// const renderer = new Renderer();\n// renderer.registerPlugin(new Plugin());\n\n// // create a canvas\n// const canvas = new Canvas({\n//   container: $wrapper,\n//   width: CANVAS_SIZE,\n//   height: CANVAS_SIZE,\n//   renderer,\n// });\n\n// canvas.addEventListener(CanvasEvent.READY, () => {\n//   const plugin = renderer.getPlugin('device-renderer');\n//   const device = plugin.getDevice();\n//   const storeKernel = new Kernel(device, {\n//     computeShader: `\n// struct Buffer {\n//   data: array<f32>,\n// };\n\n// @group(0) @binding(0) var<storage, read> r : Buffer;\n// @group(0) @binding(1) var<storage, read_write> r_last : Buffer;\n\n// @compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\n// fn main(\n//   @builtin(global_invocation_id) global_id : vec3<u32>\n// ) {\n//   var index = global_id.x;\n//   if (index < ${V.length}u) {\n//     r_last.data[index] = r.data[index];\n//   }\n// }`,\n//   });\n\n//   const matmulKernel = new Kernel(device, {\n//     computeShader: `\n// struct Buffer {\n//   data: array<f32>,\n// };\n\n// @group(0) @binding(0) var<storage, read> graph : Buffer;\n// @group(0) @binding(1) var<storage, read_write> r : Buffer;\n// @group(0) @binding(2) var<storage, read> r_last : Buffer;\n\n// @compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\n// fn main(\n//   @builtin(global_invocation_id) global_id : vec3<u32>\n// ) {\n//   var index = global_id.x;\n//   if (index < ${V.length}u) {\n//     var sum = 0.0;\n//     for (var i = 0u; i < ${V.length}u; i = i + 1u) {\n//       sum = sum + r_last.data[i] * graph.data[index * ${V.length}u + i];\n//     }\n//     r.data[index] = sum;\n//   }\n// }\n//     `,\n//   });\n\n//   const rankDiffKernel = new Kernel(device, {\n//     computeShader: `\n// struct Buffer {\n//   data: array<f32>,\n// };\n\n// @group(0) @binding(0) var<storage, read> r : Buffer;\n// @group(0) @binding(1) var<storage, read_write> r_last : Buffer;\n\n// @compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\n// fn main(\n//   @builtin(global_invocation_id) global_id : vec3<u32>\n// ) {\n//   var index = global_id.x;\n//   if (index < ${V.length}u) {\n//     r_last.data[index] = abs(r_last.data[index] - r.data[index]);\n//   }\n// }\n//     `,\n//   });\n\n//   pageRankGPU(device, storeKernel, matmulKernel, rankDiffKernel);\n// });\n\n// const pageRankGPU = async (device, storeKernel, matmulKernel, rankDiffKernel) => {\n//   const d = 0.85;\n//   const eps = 0.000001;\n//   let maxIteration = 1000;\n//   const n = V.length;\n//   const graph = new Float32Array(new Array(n * n).fill((1 - d) / n));\n//   const r = new Float32Array(new Array(n).fill(1 / n));\n\n//   From.forEach((from, i) => {\n//     graph[To[i] * n + from] += d * 1.0;\n//   });\n\n//   for (let j = 0; j < n; j++) {\n//     let sum = 0.0;\n\n//     for (let i = 0; i < n; ++i) {\n//       sum += graph[i * n + j];\n//     }\n\n//     for (let i = 0; i < n; ++i) {\n//       if (sum != 0.0) {\n//         graph[i * n + j] /= sum;\n//       } else {\n//         graph[i * n + j] = 1 / n;\n//       }\n//     }\n//   }\n\n//   const rBuffer = device.createBuffer({\n//     usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n//     viewOrSize: new Float32Array(r),\n//   });\n//   const rLastBuffer = device.createBuffer({\n//     usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n//     viewOrSize: new Float32Array(n),\n//   });\n//   const graphBuffer = device.createBuffer({\n//     usage: BufferUsage.STORAGE,\n//     viewOrSize: new Float32Array(graph),\n//   });\n\n//   const readback = device.createReadback();\n\n//   storeKernel.setBinding(0, rBuffer);\n//   storeKernel.setBinding(1, rLastBuffer);\n\n//   matmulKernel.setBinding(0, graphBuffer);\n//   matmulKernel.setBinding(1, rBuffer);\n//   matmulKernel.setBinding(2, rLastBuffer);\n\n//   rankDiffKernel.setBinding(0, rBuffer);\n//   rankDiffKernel.setBinding(1, rLastBuffer);\n\n//   const startTime = window.performance.now();\n//   while (maxIteration--) {\n//     storeKernel.dispatch(1, 1);\n\n//     matmulKernel.dispatch(1, 1);\n\n//     rankDiffKernel.dispatch(1, 1);\n\n//     const last = await readback.readBuffer(rLastBuffer);\n//     const result = last.reduce((prev, cur) => prev + cur, 0);\n//     if (result < eps) {\n//       const out = await readback.readBuffer(rBuffer);\n//       console.log(out);\n//       break;\n//     }\n//   }\n\n//   console.log(`GPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n// };\n\nconst { louvain } = Algorithm;\nconst data = {\n  nodes: [\n    {\n      id: 'A',\n    },\n    {\n      id: 'B',\n    },\n    {\n      id: 'C',\n    },\n    {\n      id: 'D',\n    },\n    {\n      id: 'E',\n    },\n    {\n      id: 'F',\n    },\n    {\n      id: 'G',\n    },\n  ],\n  edges: [\n    {\n      source: 'A',\n      target: 'B',\n    },\n    {\n      source: 'B',\n      target: 'C',\n    },\n    {\n      source: 'C',\n      target: 'G',\n    },\n    {\n      source: 'A',\n      target: 'D',\n    },\n    {\n      source: 'A',\n      target: 'E',\n    },\n    {\n      source: 'E',\n      target: 'F',\n    },\n    {\n      source: 'F',\n      target: 'D',\n    },\n    {\n      source: 'D',\n      target: 'G',\n    },\n  ],\n};\n\n(async () => {\n  // load & parse CSV datasets, which use Compressed Sparse Row (CSR) for adjacency list\n  const [V, E, From, To, I, W] = await Promise.all(\n    [\n      'https://gw.alipayobjects.com/os/bmw-prod/0272cae4-5ae0-4fbd-93f9-2b6a8e640a24.csv',\n      'https://gw.alipayobjects.com/os/bmw-prod/e8b24b84-3cc4-4a73-b213-7edf4467e03a.csv',\n      'https://gw.alipayobjects.com/os/bmw-prod/cba4ec3d-4eca-4f85-ae54-faeee0fa708a.csv',\n      'https://gw.alipayobjects.com/os/bmw-prod/8582d1ca-9fe6-4afb-8364-df6ccc619594.csv',\n      'https://gw.alipayobjects.com/os/bmw-prod/d84981b4-edcf-4df5-b672-45b0000fc5da.csv',\n      'https://gw.alipayobjects.com/os/bmw-prod/eb455fa7-73ac-43fe-bc5e-d5e6c3a1fb77.csv',\n    ].map(async (url, i) => {\n      const res = await fetch(url);\n      // adjust index for V, E, From and To\n      return (await res.text())\n        .split(',')\n        .map((v) => Number(v.trim()) - (i <= 3 ? 1 : 0));\n    }),\n  );\n\n  const bigDataSet = {\n    nodes: V.map((v) => ({\n      id: `${v}`,\n      label: `${v}`,\n    })),\n    edges: From.map((from, i) => ({\n      source: `${from}`,\n      target: `${To[i]}`,\n    })),\n  };\n\n  const startTime = window.performance.now();\n  const result = louvain(bigDataSet);\n  console.log(`CPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n  console.log(result);\n})();\n",title:{zh:"Louvain Clustering Algorithm",en:"Louvain Clustering Algorithm"},filename:"louvain.js",isNew:!1},{id:"bellman-ford",source:"import { WebGPUDeviceContribution, BufferUsage } from '@antv/g-device-api';\nimport { Algorithm } from '@antv/g6';\n\n/**\n * SSSP(Bellman-Ford) ported from CUDA\n * @see https://www.lewuathe.com/illustration-of-distributed-bellman-ford-algorithm.html\n * @see https://github.com/sengorajkumar/gpu_graph_algorithms\n *\n * compared with G6:\n * @see https://g6.antv.vision/zh/docs/api/Algorithm#findshortestpathgraphdata-start-end-directed-weightpropertyname\n */\n\n/**\n * use Compressed Sparse Row (CSR) for adjacency list\n */\n// datasource: https://github.com/sengorajkumar/gpu_graph_algorithms/blob/master/input/simple.gr_E.csv\nconst V = [0, 1, 2, 3, 4];\nconst E = [1, 2, 2, 3, 4, 3, 4, 1, 3];\nconst I = [0, 2, 5, 7, 8, 9];\nconst W = [9, 4, 10, 2, 3, 2, 11, 2, 2];\nconst BLOCK_SIZE = 1;\nconst BLOCKS = 5;\n\nconst MAX_DISTANCE = 10000;\n\nconst $wrapper = document.getElementById('container');\nconst $text = document.createElement('div');\n$text.textContent =\n  'Please open the devtools, the shortest paths will be printed in console.';\n$wrapper.appendChild($text);\n\nconst $canvas = document.createElement('canvas');\n\n(async () => {\n  const deviceContributionWebGPU = new WebGPUDeviceContribution({\n    shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n  });\n\n  const swapChain = await deviceContributionWebGPU.createSwapChain($canvas);\n  const device = swapChain.getDevice();\n\n  const relaxProgram = device.createProgram({\n    compute: {\n      wgsl: `\nstruct Buffer {\n  data: array<i32>,\n};\nstruct AtomicBuffer {\n  data: array<atomic<i32>>,\n};\n\n@group(0) @binding(0) var<storage, read> d_in_E : Buffer;\n@group(0) @binding(1) var<storage, read> d_in_I : Buffer;\n@group(0) @binding(2) var<storage, read> d_in_W : Buffer;\n@group(0) @binding(3) var<storage, read> d_out_D : Buffer;\n@group(0) @binding(4) var<storage, read_write> d_out_Di : AtomicBuffer;\n\n@compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\nfn main(\n  @builtin(global_invocation_id) global_id : vec3<u32>\n) {\n  var index = global_id.x;\n  if (index < ${V.length}u) {\n    for (var j = d_in_I.data[index]; j < d_in_I.data[index + 1u]; j = j + 1) {\n      var w = d_in_W.data[j];\n      var du = d_out_D.data[index];\n      var dv = d_out_D.data[d_in_E.data[j]];\n      var newDist = du + w;\n      if (du == ${MAX_DISTANCE}) {\n        newDist = ${MAX_DISTANCE};\n      }\n\n      if (newDist < dv) {\n        atomicMin(&d_out_Di.data[d_in_E.data[j]], newDist);\n      }\n    }\n  }\n}`,\n    },\n  });\n  const relaxPipeline = device.createComputePipeline({\n    inputLayout: null,\n    program: relaxProgram,\n  });\n\n  const updateDistanceProgram = device.createProgram({\n    compute: {\n      wgsl: `\nstruct Buffer {\n  data: array<i32>,\n};\n\n@group(0) @binding(0) var<storage, read_write> d_out_D : Buffer;\n@group(0) @binding(1) var<storage, read_write> d_out_Di : Buffer;\n\n@compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\nfn main(\n  @builtin(global_invocation_id) global_id : vec3<u32>\n) {\n  var index = global_id.x;\n  if (index < ${V.length}u) {\n    if (d_out_D.data[index] > d_out_Di.data[index]) {\n      d_out_D.data[index] = d_out_Di.data[index];\n    }\n    d_out_Di.data[index] = d_out_D.data[index];\n  }\n}\n    `,\n    },\n  });\n  const updateDistancePipeline = device.createComputePipeline({\n    inputLayout: null,\n    program: updateDistanceProgram,\n  });\n\n  const updatePredProgram = device.createProgram({\n    compute: {\n      wgsl: `\nstruct Buffer {\n  data: array<i32>,\n};\nstruct AtomicBuffer {\n  data: array<atomic<i32>>,\n};\n\n@group(0) @binding(0) var<storage, read> d_in_V : Buffer;\n@group(0) @binding(1) var<storage, read> d_in_E : Buffer;\n@group(0) @binding(2) var<storage, read> d_in_I : Buffer;\n@group(0) @binding(3) var<storage, read> d_in_W : Buffer;\n@group(0) @binding(4) var<storage, read> d_out_D : Buffer;\n@group(0) @binding(5) var<storage, read_write> d_out_P : AtomicBuffer;\n\n@compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\nfn main(\n  @builtin(global_invocation_id) global_id : vec3<u32>\n) {\n  var index = global_id.x;\n  if (index < ${V.length}u) {\n    for (var j = d_in_I.data[index]; j < d_in_I.data[index + 1u]; j = j + 1) {\n      var u = d_in_V.data[index];\n      var w = d_in_W.data[j];\n\n      var dis_u = d_out_D.data[index];\n      var dis_v = d_out_D.data[d_in_E.data[j]];\n      if (dis_v == dis_u + w) {\n        atomicMin(&d_out_P.data[d_in_E.data[j]], u);\n      }\n    }\n  }\n}    \n    `,\n    },\n  });\n  const updatePredPipeline = device.createComputePipeline({\n    inputLayout: null,\n    program: updatePredProgram,\n  });\n\n  const VBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE,\n    viewOrSize: new Int32Array(V),\n  });\n  const EBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE,\n    viewOrSize: new Int32Array(E),\n  });\n  const IBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE,\n    viewOrSize: new Int32Array(I),\n  });\n  const WBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE,\n    viewOrSize: new Int32Array(W),\n  });\n  const DOutBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n    viewOrSize: new Int32Array([\n      0,\n      ...new Array(V.length - 1).fill(MAX_DISTANCE),\n    ]),\n  });\n  const DiOutBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n    viewOrSize: new Int32Array([\n      0,\n      ...new Array(V.length - 1).fill(MAX_DISTANCE),\n    ]),\n  });\n  const POutBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n    viewOrSize: new Int32Array([\n      0,\n      ...new Array(V.length - 1).fill(MAX_DISTANCE),\n    ]),\n  });\n  const relaxBindings = device.createBindings({\n    pipeline: relaxPipeline,\n    storageBufferBindings: [\n      {\n        binding: 0,\n        buffer: EBuffer,\n      },\n      {\n        binding: 1,\n        buffer: IBuffer,\n      },\n      {\n        binding: 2,\n        buffer: WBuffer,\n      },\n      {\n        binding: 3,\n        buffer: DOutBuffer,\n      },\n      {\n        binding: 4,\n        buffer: DiOutBuffer,\n      },\n    ],\n  });\n  const updateDistanceBindings = device.createBindings({\n    pipeline: updateDistancePipeline,\n    storageBufferBindings: [\n      {\n        binding: 0,\n        buffer: DOutBuffer,\n      },\n      {\n        binding: 1,\n        buffer: DiOutBuffer,\n      },\n    ],\n  });\n  const updatePredBindings = device.createBindings({\n    pipeline: updatePredPipeline,\n    storageBufferBindings: [\n      {\n        binding: 0,\n        buffer: VBuffer,\n      },\n      {\n        binding: 1,\n        buffer: EBuffer,\n      },\n      {\n        binding: 2,\n        buffer: IBuffer,\n      },\n      {\n        binding: 3,\n        buffer: WBuffer,\n      },\n      {\n        binding: 4,\n        buffer: DOutBuffer,\n      },\n      {\n        binding: 5,\n        buffer: POutBuffer,\n      },\n    ],\n  });\n\n  const calcShortestPath = async () => {\n    const readback = device.createReadback();\n    const startTime = window.performance.now();\n\n    for (let i = 1; i < V.length; i++) {\n      const relaxComputePass = device.createComputePass();\n      relaxComputePass.setPipeline(relaxPipeline);\n      relaxComputePass.setBindings(relaxBindings);\n      relaxComputePass.dispatchWorkgroups(1, 1);\n      device.submitPass(relaxComputePass);\n\n      const updateDistancePass = device.createComputePass();\n      updateDistancePass.setPipeline(updateDistancePipeline);\n      updateDistancePass.setBindings(updateDistanceBindings);\n      updateDistancePass.dispatchWorkgroups(1, 1);\n      device.submitPass(updateDistancePass);\n    }\n    const updatePredPass = device.createComputePass();\n    updatePredPass.setPipeline(updatePredPipeline);\n    updatePredPass.setBindings(updatePredBindings);\n    updatePredPass.dispatchWorkgroups(1, 1);\n    device.submitPass(updatePredPass);\n\n    // result\n    const out = await readback.readBuffer(DiOutBuffer);\n    const predecessor = await readback.readBuffer(POutBuffer);\n\n    const labels = ['A', 'B', 'C', 'D', 'E'];\n    for (let i = 0; i < V.length; i++) {\n      console.log(\n        `from ${labels[0]} to ${labels[i]} = ${out[i]}, predecessor = ${\n          labels[predecessor[i]]\n        }`,\n      );\n    }\n\n    console.log(`GPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n  };\n\n  calcShortestPath();\n})();\n\nconst { findShortestPath } = Algorithm;\nconst data = {\n  nodes: [\n    {\n      id: 'A',\n      label: 'A',\n    },\n    {\n      id: 'B',\n      label: 'B',\n    },\n    {\n      id: 'C',\n      label: 'C',\n    },\n    {\n      id: 'D',\n      label: 'D',\n    },\n    {\n      id: 'E',\n      label: 'E',\n    },\n  ],\n  edges: [\n    {\n      source: 'A',\n      target: 'B',\n      weight: 9,\n    },\n    {\n      source: 'A',\n      target: 'C',\n      weight: 4,\n    },\n    {\n      source: 'B',\n      target: 'C',\n      weight: 10,\n    },\n    {\n      source: 'B',\n      target: 'D',\n      weight: 2,\n    },\n    {\n      source: 'B',\n      target: 'E',\n      weight: 3,\n    },\n    {\n      source: 'C',\n      target: 'D',\n      weight: 2,\n    },\n    {\n      source: 'C',\n      target: 'E',\n      weight: 11,\n    },\n    {\n      source: 'D',\n      target: 'B',\n      weight: 2,\n    },\n    {\n      source: 'E',\n      target: 'D',\n      weight: 2,\n    },\n  ],\n};\n\nconst startTime = window.performance.now();\nfor (let i = 0; i < data.nodes.length; i++) {\n  const { length, path, allPath } = findShortestPath(\n    data,\n    'A',\n    data.nodes[i].id,\n    true,\n    'weight',\n  );\n  console.log(`from A to ${data.nodes[i].id} = ${length}: `, path);\n}\nconsole.log(`CPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n",title:{zh:"Bellman-Ford 最短路径算法",en:"Bellman-Ford SSSP"},filename:"bellman-ford.js",isNew:!1},{id:"bellman-ford-big-dataset",source:"import { WebGPUDeviceContribution, BufferUsage } from '@antv/g-device-api';\nimport { Algorithm } from '@antv/g6';\n\n/**\n * SSSP(Bellman-Ford) ported from CUDA,\n * find all shortest paths started from Node 0\n * @see https://www.lewuathe.com/illustration-of-distributed-bellman-ford-algorithm.html\n * @see https://github.com/sengorajkumar/gpu_graph_algorithms\n *\n * compared with G6:\n * @see https://g6.antv.vision/zh/docs/api/Algorithm#findshortestpathgraphdata-start-end-directed-weightpropertyname\n *\n * dataset: 1k vertices & 5k edges\n * @see https://github.com/sengorajkumar/gpu_graph_algorithms/tree/master/input\n */\n\nconst $canvas = document.createElement('canvas');\nconst $wrapper = document.getElementById('container');\n(async () => {\n  // load & parse CSV datasets, which use Compressed Sparse Row (CSR) for adjacency list\n  const [V, E, From, To, I, W] = await Promise.all(\n    [\n      'https://gw.alipayobjects.com/os/bmw-prod/0272cae4-5ae0-4fbd-93f9-2b6a8e640a24.csv',\n      'https://gw.alipayobjects.com/os/bmw-prod/e8b24b84-3cc4-4a73-b213-7edf4467e03a.csv',\n      'https://gw.alipayobjects.com/os/bmw-prod/cba4ec3d-4eca-4f85-ae54-faeee0fa708a.csv',\n      'https://gw.alipayobjects.com/os/bmw-prod/8582d1ca-9fe6-4afb-8364-df6ccc619594.csv',\n      'https://gw.alipayobjects.com/os/bmw-prod/d84981b4-edcf-4df5-b672-45b0000fc5da.csv',\n      'https://gw.alipayobjects.com/os/bmw-prod/eb455fa7-73ac-43fe-bc5e-d5e6c3a1fb77.csv',\n    ].map(async (url, i) => {\n      const res = await fetch(url);\n      // adjust index for V, E, From and To\n      return (await res.text())\n        .split(',')\n        .map((v) => Number(v.trim()) - (i <= 3 ? 1 : 0));\n    }),\n  );\n\n  // use G6's `findShortestPath` method\n  let startTime = window.performance.now();\n  let paths = calculateInCPU(V, From, To, W);\n  showResult('CPU', startTime, window.performance.now(), paths);\n\n  // use Compute Shader with WebGPU\n  startTime = window.performance.now();\n  paths = await calculateInGPU(V, E, I, W);\n  showResult('GPU', startTime, window.performance.now(), paths);\n})();\n\n// calculate with G6's SSSP in CPU\nconst calculateInCPU = (V, From, To, W) => {\n  const { findShortestPath } = Algorithm;\n  const data = {\n    nodes: V.map((v) => ({\n      id: `${v}`,\n      label: `${v}`,\n    })),\n    edges: From.map((from, i) => ({\n      source: `${from}`,\n      target: `${To[i]}`,\n      weight: W[i],\n    })),\n  };\n\n  const paths = [];\n  for (let i = 0; i < data.nodes.length; i++) {\n    // use SSSP for Node 0\n    const { length, path } = findShortestPath(\n      data,\n      '0',\n      data.nodes[i].id,\n      true,\n      'weight',\n    );\n    paths.push({\n      to: data.nodes[i].id,\n      length,\n      path,\n    });\n  }\n  return paths;\n};\n\n// we use 3 kernels\nconst calculateInGPU = async (V, E, I, W) => {\n  // The total number of workgroup invocations (4096) exceeds the maximum allowed (256).\n  const BLOCK_SIZE = 1;\n  const BLOCKS = 256;\n  const CANVAS_SIZE = 1;\n  const MAX_DISTANCE = 1000000;\n\n  const deviceContributionWebGPU = new WebGPUDeviceContribution({\n    shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n  });\n\n  const swapChain = await deviceContributionWebGPU.createSwapChain($canvas);\n  const device = swapChain.getDevice();\n\n  const relaxProgram = device.createProgram({\n    compute: {\n      wgsl: `\nstruct Buffer {\n  data: array<i32>,\n};\nstruct AtomicBuffer {\n  data: array<atomic<i32>>,\n};\n\n@group(0) @binding(0) var<storage, read> d_in_E : Buffer;\n@group(0) @binding(1) var<storage, read> d_in_I : Buffer;\n@group(0) @binding(2) var<storage, read> d_in_W : Buffer;\n@group(0) @binding(3) var<storage, read> d_out_D : Buffer;\n@group(0) @binding(4) var<storage, read_write> d_out_Di : AtomicBuffer;\n\n@compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\nfn main(\n  @builtin(global_invocation_id) global_id : vec3<u32>\n) {\n  var index = global_id.x;\n  if (index < ${V.length}u) {\n    for (var j = d_in_I.data[index]; j < d_in_I.data[index + 1u]; j = j + 1) {\n      var w = d_in_W.data[j];\n      var du = d_out_D.data[index];\n      var dv = d_out_D.data[d_in_E.data[j]];\n      var newDist = du + w;\n      if (du == ${MAX_DISTANCE}) {\n        newDist = ${MAX_DISTANCE};\n      }\n\n      if (newDist < dv) {\n        atomicMin(&d_out_Di.data[d_in_E.data[j]], newDist);\n      }\n    }\n  }\n}`,\n    },\n  });\n  const relaxPipeline = device.createComputePipeline({\n    inputLayout: null,\n    program: relaxProgram,\n  });\n\n  const updateDistanceProgram = device.createProgram({\n    compute: {\n      wgsl: `\nstruct Buffer {\n  data: array<i32>,\n};\n\n@group(0) @binding(0) var<storage, read_write> d_out_D : Buffer;\n@group(0) @binding(1) var<storage, read_write> d_out_Di : Buffer;\n\n@compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\nfn main(\n  @builtin(global_invocation_id) global_id : vec3<u32>\n) {\n  var index = global_id.x;\n  if (index < ${V.length}u) {\n    if (d_out_D.data[index] > d_out_Di.data[index]) {\n      d_out_D.data[index] = d_out_Di.data[index];\n    }\n    d_out_Di.data[index] = d_out_D.data[index];\n  }\n}\n    `,\n    },\n  });\n  const updateDistancePipeline = device.createComputePipeline({\n    inputLayout: null,\n    program: updateDistanceProgram,\n  });\n\n  const updatePredProgram = device.createProgram({\n    compute: {\n      wgsl: `\nstruct Buffer {\n  data: array<i32>,\n};\nstruct AtomicBuffer {\n  data: array<atomic<i32>>,\n};\n\n@group(0) @binding(0) var<storage, read> d_in_V : Buffer;\n@group(0) @binding(1) var<storage, read> d_in_E : Buffer;\n@group(0) @binding(2) var<storage, read> d_in_I : Buffer;\n@group(0) @binding(3) var<storage, read> d_in_W : Buffer;\n@group(0) @binding(4) var<storage, read> d_out_D : Buffer;\n@group(0) @binding(5) var<storage, read_write> d_out_P : AtomicBuffer;\n\n@compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\nfn main(\n  @builtin(global_invocation_id) global_id : vec3<u32>\n) {\n  var index = global_id.x;\n  if (index < ${V.length}u) {\n    for (var j = d_in_I.data[index]; j < d_in_I.data[index + 1u]; j = j + 1) {\n      var u = d_in_V.data[index];\n      var w = d_in_W.data[j];\n\n      var dis_u = d_out_D.data[index];\n      var dis_v = d_out_D.data[d_in_E.data[j]];\n      if (dis_v == dis_u + w) {\n        atomicMin(&d_out_P.data[d_in_E.data[j]], u);\n      }\n    }\n  }\n}    \n    `,\n    },\n  });\n  const updatePredPipeline = device.createComputePipeline({\n    inputLayout: null,\n    program: updatePredProgram,\n  });\n\n  const VBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE,\n    viewOrSize: new Int32Array(V),\n  });\n  const EBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE,\n    viewOrSize: new Int32Array(E),\n  });\n  const IBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE,\n    viewOrSize: new Int32Array(I),\n  });\n  const WBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE,\n    viewOrSize: new Int32Array(W),\n  });\n  const DOutBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n    viewOrSize: new Int32Array([\n      0,\n      ...new Array(V.length - 1).fill(MAX_DISTANCE),\n    ]),\n  });\n  const DiOutBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n    viewOrSize: new Int32Array([\n      0,\n      ...new Array(V.length - 1).fill(MAX_DISTANCE),\n    ]),\n  });\n  const POutBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n    viewOrSize: new Int32Array([\n      0,\n      ...new Array(V.length - 1).fill(MAX_DISTANCE),\n    ]),\n  });\n  const relaxBindings = device.createBindings({\n    pipeline: relaxPipeline,\n    storageBufferBindings: [\n      {\n        binding: 0,\n        buffer: EBuffer,\n      },\n      {\n        binding: 1,\n        buffer: IBuffer,\n      },\n      {\n        binding: 2,\n        buffer: WBuffer,\n      },\n      {\n        binding: 3,\n        buffer: DOutBuffer,\n      },\n      {\n        binding: 4,\n        buffer: DiOutBuffer,\n      },\n    ],\n  });\n  const updateDistanceBindings = device.createBindings({\n    pipeline: updateDistancePipeline,\n    storageBufferBindings: [\n      {\n        binding: 0,\n        buffer: DOutBuffer,\n      },\n      {\n        binding: 1,\n        buffer: DiOutBuffer,\n      },\n    ],\n  });\n  const updatePredBindings = device.createBindings({\n    pipeline: updatePredPipeline,\n    storageBufferBindings: [\n      {\n        binding: 0,\n        buffer: VBuffer,\n      },\n      {\n        binding: 1,\n        buffer: EBuffer,\n      },\n      {\n        binding: 2,\n        buffer: IBuffer,\n      },\n      {\n        binding: 3,\n        buffer: WBuffer,\n      },\n      {\n        binding: 4,\n        buffer: DOutBuffer,\n      },\n      {\n        binding: 5,\n        buffer: POutBuffer,\n      },\n    ],\n  });\n\n  const readback = device.createReadback();\n\n  for (let i = 1; i < V.length; i++) {\n    const relaxComputePass = device.createComputePass();\n    relaxComputePass.setPipeline(relaxPipeline);\n    relaxComputePass.setBindings(relaxBindings);\n    relaxComputePass.dispatchWorkgroups(1, 1);\n    device.submitPass(relaxComputePass);\n\n    const updateDistancePass = device.createComputePass();\n    updateDistancePass.setPipeline(updateDistancePipeline);\n    updateDistancePass.setBindings(updateDistanceBindings);\n    updateDistancePass.dispatchWorkgroups(1, 1);\n    device.submitPass(updateDistancePass);\n  }\n  const updatePredPass = device.createComputePass();\n  updatePredPass.setPipeline(updatePredPipeline);\n  updatePredPass.setBindings(updatePredBindings);\n  updatePredPass.dispatchWorkgroups(1, 1);\n  device.submitPass(updatePredPass);\n\n  // result\n  const out = await readback.readBuffer(DiOutBuffer);\n  const predecessor = await readback.readBuffer(POutBuffer);\n\n  return Array.from(out).map((length, i) => ({\n    to: V[i],\n    length,\n    predecessor: V[predecessor[i]],\n  }));\n};\n\nconst $text = document.createElement('div');\n$text.textContent =\n  'Please open the devtools, the shortest paths will be printed in console.';\n$wrapper.appendChild($text);\n\nconst showResult = (label, startTime, endTime, paths) => {\n  const $cpu = document.createElement('div');\n  $cpu.textContent = `${label} Time Elapsed: ${Number.parseFloat(\n    endTime - startTime,\n  ).toFixed(2)}ms`;\n  $wrapper.appendChild($cpu);\n  // print top nodes\n  console.log(paths);\n};\n",title:{zh:"Bellman-Ford 最短路径算法（1k 节点 5k 边）",en:"Bellman-Ford SSSP(1k vertices & 5k edges)"},filename:"bellman-ford-big-dataset.js",isNew:!1},{id:"pagerank",source:"import { WebGPUDeviceContribution, BufferUsage } from '@antv/g-device-api';\nimport { Algorithm } from '@antv/g6';\n\nconst $canvas = document.createElement('canvas');\n\n/**\n * Pagerank with power method, ported from CUDA\n * @see https://github.com/princeofpython/PageRank-with-CUDA/blob/main/parallel.cu\n *\n * compared with G6:\n * @see https://g6.antv.vision/zh/docs/api/Algorithm#pagerank\n */\n\n/**\n * use Compressed Sparse Row (CSR) for adjacency list\n */\n// datasource: https://github.com/sengorajkumar/gpu_graph_algorithms/blob/master/input/simple.gr_E.csv\nconst V = [0, 1, 2, 3, 4];\nconst E = [1, 2, 2, 3, 4, 3, 4, 1, 3];\nconst I = [0, 2, 5, 7, 8, 10];\nconst W = [9, 4, 10, 2, 3, 2, 11, 2, 2];\nconst From = [0, 0, 1, 1, 1, 2, 2, 3, 4];\nconst To = [1, 2, 2, 3, 4, 3, 4, 1, 3];\nconst BLOCK_SIZE = 1;\nconst BLOCKS = 5;\n\nconst $wrapper = document.getElementById('container');\nconst $text = document.createElement('div');\n$text.textContent =\n  'Please open the devtools, the top nodes will be printed in console.';\n$wrapper.appendChild($text);\n\n(async () => {\n  const deviceContributionWebGPU = new WebGPUDeviceContribution({\n    shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n  });\n\n  const swapChain = await deviceContributionWebGPU.createSwapChain($canvas);\n  const device = swapChain.getDevice();\n\n  const storeProgram = device.createProgram({\n    compute: {\n      wgsl: `\nstruct Buffer {\n  data: array<f32>,\n};\n\n@group(0) @binding(0) var<storage, read> r : Buffer;\n@group(0) @binding(1) var<storage, read_write> r_last : Buffer;\n\n@compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\nfn main(\n  @builtin(global_invocation_id) global_id : vec3<u32>\n) {\n  var index = global_id.x;\n  if (index < ${V.length}u) {\n    r_last.data[index] = r.data[index];\n  }\n}`,\n    },\n  });\n  const storePipeline = device.createComputePipeline({\n    inputLayout: null,\n    program: storeProgram,\n  });\n\n  const matmulProgram = device.createProgram({\n    compute: {\n      wgsl: `\nstruct Buffer {\n  data: array<f32>,\n};\n\n@group(0) @binding(0) var<storage, read> graph : Buffer;\n@group(0) @binding(1) var<storage, read_write> r : Buffer;\n@group(0) @binding(2) var<storage, read> r_last : Buffer;\n\n@compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\nfn main(\n  @builtin(global_invocation_id) global_id : vec3<u32>\n) {\n  var index = global_id.x;\n  if (index < ${V.length}u) {\n    var sum = 0.0;\n    for (var i = 0u; i < ${V.length}u; i = i + 1u) {\n      sum = sum + r_last.data[i] * graph.data[index * ${V.length}u + i];\n    }\n    r.data[index] = sum;\n  }\n}\n    `,\n    },\n  });\n  const matmulPipeline = device.createComputePipeline({\n    inputLayout: null,\n    program: matmulProgram,\n  });\n\n  const rankDiffProgram = device.createProgram({\n    compute: {\n      wgsl: `\nstruct Buffer {\n  data: array<f32>,\n};\n\n@group(0) @binding(0) var<storage, read> r : Buffer;\n@group(0) @binding(1) var<storage, read_write> r_last : Buffer;\n\n@compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\nfn main(\n  @builtin(global_invocation_id) global_id : vec3<u32>\n) {\n  var index = global_id.x;\n  if (index < ${V.length}u) {\n    r_last.data[index] = abs(r_last.data[index] - r.data[index]);\n  }\n}    \n    `,\n    },\n  });\n  const rankDiffPipeline = device.createComputePipeline({\n    inputLayout: null,\n    program: rankDiffProgram,\n  });\n\n  const pageRankGPU = async () => {\n    const d = 0.85;\n    const eps = 0.000001;\n    let maxIteration = 1000;\n    const n = V.length;\n    const graph = new Float32Array(new Array(n * n).fill((1 - d) / n));\n    const r = new Float32Array(new Array(n).fill(1 / n));\n\n    From.forEach((from, i) => {\n      graph[To[i] * n + from] += d * 1.0;\n    });\n\n    for (let j = 0; j < n; j++) {\n      let sum = 0.0;\n\n      for (let i = 0; i < n; ++i) {\n        sum += graph[i * n + j];\n      }\n\n      for (let i = 0; i < n; ++i) {\n        if (sum != 0.0) {\n          graph[i * n + j] /= sum;\n        } else {\n          graph[i * n + j] = 1 / n;\n        }\n      }\n    }\n\n    const rBuffer = device.createBuffer({\n      usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n      viewOrSize: new Float32Array(r),\n    });\n    const rLastBuffer = device.createBuffer({\n      usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n      viewOrSize: new Float32Array(n),\n    });\n    const graphBuffer = device.createBuffer({\n      usage: BufferUsage.STORAGE,\n      viewOrSize: new Float32Array(graph),\n    });\n\n    const storeBindings = device.createBindings({\n      pipeline: storePipeline,\n      storageBufferBindings: [\n        {\n          binding: 0,\n          buffer: rBuffer,\n        },\n        {\n          binding: 1,\n          buffer: rLastBuffer,\n        },\n      ],\n    });\n    const matmulBindings = device.createBindings({\n      pipeline: matmulPipeline,\n      storageBufferBindings: [\n        {\n          binding: 0,\n          buffer: graphBuffer,\n        },\n        {\n          binding: 1,\n          buffer: rBuffer,\n        },\n        {\n          binding: 2,\n          buffer: rLastBuffer,\n        },\n      ],\n    });\n    const rankDiffBindings = device.createBindings({\n      pipeline: rankDiffPipeline,\n      storageBufferBindings: [\n        {\n          binding: 0,\n          buffer: rBuffer,\n        },\n        {\n          binding: 1,\n          buffer: rLastBuffer,\n        },\n      ],\n    });\n\n    const readback = device.createReadback();\n\n    const startTime = window.performance.now();\n    while (maxIteration--) {\n      const storeComputePass = device.createComputePass();\n      storeComputePass.setPipeline(storePipeline);\n      storeComputePass.setBindings(storeBindings);\n      storeComputePass.dispatchWorkgroups(1, 1);\n      device.submitPass(storeComputePass);\n\n      const matmulComputePass = device.createComputePass();\n      matmulComputePass.setPipeline(matmulPipeline);\n      matmulComputePass.setBindings(matmulBindings);\n      matmulComputePass.dispatchWorkgroups(1, 1);\n      device.submitPass(matmulComputePass);\n\n      const rankDiffComputePass = device.createComputePass();\n      rankDiffComputePass.setPipeline(rankDiffPipeline);\n      rankDiffComputePass.setBindings(rankDiffBindings);\n      rankDiffComputePass.dispatchWorkgroups(1, 1);\n      device.submitPass(rankDiffComputePass);\n\n      const last = await readback.readBuffer(rLastBuffer);\n      const result = last.reduce((prev, cur) => prev + cur, 0);\n      if (result < eps) {\n        const out = await readback.readBuffer(rBuffer);\n        console.log(out);\n        break;\n      }\n    }\n\n    console.log(`GPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n  };\n\n  pageRankGPU();\n})();\n\nconst { pageRank } = Algorithm;\nconst data = {\n  nodes: [\n    {\n      id: 'A',\n      label: 'A',\n    },\n    {\n      id: 'B',\n      label: 'B',\n    },\n    {\n      id: 'C',\n      label: 'C',\n    },\n    {\n      id: 'D',\n      label: 'D',\n    },\n    {\n      id: 'E',\n      label: 'E',\n    },\n  ],\n  edges: [\n    {\n      source: 'A',\n      target: 'B',\n    },\n    {\n      source: 'A',\n      target: 'C',\n    },\n    {\n      source: 'B',\n      target: 'C',\n    },\n    {\n      source: 'B',\n      target: 'D',\n    },\n    {\n      source: 'B',\n      target: 'E',\n    },\n    {\n      source: 'C',\n      target: 'D',\n    },\n    {\n      source: 'C',\n      target: 'E',\n    },\n    {\n      source: 'D',\n      target: 'B',\n    },\n    {\n      source: 'E',\n      target: 'D',\n    },\n  ],\n};\n\nconst startTime = window.performance.now();\nconst result = pageRank(data);\nconsole.log(result);\nconsole.log(`CPU Time Elapsed: ${window.performance.now() - startTime}ms`);\n",title:{zh:"Pagerank 算法",en:"Pagerank"},filename:"pagerank.js",isNew:!1},{id:"pagerank-big-dataset",source:"import { WebGPUDeviceContribution, BufferUsage } from '@antv/g-device-api';\nimport { Algorithm } from '@antv/g6';\n\nconst $canvas = document.createElement('canvas');\n\n/**\n * Pagerank with power method, ported from CUDA\n * @see https://github.com/princeofpython/PageRank-with-CUDA/blob/main/parallel.cu\n *\n * compared with G6:\n * @see https://g6.antv.vision/zh/docs/api/Algorithm#pagerank\n *\n * dataset: 1k vertices & 50w edges\n * @see https://github.com/sengorajkumar/gpu_graph_algorithms/tree/master/input\n */\n\nconst $wrapper = document.getElementById('container');\n(async () => {\n  // load & parse TXT datasets\n  const res = await fetch(\n    'https://gw.alipayobjects.com/os/bmw-prod/b2e21724-d8b7-415d-9fea-9b41b21410b8.txt',\n  );\n  const text = await res.text();\n  let V = [];\n  const From = [];\n  const To = [];\n  text.split('\\n').forEach((line, i) => {\n    if (i === 0) {\n      const [vertices] = line.split(' ');\n      V = new Array(Number(vertices)).fill(undefined).map((_, i) => i);\n    } else {\n      const [from, to] = line.split(' ');\n      From.push(Number(from));\n      To.push(Number(to));\n    }\n  });\n\n  // use G6's `pagerank` method\n  let startTime = window.performance.now();\n  let topNodes = calculateInCPU(V, From, To);\n  showResult('CPU', startTime, window.performance.now(), topNodes);\n\n  // use Compute Shader with WebGPU\n  startTime = window.performance.now();\n  topNodes = await calculateInGPU(V, From, To);\n  showResult('GPU', startTime, window.performance.now(), topNodes);\n})();\n\n// calculate with G6's pagerank in CPU\nconst calculateInCPU = (V, From, To) => {\n  const { pageRank } = Algorithm;\n  const data = {\n    nodes: V.map((v) => ({\n      id: `${v}`,\n      label: `${v}`,\n    })),\n    edges: From.map((from, i) => ({\n      source: `${from}`,\n      target: `${To[i]}`,\n    })),\n  };\n\n  const result = pageRank(data);\n  return Object.keys(result)\n    .map((key) => ({ id: Number(key), value: result[key] }))\n    .sort((a, b) => b.value - a.value);\n};\n\n// we use 3 kernels\nconst calculateInGPU = async (V, From, To) => {\n  // The total number of workgroup invocations (4096) exceeds the maximum allowed (256).\n  const BLOCK_SIZE = 1;\n  const BLOCKS = 256;\n  const CANVAS_SIZE = 1;\n  const d = 0.85;\n  const eps = 0.000001;\n  let maxIteration = 1000;\n\n  const deviceContributionWebGPU = new WebGPUDeviceContribution({\n    shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n  });\n\n  const swapChain = await deviceContributionWebGPU.createSwapChain($canvas);\n  const device = swapChain.getDevice();\n  const n = V.length;\n  const graph = new Float32Array(new Array(n * n).fill((1 - d) / n));\n  const r = new Float32Array(new Array(n).fill(1 / n));\n\n  From.forEach((from, i) => {\n    graph[To[i] * n + from] += d * 1.0;\n  });\n\n  for (let j = 0; j < n; j++) {\n    let sum = 0.0;\n\n    for (let i = 0; i < n; ++i) {\n      sum += graph[i * n + j];\n    }\n\n    for (let i = 0; i < n; ++i) {\n      if (sum != 0.0) {\n        graph[i * n + j] /= sum;\n      } else {\n        graph[i * n + j] = 1 / n;\n      }\n    }\n  }\n\n  const storeProgram = device.createProgram({\n    compute: {\n      wgsl: `\nstruct Buffer {\n  data: array<f32>,\n};\n\n@group(0) @binding(0) var<storage, read> r : Buffer;\n@group(0) @binding(1) var<storage, read_write> r_last : Buffer;\n\n@compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\nfn main(\n  @builtin(global_invocation_id) global_id : vec3<u32>\n) {\n  var index = global_id.x;\n  if (index < ${V.length}u) {\n    r_last.data[index] = r.data[index];\n  }\n}`,\n    },\n  });\n  const storePipeline = device.createComputePipeline({\n    inputLayout: null,\n    program: storeProgram,\n  });\n\n  const matmulProgram = device.createProgram({\n    compute: {\n      wgsl: `\nstruct Buffer {\n  data: array<f32>,\n};\n\n@group(0) @binding(0) var<storage, read> graph : Buffer;\n@group(0) @binding(1) var<storage, read_write> r : Buffer;\n@group(0) @binding(2) var<storage, read> r_last : Buffer;\n\n@compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\nfn main(\n  @builtin(global_invocation_id) global_id : vec3<u32>\n) {\n  var index = global_id.x;\n  if (index < ${V.length}u) {\n    var sum = 0.0;\n    for (var i = 0u; i < ${V.length}u; i = i + 1u) {\n      sum = sum + r_last.data[i] * graph.data[index * ${V.length}u + i];\n    }\n    r.data[index] = sum;\n  }\n}\n    `,\n    },\n  });\n  const matmulPipeline = device.createComputePipeline({\n    inputLayout: null,\n    program: matmulProgram,\n  });\n\n  const rankDiffProgram = device.createProgram({\n    compute: {\n      wgsl: `\nstruct Buffer {\n  data: array<f32>,\n};\n\n@group(0) @binding(0) var<storage, read> r : Buffer;\n@group(0) @binding(1) var<storage, read_write> r_last : Buffer;\n\n@compute @workgroup_size(${BLOCKS}, ${BLOCK_SIZE})\nfn main(\n  @builtin(global_invocation_id) global_id : vec3<u32>\n) {\n  var index = global_id.x;\n  if (index < ${V.length}u) {\n    r_last.data[index] = abs(r_last.data[index] - r.data[index]);\n  }\n}    \n    `,\n    },\n  });\n  const rankDiffPipeline = device.createComputePipeline({\n    inputLayout: null,\n    program: rankDiffProgram,\n  });\n\n  const rBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n    viewOrSize: new Float32Array(r),\n  });\n  const rLastBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n    viewOrSize: new Float32Array(n),\n  });\n  const graphBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE,\n    viewOrSize: new Float32Array(graph),\n  });\n\n  const storeBindings = device.createBindings({\n    pipeline: storePipeline,\n    storageBufferBindings: [\n      {\n        binding: 0,\n        buffer: rBuffer,\n      },\n      {\n        binding: 1,\n        buffer: rLastBuffer,\n      },\n    ],\n  });\n  const matmulBindings = device.createBindings({\n    pipeline: matmulPipeline,\n    storageBufferBindings: [\n      {\n        binding: 0,\n        buffer: graphBuffer,\n      },\n      {\n        binding: 1,\n        buffer: rBuffer,\n      },\n      {\n        binding: 2,\n        buffer: rLastBuffer,\n      },\n    ],\n  });\n  const rankDiffBindings = device.createBindings({\n    pipeline: rankDiffPipeline,\n    storageBufferBindings: [\n      {\n        binding: 0,\n        buffer: rBuffer,\n      },\n      {\n        binding: 1,\n        buffer: rLastBuffer,\n      },\n    ],\n  });\n\n  const readback = device.createReadback();\n\n  const grids = Math.ceil(V.length / (BLOCKS * BLOCK_SIZE));\n\n  while (maxIteration--) {\n    const storeComputePass = device.createComputePass();\n    storeComputePass.setPipeline(storePipeline);\n    storeComputePass.setBindings(storeBindings);\n    storeComputePass.dispatchWorkgroups(1, 1);\n    device.submitPass(storeComputePass);\n\n    const matmulComputePass = device.createComputePass();\n    matmulComputePass.setPipeline(matmulPipeline);\n    matmulComputePass.setBindings(matmulBindings);\n    matmulComputePass.dispatchWorkgroups(1, 1);\n    device.submitPass(matmulComputePass);\n\n    const rankDiffComputePass = device.createComputePass();\n    rankDiffComputePass.setPipeline(rankDiffPipeline);\n    rankDiffComputePass.setBindings(rankDiffBindings);\n    rankDiffComputePass.dispatchWorkgroups(1, 1);\n    device.submitPass(rankDiffComputePass);\n\n    const last = await readback.readBuffer(rLastBuffer);\n    const result = last.reduce((prev, cur) => prev + cur, 0);\n    if (result < eps) {\n      const out = await readback.readBuffer(rBuffer);\n\n      return Array.from(out)\n        .map((value, id) => ({ id, value }))\n        .sort((a, b) => b.value - a.value);\n    }\n  }\n};\n\nconst $text = document.createElement('div');\n$text.textContent =\n  'Please open the devtools, the top nodes will be printed in console.';\n$wrapper.appendChild($text);\n\nconst showResult = (label, startTime, endTime, topNodes) => {\n  const $cpu = document.createElement('div');\n  $cpu.textContent = `${label} Time Elapsed: ${Number.parseFloat(\n    endTime - startTime,\n  ).toFixed(2)}ms`;\n  $wrapper.appendChild($cpu);\n  // print top nodes\n  console.log(topNodes);\n};\n",title:{zh:"Pagerank 算法（1k 节点 50w 边）",en:"Pagerank(1k vertices & 50w edges)"},filename:"pagerank-big-dataset.js",isNew:!1},{id:"fruchterman",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*awdETLjRlqgAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, Circle, Line } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { WebGPUDeviceContribution, BufferUsage } from '@antv/g-device-api';\n\n/**\n * ported from https://nblintao.github.io/ParaGraphL/\n * speed up ~100x(100ms vs 30s) compared with G6 @see https://g6.antv.vision/zh/examples/net/furchtermanLayout#fruchtermanWebWorker\n *\n * rewrite with WGSL(WebGPU Shader Language),\n * use Compressed Sparse Row (CSR) for adjacency list\n */\n\nconst MAX_ITERATION = 1000;\nconst CANVAS_SIZE = 600;\n\n// create a canvas\nconst $wrapper = document.getElementById('container');\nconst $text = document.createElement('div');\n$text.textContent =\n  'Please open the devtools, the shortest paths will be printed in console.';\n$wrapper.appendChild($text);\nconst $canvas = document.createElement('canvas');\n\n(async () => {\n  const deviceContributionWebGPU = new WebGPUDeviceContribution({\n    shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n  });\n\n  const swapChain = await deviceContributionWebGPU.createSwapChain($canvas);\n  const device = swapChain.getDevice();\n\n  // @see https://g6.antv.vision/en/examples/net/forceDirected/#basicForceDirected\n  const data = await (\n    await fetch(\n      'https://gw.alipayobjects.com/os/basement_prod/7bacd7d1-4119-4ac1-8be3-4c4b9bcbc25f.json',\n    )\n  ).json();\n\n  let startTime = window.performance.now();\n\n  const center = [CANVAS_SIZE / 2, CANVAS_SIZE / 2];\n  // generate position of each node\n  const nodes = data.nodes.map((n) => ({\n    x: Math.random() * CANVAS_SIZE,\n    y: Math.random() * CANVAS_SIZE,\n    id: n.id,\n  }));\n  const nodeNum = nodes.length;\n  const [edges, indices, positions] = generateCSR(nodes, data.edges);\n\n  const area = CANVAS_SIZE * CANVAS_SIZE;\n  let maxDisplace = Math.sqrt(area) / 10;\n  const k2 = area / (nodes.length + 1);\n  const k = Math.sqrt(k2);\n\n  const program = device.createProgram({\n    compute: {\n      wgsl: `\nstruct Buffer {\n  data: array<i32>,\n};\nstruct PositionBuffer {\n  data: array<vec2<f32>>,\n};\n@group(0) @binding(0) var<storage, read> edges : Buffer;\n@group(0) @binding(1) var<storage, read> indices : Buffer;\n@group(0) @binding(2) var<storage, read_write> positions : PositionBuffer;\n\nstruct Params {\n  vertexNum: f32,\n  k: f32,\n  k2: f32,\n  gravity: f32,\n  speed: f32,\n  maxDisplace: f32,\n  center: vec2<f32>,\n};\n@group(0) @binding(3) var<uniform> params : Params;\n\nfn calc_repulsive(i: u32, current_node: vec2<f32>) -> vec2<f32> {\n  var dx = 0.0;\n  var dy = 0.0;\n  for (var j = 0u; j < u32(params.vertexNum); j = j + 1u) {\n    if (i != j) {\n      var nextNode = positions.data[j];\n      var x_dist = current_node[0] - nextNode[0];\n      var y_dist = current_node[1] - nextNode[1];\n      var dist = sqrt(x_dist * x_dist + y_dist * y_dist) + 0.01;\n      if (dist > 0.0) {\n        var repulsiveF = params.k2 / dist;\n        dx = dx + x_dist / dist * repulsiveF;\n        dy = dy + y_dist / dist * repulsiveF;\n      }\n    }\n  }\n  return vec2<f32>(dx, dy);\n}\n\nfn calc_gravity(current_node: vec2<f32>) -> vec2<f32> {\n  var dx = 0.0;\n  var dy = 0.0;\n  var vx = current_node[0] - params.center[0];\n  var vy = current_node[1] - params.center[1];\n  var gf = 0.01 * params.k * params.gravity;\n  dx = gf * vx;\n  dy = gf * vy;\n\n  return vec2<f32>(dx, dy);\n}\n\nfn calc_attractive(i: u32, current_node: vec2<f32>) -> vec2<f32> {\n  var dx = 0.0;\n  var dy = 0.0;\n\n  for (var j = indices.data[i]; j < indices.data[i + 1u]; j = j + 1) {\n    var next_node = positions.data[edges.data[j]];\n    var x_dist = current_node[0] - next_node[0];\n    var y_dist = current_node[1] - next_node[1];\n    var dist = sqrt(x_dist * x_dist + y_dist * y_dist) + 0.01;\n    var attractiveF = dist * dist / params.k;\n    if (dist > 0.0) {\n      dx = dx - x_dist / dist * attractiveF;\n      dy = dy - y_dist / dist * attractiveF;\n    }\n  }\n\n  return vec2<f32>(dx, dy);\n}\n\n@compute @workgroup_size(1, 1)\nfn main(\n  @builtin(global_invocation_id) global_id : vec3<u32>,\n) {\n  var i = global_id.x;\n  if (i < u32(params.vertexNum)) {\n    var current_node = positions.data[i];\n    var dx = 0.0;\n    var dy = 0.0;\n\n    // repulsive\n    var repulsive = calc_repulsive(i, current_node);\n    dx = dx + repulsive[0];\n    dy = dy + repulsive[1];\n\n    // attractive\n    var attractive = calc_attractive(i, current_node);\n    dx = dx + attractive[0];\n    dy = dy + attractive[1];\n\n    // gravity\n    var gravity = calc_gravity(current_node);\n    dx = dx - gravity[0];\n    dy = dy - gravity[1];\n\n    // speed\n    dx = dx * params.speed;\n    dy = dy * params.speed;\n\n    // move\n    var dist_length = sqrt(dx * dx + dy * dy);\n    if (dist_length > 0.0) {\n      var limited_dist = min(params.maxDisplace * params.speed, dist_length);\n\n      positions.data[i] = vec2<f32>(\n        positions.data[i][0] + dx / dist_length * limited_dist,\n        positions.data[i][1] + dy / dist_length * limited_dist,\n      );\n    }\n  }\n}`,\n    },\n  });\n\n  const readback = device.createReadback();\n  const edgesBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE,\n    viewOrSize: new Int32Array(edges),\n  });\n  const indicesBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE,\n    viewOrSize: new Int32Array(indices),\n  });\n  const positionsBuffer = device.createBuffer({\n    usage: BufferUsage.STORAGE | BufferUsage.COPY_SRC,\n    viewOrSize: new Float32Array(positions),\n  });\n  const paramBuffer = device.createBuffer({\n    usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST | BufferUsage.COPY_SRC,\n    viewOrSize: new Float32Array([\n      nodeNum,\n      k,\n      k2,\n      10,\n      0.1,\n      maxDisplace,\n      center[0],\n      center[1],\n    ]),\n  });\n\n  const pipeline = device.createComputePipeline({\n    inputLayout: null,\n    program,\n  });\n\n  const bindings = device.createBindings({\n    pipeline,\n    storageBufferBindings: [\n      {\n        binding: 0,\n        buffer: edgesBuffer,\n      },\n      {\n        binding: 1,\n        buffer: indicesBuffer,\n      },\n      {\n        binding: 2,\n        buffer: positionsBuffer,\n      },\n    ],\n    uniformBufferBindings: [\n      {\n        binding: 3,\n        buffer: paramBuffer,\n        size: 8 * 4,\n      },\n    ],\n  });\n\n  const computePass = device.createComputePass();\n  computePass.setPipeline(pipeline);\n  computePass.setBindings(bindings);\n\n  for (let i = 0; i < MAX_ITERATION; i++) {\n    computePass.dispatchWorkgroups(nodeNum, 1);\n\n    // update uniform\n    maxDisplace *= 0.99999;\n    paramBuffer.setSubData(\n      5 * 4,\n      new Uint8Array(new Float32Array([maxDisplace]).buffer),\n    );\n  }\n\n  device.submitPass(computePass);\n\n  const result = await readback.readBuffer(positionsBuffer);\n\n  console.log(\n    `GPU Time Elapsed: ${Number.parseFloat(\n      window.performance.now() - startTime,\n    ).toFixed(2)}ms`,\n  );\n\n  renderCircles(edges, indices, result);\n})();\n\nconst generateCSR = (nodes, edges) => {\n  const resultEdges = [];\n  const indices = [];\n  const positions = [];\n  const nodeDict = [];\n  const mapIdPos = {}; // { A: 0, B: 1, C: 2 }\n  let i = 0;\n  for (i = 0; i < nodes.length; i++) {\n    const { id, x, y } = nodes[i];\n    mapIdPos[id] = i;\n    nodeDict.push([]);\n    positions.push(x, y);\n  }\n  for (i = 0; i < edges.length; i++) {\n    const e = edges[i];\n    nodeDict[mapIdPos[e.source]].push(mapIdPos[e.target]);\n    nodeDict[mapIdPos[e.target]].push(mapIdPos[e.source]);\n  }\n\n  for (i = 0; i < nodes.length; i++) {\n    const offset = resultEdges.length;\n    const dests = nodeDict[i];\n    const len = dests.length;\n    indices[i] = offset;\n    for (let j = 0; j < len; ++j) {\n      const dest = dests[j];\n      resultEdges.push(dest);\n    }\n  }\n\n  indices.push(resultEdges.length);\n\n  return [resultEdges, indices, positions];\n};\n\nfunction renderCircles(edges, indices, positions) {\n  const $canvasContainer = document.createElement('div');\n  $wrapper.appendChild($canvasContainer);\n\n  const renderer = new WebGLRenderer({ targets: ['webgl2', 'webgl1'] });\n  const canvas = new Canvas({\n    container: $canvasContainer,\n    width: CANVAS_SIZE,\n    height: CANVAS_SIZE,\n    renderer,\n  });\n\n  canvas.addEventListener(CanvasEvent.READY, () => {\n    // draw edges\n    for (let i = 0; i < indices.length - 1; i++) {\n      const x1 = positions[i * 2];\n      const y1 = positions[i * 2 + 1];\n\n      for (let j = indices[i]; j < indices[i + 1]; j++) {\n        const x2 = positions[edges[j] * 2];\n        const y2 = positions[edges[j] * 2 + 1];\n        canvas.appendChild(\n          new Line({\n            style: {\n              x1,\n              y1,\n              x2,\n              y2,\n              stroke: '#1890FF',\n              lineWidth: 1,\n            },\n          }),\n        );\n      }\n    }\n\n    // draw nodes\n    for (let i = 0; i < positions.length; i += 2) {\n      const x = positions[i];\n      const y = positions[i + 1];\n\n      canvas.appendChild(\n        new Circle({\n          style: {\n            cx: x,\n            cy: y,\n            r: 5,\n            fill: 'red',\n            stroke: 'blue',\n            lineWidth: 2,\n          },\n        }),\n      );\n    }\n  });\n}\n",title:{zh:"Fruchterman 布局算法",en:"Fruchterman Layout"},filename:"fruchterman.js",isNew:!1}],icon:"",id:"graph-analysis-algorithm",title:{en:"Graph Analysis Algorithm",zh:"图分析算法"},api:null,childrenKey:"demos",order:2}],childrenKey:"examples"},{id:"3d",title:{zh:"3D",en:"3D"},examples:[{demos:[{id:"point",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*gPLVTK2YDxAAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  PointMaterial,\n  BufferGeometry,\n  Mesh,\n  VertexStepMode,\n  Format,\n  VertexAttributeBufferIndex,\n  VertexAttributeLocation,\n  Plugin as Plugin3D,\n  PrimitiveTopology,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport Stats from 'stats.js';\nimport * as lil from 'lil-gui';\n\n/**\n * ported from @see https://threejs.org/examples/#webgl_points_sprites\n */\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n  background: 'black',\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  // create buffer geometry\n  const bufferGeometry = new BufferGeometry(device);\n  bufferGeometry.setVertexBuffer({\n    bufferIndex: VertexAttributeBufferIndex.POSITION,\n    byteStride: 4 * 3,\n    stepMode: VertexStepMode.VERTEX,\n    attributes: [\n      {\n        format: Format.F32_RGB,\n        bufferByteOffset: 4 * 0,\n        location: VertexAttributeLocation.POSITION,\n      },\n    ],\n    // use 6 vertices\n    data: Float32Array.from([\n      -100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, -100.0, 100.0, -100.0,\n      -100.0, 100.0,\n    ]),\n  });\n  // draw 4 vertices\n  bufferGeometry.vertexCount = 4;\n  // use GL_POINT instead of GL_TRIANGLES\n  bufferGeometry.drawMode = PrimitiveTopology.POINTS;\n\n  // load texture with URL\n  const map = plugin.loadTexture(\n    'https://threejs.org/examples/textures/sprites/snowflake1.png',\n  );\n  const pointMaterial = new PointMaterial(device, {\n    size: 100,\n    map,\n    depthTest: false,\n  });\n\n  const mesh = new Mesh({\n    style: {\n      fill: '#1890FF',\n      opacity: 1,\n      geometry: bufferGeometry,\n      material: pointMaterial,\n    },\n  });\n  mesh.setPosition(300, 250, 0);\n  canvas.appendChild(mesh);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const pointFolder = gui.addFolder('point');\n  const pointConfig = {\n    size: 100,\n    vertexNum: 4,\n  };\n  pointFolder.add(pointConfig, 'size', 1, 100, 1).onChange((size) => {\n    pointMaterial.size = size;\n  });\n  pointFolder.add(pointConfig, 'vertexNum', 0, 4, 1).onChange((vertexNum) => {\n    bufferGeometry.vertexCount = vertexNum;\n  });\n  pointFolder.open();\n})();\n",title:{zh:"点",en:"Point"},filename:"point.js",isNew:!1},{id:"plane",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*MdWeQJCW_hoAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshBasicMaterial,\n  PlaneGeometry,\n  Mesh,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  const planeGeometry = new PlaneGeometry(device, {\n    width: 200,\n    depth: 200,\n    widthSegments: 1,\n    depthSegments: 1,\n  });\n  const basicMaterial = new MeshBasicMaterial(device, {\n    wireframe: true,\n  });\n\n  const plane = new Mesh({\n    style: {\n      fill: '#1890FF',\n      opacity: 1,\n      geometry: planeGeometry,\n      material: basicMaterial,\n    },\n  });\n\n  plane.setPosition(300, 250, 0);\n  canvas.appendChild(plane);\n\n  const plane2 = new Mesh({\n    style: {\n      fill: '#1890FF',\n      opacity: 1,\n      width: 400,\n      depth: 400,\n      geometry: planeGeometry,\n      material: basicMaterial,\n    },\n  });\n  plane2.setPosition(300, 450, 0);\n  canvas.appendChild(plane2);\n\n  canvas.getCamera().setPosition(300, 0, 500);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n    // plane.rotate(0, 1, 0);\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const planeFolder = gui.addFolder('plane');\n  const planeConfig = {\n    opacity: 1,\n    fill: '#1890FF',\n  };\n  planeFolder.add(planeConfig, 'opacity', 0, 1, 0.1).onChange((opacity) => {\n    plane.style.opacity = opacity;\n  });\n  planeFolder.addColor(planeConfig, 'fill').onChange((color) => {\n    plane.style.fill = color;\n  });\n  planeFolder.open();\n\n  const geometryFolder = gui.addFolder('geometry');\n  const geometryConfig = {\n    width: 200,\n    depth: 200,\n    widthSegments: 5,\n    depthSegments: 5,\n  };\n  geometryFolder.add(geometryConfig, 'width', 50, 300).onChange((width) => {\n    planeGeometry.width = width;\n  });\n  geometryFolder.add(geometryConfig, 'depth', 50, 300).onChange((depth) => {\n    planeGeometry.depth = depth;\n  });\n  geometryFolder\n    .add(geometryConfig, 'widthSegments', 1, 10, 1)\n    .onChange((widthSegments) => {\n      planeGeometry.widthSegments = widthSegments;\n    });\n  geometryFolder\n    .add(geometryConfig, 'depthSegments', 1, 10, 1)\n    .onChange((depthSegments) => {\n      planeGeometry.depthSegments = depthSegments;\n    });\n  geometryFolder.open();\n})();\n",title:{zh:"平面",en:"Plane"},filename:"plane.js",isNew:!1},{id:"cube",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*xZcvSrlYoE8AAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshBasicMaterial,\n  CubeGeometry,\n  Mesh,\n  Format,\n  TextureDimension,\n  TextureUsage,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  // 1. load texture with URL\n  const map = plugin.loadTexture(\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*_aqoS73Se3sAAAAAAAAAAAAAARQnAQ',\n  );\n\n  // 2. or create texture from scratch\n  // const map = device.createTexture({\n  //   pixelFormat: Format.U8_RGBA_NORM,\n  //   width: 1,\n  //   height: 1,\n  //   depth: 1,\n  //   numLevels: 1,\n  //   dimension: TextureDimension.TEXTURE_2D,\n  //   usage: TextureUsage.SAMPLED,\n  // });\n  // // load image\n  // const image = new window.Image();\n  // image.onload = () => {\n  //   map.setImageData(image);\n  //   canvas.getRenderingService().dirtify();\n  // };\n  // image.onerror = () => {};\n  // image.crossOrigin = 'Anonymous';\n  // image.src =\n  //   'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*_aqoS73Se3sAAAAAAAAAAAAAARQnAQ';\n\n  const cubeGeometry = new CubeGeometry(device, {\n    width: 200,\n    height: 200,\n    depth: 200,\n  });\n  const basicMaterial = new MeshBasicMaterial(device, {\n    // wireframe: true,\n    map,\n  });\n\n  const cube = new Mesh({\n    style: {\n      fill: '#1890FF',\n      opacity: 1,\n      geometry: cubeGeometry,\n      material: basicMaterial,\n    },\n  });\n\n  cube.setPosition(300, 250, 0);\n\n  canvas.appendChild(cube);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n    // cube.rotate(0, 1, 0);\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const cubeFolder = gui.addFolder('cube');\n  const cubeConfig = {\n    opacity: 1,\n    fill: '#1890FF',\n  };\n  cubeFolder.add(cubeConfig, 'opacity', 0, 1, 0.1).onChange((opacity) => {\n    cube.style.opacity = opacity;\n  });\n  cubeFolder.addColor(cubeConfig, 'fill').onChange((color) => {\n    cube.style.fill = color;\n  });\n  cubeFolder.open();\n\n  const geometryFolder = gui.addFolder('geometry');\n  const geometryConfig = {\n    width: 200,\n    height: 200,\n    depth: 200,\n    widthSegments: 1,\n    heightSegments: 1,\n    depthSegments: 1,\n  };\n  geometryFolder.add(geometryConfig, 'width', 50, 300).onChange((width) => {\n    cubeGeometry.width = width;\n  });\n  geometryFolder.add(geometryConfig, 'height', 50, 300).onChange((height) => {\n    cubeGeometry.height = height;\n  });\n  geometryFolder.add(geometryConfig, 'depth', 50, 300).onChange((depth) => {\n    cubeGeometry.depth = depth;\n  });\n  geometryFolder\n    .add(geometryConfig, 'widthSegments', 1, 10, 1)\n    .onChange((widthSegments) => {\n      cubeGeometry.widthSegments = widthSegments;\n    });\n  geometryFolder\n    .add(geometryConfig, 'heightSegments', 1, 10, 1)\n    .onChange((heightSegments) => {\n      cubeGeometry.heightSegments = heightSegments;\n    });\n  geometryFolder\n    .add(geometryConfig, 'depthSegments', 1, 10, 1)\n    .onChange((depthSegments) => {\n      cubeGeometry.depthSegments = depthSegments;\n    });\n  geometryFolder.open();\n\n  const materialFolder = gui.addFolder('material');\n  const materialConfig = {\n    wireframe: false,\n    map: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*_aqoS73Se3sAAAAAAAAAAAAAARQnAQ',\n  };\n  materialFolder.add(materialConfig, 'wireframe').onChange((wireframe) => {\n    cube.style.material.wireframe = !!wireframe;\n  });\n  materialFolder\n    .add(materialConfig, 'map', [\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*_aqoS73Se3sAAAAAAAAAAAAAARQnAQ',\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8TlCRIsKeUkAAAAAAAAAAAAAARQnAQ',\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n      'none',\n    ])\n    .onChange((mapURL) => {\n      if (mapURL === 'none') {\n        cube.style.material.map = null;\n      } else {\n        cube.style.material.map = plugin.loadTexture(mapURL);\n      }\n    });\n  materialFolder.open();\n})();\n",title:{zh:"立方体",en:"Cube"},filename:"cube.js",isNew:!1},{id:"sphere",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*zjiQSol4PdcAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshPhongMaterial,\n  SphereGeometry,\n  AmbientLight,\n  DirectionalLight,\n  Mesh,\n  Fog,\n  FogType,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n  background: 'black',\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  const map = plugin.loadTexture(\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*npAsSLPX4A4AAAAAAAAAAAAAARQnAQ',\n  );\n  const specularMap = plugin.loadTexture(\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8wz0QaP_bjoAAAAAAAAAAAAAARQnAQ',\n  );\n  const bumpMap = plugin.loadTexture(\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*kuUITY47ZhMAAAAAAAAAAAAAARQnAQ',\n  );\n  const cloudMap = plugin.loadTexture(\n    'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N2ooTq4cQroAAAAAAAAAAAAAARQnAQ',\n  );\n\n  // create a sphere geometry\n  const sphereGeometry = new SphereGeometry(device, {\n    radius: 200,\n    latitudeBands: 32,\n    longitudeBands: 32,\n  });\n  // create a material with Phong lighting model\n  const basicMaterial = new MeshPhongMaterial(device, {\n    map,\n    specular: 'white',\n    specularMap,\n    bumpMap,\n    bumpScale: 5,\n    shininess: 10,\n  });\n  const cloudMaterial = new MeshPhongMaterial(device, {\n    map: cloudMap,\n    doubleSide: true,\n    depthWrite: false,\n  });\n\n  // create a mesh\n  const sphere = new Mesh({\n    style: {\n      fill: '#1890FF',\n      opacity: 1,\n      geometry: sphereGeometry,\n      material: basicMaterial,\n    },\n  });\n  sphere.setPosition(300, 250, 0);\n  canvas.appendChild(sphere);\n\n  // const cloudMesh = new Mesh({\n  //   style: {\n  //     opacity: 0.2,\n  //     geometry: sphereGeometry,\n  //     material: cloudMaterial,\n  //   },\n  // });\n  // sphere.appendChild(cloudMesh);\n\n  // add a directional light into scene\n  const light = new DirectionalLight({\n    style: {\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n\n  const ambientLight = new AmbientLight({\n    style: {\n      fill: '#000',\n    },\n  });\n  canvas.appendChild(ambientLight);\n\n  // create fog, append to canvas later\n  const fog = new Fog();\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n    sphere.setOrigin(0, 0, 0);\n    sphere.rotate(0, 0.2, 0);\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const ambientFolder = gui.addFolder('ambient light');\n  const ambientLightConfig = {\n    fill: '#000',\n  };\n  ambientFolder.addColor(ambientLightConfig, 'fill').onChange((fill) => {\n    ambientLight.style.fill = fill;\n  });\n\n  const lightFolder = gui.addFolder('directional light');\n  const lightConfig = {\n    fill: '#FFF',\n    intensity: Math.PI,\n    directionX: -1,\n    directionY: 0,\n    directionZ: 1,\n  };\n  lightFolder.addColor(lightConfig, 'fill').onChange((fill) => {\n    light.style.fill = fill;\n  });\n  lightFolder.add(lightConfig, 'intensity', 0, 20).onChange((intensity) => {\n    light.style.intensity = intensity;\n  });\n  lightFolder.add(lightConfig, 'directionX', -1, 1).onChange((directionX) => {\n    const direction = light.style.direction;\n    light.style.direction = [directionX, direction[1], direction[2]];\n  });\n  lightFolder.add(lightConfig, 'directionY', -1, 1).onChange((directionY) => {\n    const direction = light.style.direction;\n    light.style.direction = [direction[0], directionY, direction[2]];\n  });\n  lightFolder.add(lightConfig, 'directionZ', -1, 1).onChange((directionZ) => {\n    const direction = light.style.direction;\n    light.style.direction = [direction[0], direction[1], directionZ];\n  });\n  lightFolder.open();\n\n  const fogFolder = gui.addFolder('fog');\n  const fogConfig = {\n    enable: false,\n    type: FogType.NONE,\n    fill: '#000',\n    start: 1,\n    end: 1000,\n    density: 0,\n  };\n  fogFolder.add(fogConfig, 'enable').onChange((enable) => {\n    if (enable) {\n      canvas.appendChild(fog);\n    } else {\n      canvas.removeChild(fog);\n    }\n  });\n  fogFolder\n    .add(fogConfig, 'type', [\n      FogType.NONE,\n      FogType.EXP,\n      FogType.EXP2,\n      FogType.LINEAR,\n    ])\n    .onChange((type) => {\n      fog.style.type = type;\n    });\n  fogFolder.addColor(fogConfig, 'fill').onChange((fill) => {\n    fog.style.fill = fill;\n  });\n  fogFolder.add(fogConfig, 'start', 0, 1000).onChange((start) => {\n    fog.style.start = start;\n  });\n  fogFolder.add(fogConfig, 'end', 0, 1000).onChange((end) => {\n    fog.style.end = end;\n  });\n  fogFolder.add(fogConfig, 'density', 0, 5).onChange((density) => {\n    fog.style.density = density;\n  });\n  fogFolder.open();\n\n  const sphereFolder = gui.addFolder('sphere');\n  const sphereConfig = {\n    opacity: 1,\n    fill: '#1890FF',\n  };\n  sphereFolder.add(sphereConfig, 'opacity', 0, 1, 0.1).onChange((opacity) => {\n    sphere.style.opacity = opacity;\n  });\n  sphereFolder.addColor(sphereConfig, 'fill').onChange((color) => {\n    sphere.style.fill = color;\n  });\n  sphereFolder.open();\n\n  const geometryFolder = gui.addFolder('geometry');\n  const geometryConfig = {\n    radius: 200,\n    latitudeBands: 32,\n    longitudeBands: 32,\n  };\n  geometryFolder.add(geometryConfig, 'radius', 50, 300).onChange((radius) => {\n    sphereGeometry.radius = radius;\n  });\n  geometryFolder\n    .add(geometryConfig, 'latitudeBands', 8, 64, 1)\n    .onChange((latitudeBands) => {\n      sphereGeometry.latitudeBands = latitudeBands;\n    });\n  geometryFolder\n    .add(geometryConfig, 'longitudeBands', 8, 64, 1)\n    .onChange((longitudeBands) => {\n      sphereGeometry.longitudeBands = longitudeBands;\n    });\n  geometryFolder.open();\n\n  const materialFolder = gui.addFolder('material');\n  const materialConfig = {\n    map: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*npAsSLPX4A4AAAAAAAAAAAAAARQnAQ',\n    emissive: '#000000',\n    specular: '#FFFFFF',\n    specularMap:\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8wz0QaP_bjoAAAAAAAAAAAAAARQnAQ',\n    shininess: 10,\n    bumpMap:\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*kuUITY47ZhMAAAAAAAAAAAAAARQnAQ',\n    bumpScale: 5,\n    wireframe: false,\n  };\n  materialFolder\n    .add(materialConfig, 'map', [\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*npAsSLPX4A4AAAAAAAAAAAAAARQnAQ',\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n      'none',\n    ])\n    .onChange((mapURL) => {\n      if (mapURL === 'none') {\n        sphere.style.material.map = null;\n      } else {\n        const map = plugin.loadTexture(mapURL);\n        sphere.style.material.map = map;\n      }\n    });\n  materialFolder.addColor(materialConfig, 'emissive').onChange((emissive) => {\n    sphere.style.material.emissive = emissive;\n  });\n  materialFolder.addColor(materialConfig, 'specular').onChange((specular) => {\n    sphere.style.material.specular = specular;\n  });\n  materialFolder\n    .add(materialConfig, 'specularMap', [\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8wz0QaP_bjoAAAAAAAAAAAAAARQnAQ',\n      'none',\n    ])\n    .onChange((specularMapURL) => {\n      if (specularMapURL === 'none') {\n        sphere.style.material.specularMap = null;\n      } else {\n        const specularMap = plugin.loadTexture(specularMapURL);\n        sphere.style.material.specularMap = specularMap;\n      }\n    });\n  materialFolder\n    .add(materialConfig, 'shininess', 0, 100)\n    .onChange((shininess) => {\n      sphere.style.material.shininess = shininess;\n    });\n  materialFolder\n    .add(materialConfig, 'bumpMap', [\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*kuUITY47ZhMAAAAAAAAAAAAAARQnAQ',\n      'none',\n    ])\n    .onChange((bumpMapURL) => {\n      if (bumpMapURL === 'none') {\n        sphere.style.material.bumpMap = null;\n      } else {\n        const bumpMap = plugin.loadTexture(bumpMapURL);\n        sphere.style.material.bumpMap = bumpMap;\n      }\n    });\n  materialFolder\n    .add(materialConfig, 'bumpScale', 0, 10)\n    .onChange((bumpScale) => {\n      sphere.style.material.bumpScale = bumpScale;\n    });\n  materialFolder.add(materialConfig, 'wireframe').onChange((enable) => {\n    sphere.style.material.wireframe = !!enable;\n  });\n  materialFolder.open();\n})();\n",title:{zh:"球",en:"Sphere"},filename:"sphere.js",isNew:!1},{id:"torus",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*C5ZXT7TaG9cAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshPhongMaterial,\n  TorusGeometry,\n  DirectionalLight,\n  Mesh,\n  FogType,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  const torusGeometry = new TorusGeometry(device, {\n    tubeRadius: 30,\n    ringRadius: 200,\n  });\n  const basicMaterial = new MeshPhongMaterial(device);\n\n  const torus = new Mesh({\n    style: {\n      fill: 'white',\n      opacity: 1,\n      geometry: torusGeometry,\n      material: basicMaterial,\n    },\n  });\n  torus.setPosition(300, 250);\n  canvas.appendChild(torus);\n\n  // add a directional light into scene\n  const light = new DirectionalLight({\n    style: {\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n\n  const camera = canvas.getCamera();\n  camera.setPosition(300, 0, 500);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n    torus.setOrigin(0, 0, 0);\n    torus.rotate(0, 0.2, 0);\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const torusFolder = gui.addFolder('torus');\n  const torusConfig = {\n    opacity: 1,\n    fill: '#fff',\n  };\n  torusFolder.add(torusConfig, 'opacity', 0, 1, 0.1).onChange((opacity) => {\n    torus.style.opacity = opacity;\n  });\n  torusFolder.addColor(torusConfig, 'fill').onChange((color) => {\n    torus.style.fill = color;\n  });\n  torusFolder.open();\n\n  const geometryFolder = gui.addFolder('geometry');\n  const geometryConfig = {\n    tubeRadius: 30,\n    ringRadius: 200,\n    segments: 30,\n    sides: 20,\n  };\n  geometryFolder\n    .add(geometryConfig, 'tubeRadius', 10, 300)\n    .onChange((tubeRadius) => {\n      torusGeometry.tubeRadius = tubeRadius;\n    });\n  geometryFolder\n    .add(geometryConfig, 'ringRadius', 10, 300)\n    .onChange((ringRadius) => {\n      torusGeometry.ringRadius = ringRadius;\n    });\n  geometryFolder\n    .add(geometryConfig, 'segments', 2, 30, 1)\n    .onChange((segments) => {\n      torusGeometry.segments = segments;\n    });\n  geometryFolder.add(geometryConfig, 'sides', 2, 30, 1).onChange((sides) => {\n    torusGeometry.sides = sides;\n  });\n  geometryFolder.open();\n\n  const materialFolder = gui.addFolder('material');\n  const materialConfig = {\n    wireframe: false,\n    map: 'none',\n    fogType: FogType.NONE,\n    fogColor: '#000000',\n    fogDensity: 0.5,\n    fogStart: 1,\n    fogEnd: 1000,\n  };\n  materialFolder.add(materialConfig, 'wireframe').onChange((enable) => {\n    torus.style.material.wireframe = !!enable;\n  });\n  materialFolder\n    .add(materialConfig, 'map', [\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*npAsSLPX4A4AAAAAAAAAAAAAARQnAQ',\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n      'none',\n    ])\n    .onChange((mapURL) => {\n      if (mapURL === 'none') {\n        torus.style.material.map = null;\n      } else {\n        const map = plugin.loadTexture(mapURL);\n        torus.style.material.map = map;\n      }\n    });\n  const fogTypes = [FogType.NONE, FogType.EXP, FogType.EXP2, FogType.LINEAR];\n  materialFolder\n    .add(materialConfig, 'fogType', fogTypes)\n    .onChange((fogType) => {\n      // FogType.NONE\n      torus.style.material.fogType = fogType;\n    });\n  materialFolder.addColor(materialConfig, 'fogColor').onChange((fogColor) => {\n    torus.style.material.fogColor = fogColor;\n  });\n  materialFolder\n    .add(materialConfig, 'fogDensity', 0, 10)\n    .onChange((fogDensity) => {\n      torus.style.material.fogDensity = fogDensity;\n    });\n  materialFolder\n    .add(materialConfig, 'fogStart', 0, 1000)\n    .onChange((fogStart) => {\n      torus.style.material.fogStart = fogStart;\n    });\n  materialFolder.add(materialConfig, 'fogEnd', 0, 1000).onChange((fogEnd) => {\n    torus.style.material.fogEnd = fogEnd;\n  });\n  materialFolder.open();\n})();\n",title:{zh:"圆环",en:"Torus"},filename:"torus.js",isNew:!1},{id:"cylinder",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Vx-bSZTGKrIAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshPhongMaterial,\n  CylinderGeometry,\n  DirectionalLight,\n  Mesh,\n  FogType,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  const cylinderGeometry = new CylinderGeometry(device, {\n    radius: 100,\n    height: 200,\n  });\n  const basicMaterial = new MeshPhongMaterial(device);\n\n  const cylinder = new Mesh({\n    style: {\n      fill: 'white',\n      opacity: 1,\n      geometry: cylinderGeometry,\n      material: basicMaterial,\n    },\n  });\n  cylinder.setPosition(300, 250);\n  canvas.appendChild(cylinder);\n\n  // add a directional light into scene\n  const light = new DirectionalLight({\n    style: {\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n\n  const camera = canvas.getCamera();\n  camera.setPosition(300, 0, 500);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n    cylinder.setOrigin(0, 0, 0);\n    cylinder.rotate(0, 0.2, 0);\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const cylinderFolder = gui.addFolder('cylinder');\n  const cylinderConfig = {\n    opacity: 1,\n    fill: '#fff',\n  };\n  cylinderFolder\n    .add(cylinderConfig, 'opacity', 0, 1, 0.1)\n    .onChange((opacity) => {\n      cylinder.style.opacity = opacity;\n    });\n  cylinderFolder.addColor(cylinderConfig, 'fill').onChange((color) => {\n    cylinder.style.fill = color;\n  });\n  cylinderFolder.open();\n\n  const geometryFolder = gui.addFolder('geometry');\n  const geometryConfig = {\n    radius: 100,\n    height: 200,\n    heightSegments: 5,\n    capSegments: 20,\n  };\n  geometryFolder.add(geometryConfig, 'radius', 10, 300).onChange((radius) => {\n    cylinderGeometry.radius = radius;\n  });\n  geometryFolder.add(geometryConfig, 'height', 10, 300).onChange((height) => {\n    cylinderGeometry.height = height;\n  });\n  geometryFolder\n    .add(geometryConfig, 'heightSegments', 2, 30, 1)\n    .onChange((heightSegments) => {\n      cylinderGeometry.heightSegments = heightSegments;\n    });\n  geometryFolder\n    .add(geometryConfig, 'capSegments', 2, 30, 1)\n    .onChange((capSegments) => {\n      cylinderGeometry.capSegments = capSegments;\n    });\n  geometryFolder.open();\n\n  const materialFolder = gui.addFolder('material');\n  const materialConfig = {\n    wireframe: false,\n    map: 'none',\n    fogType: FogType.NONE,\n    fogColor: '#000000',\n    fogDensity: 0.5,\n    fogStart: 1,\n    fogEnd: 1000,\n  };\n  materialFolder.add(materialConfig, 'wireframe').onChange((enable) => {\n    cylinder.style.material.wireframe = !!enable;\n  });\n  materialFolder\n    .add(materialConfig, 'map', [\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*npAsSLPX4A4AAAAAAAAAAAAAARQnAQ',\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n      'none',\n    ])\n    .onChange((mapURL) => {\n      if (mapURL === 'none') {\n        cylinder.style.material.map = null;\n      } else {\n        const map = plugin.loadTexture(mapURL);\n        cylinder.style.material.map = map;\n      }\n    });\n  const fogTypes = [FogType.NONE, FogType.EXP, FogType.EXP2, FogType.LINEAR];\n  materialFolder\n    .add(materialConfig, 'fogType', fogTypes)\n    .onChange((fogType) => {\n      // FogType.NONE\n      cylinder.style.material.fogType = fogType;\n    });\n  materialFolder.addColor(materialConfig, 'fogColor').onChange((fogColor) => {\n    cylinder.style.material.fogColor = fogColor;\n  });\n  materialFolder\n    .add(materialConfig, 'fogDensity', 0, 10)\n    .onChange((fogDensity) => {\n      cylinder.style.material.fogDensity = fogDensity;\n    });\n  materialFolder\n    .add(materialConfig, 'fogStart', 0, 1000)\n    .onChange((fogStart) => {\n      cylinder.style.material.fogStart = fogStart;\n    });\n  materialFolder.add(materialConfig, 'fogEnd', 0, 1000).onChange((fogEnd) => {\n    cylinder.style.material.fogEnd = fogEnd;\n  });\n  materialFolder.open();\n})();\n",title:{zh:"圆柱",en:"Cylinder"},filename:"cylinder.js",isNew:!1},{id:"cone",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4v4GQrGXA_UAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshPhongMaterial,\n  ConeGeometry,\n  DirectionalLight,\n  Mesh,\n  FogType,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  const coneGeometry = new ConeGeometry(device, {\n    baseRadius: 100,\n    height: 200,\n  });\n  const basicMaterial = new MeshPhongMaterial(device);\n\n  const cone = new Mesh({\n    style: {\n      fill: 'white',\n      opacity: 1,\n      geometry: coneGeometry,\n      material: basicMaterial,\n    },\n  });\n  cone.setPosition(300, 250);\n  canvas.appendChild(cone);\n\n  // add a directional light into scene\n  const light = new DirectionalLight({\n    style: {\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n\n  const camera = canvas.getCamera();\n  camera.setPosition(300, 0, 500);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n    cone.setOrigin(0, 0, 0);\n    cone.rotate(0, 0.2, 0);\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const coneFolder = gui.addFolder('cone');\n  const coneConfig = {\n    opacity: 1,\n    fill: '#fff',\n  };\n  coneFolder.add(coneConfig, 'opacity', 0, 1, 0.1).onChange((opacity) => {\n    cone.style.opacity = opacity;\n  });\n  coneFolder.addColor(coneConfig, 'fill').onChange((color) => {\n    cone.style.fill = color;\n  });\n  coneFolder.open();\n\n  const geometryFolder = gui.addFolder('geometry');\n  const geometryConfig = {\n    baseRadius: 100,\n    peakRadius: 0,\n    height: 200,\n    heightSegments: 5,\n    capSegments: 20,\n  };\n  geometryFolder\n    .add(geometryConfig, 'baseRadius', 10, 300)\n    .onChange((baseRadius) => {\n      coneGeometry.baseRadius = baseRadius;\n    });\n  geometryFolder\n    .add(geometryConfig, 'peakRadius', 0, 100)\n    .onChange((peakRadius) => {\n      coneGeometry.peakRadius = peakRadius;\n    });\n  geometryFolder.add(geometryConfig, 'height', 10, 300).onChange((height) => {\n    coneGeometry.height = height;\n  });\n  geometryFolder\n    .add(geometryConfig, 'heightSegments', 2, 30, 1)\n    .onChange((heightSegments) => {\n      coneGeometry.heightSegments = heightSegments;\n    });\n  geometryFolder\n    .add(geometryConfig, 'capSegments', 2, 30, 1)\n    .onChange((capSegments) => {\n      coneGeometry.capSegments = capSegments;\n    });\n  geometryFolder.open();\n\n  const materialFolder = gui.addFolder('material');\n  const materialConfig = {\n    wireframe: false,\n    map: 'none',\n    fogType: FogType.NONE,\n    fogColor: '#000000',\n    fogDensity: 0.5,\n    fogStart: 1,\n    fogEnd: 1000,\n  };\n  materialFolder.add(materialConfig, 'wireframe').onChange((enable) => {\n    cone.style.material.wireframe = !!enable;\n  });\n  materialFolder\n    .add(materialConfig, 'map', [\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*npAsSLPX4A4AAAAAAAAAAAAAARQnAQ',\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n      'none',\n    ])\n    .onChange((mapURL) => {\n      if (mapURL === 'none') {\n        cone.style.material.map = null;\n      } else {\n        const map = plugin.loadTexture(mapURL);\n        cone.style.material.map = map;\n      }\n    });\n  const fogTypes = [FogType.NONE, FogType.EXP, FogType.EXP2, FogType.LINEAR];\n  materialFolder\n    .add(materialConfig, 'fogType', fogTypes)\n    .onChange((fogType) => {\n      // FogType.NONE\n      cone.style.material.fogType = fogType;\n    });\n  materialFolder.addColor(materialConfig, 'fogColor').onChange((fogColor) => {\n    cone.style.material.fogColor = fogColor;\n  });\n  materialFolder\n    .add(materialConfig, 'fogDensity', 0, 10)\n    .onChange((fogDensity) => {\n      cone.style.material.fogDensity = fogDensity;\n    });\n  materialFolder\n    .add(materialConfig, 'fogStart', 0, 1000)\n    .onChange((fogStart) => {\n      cone.style.material.fogStart = fogStart;\n    });\n  materialFolder.add(materialConfig, 'fogEnd', 0, 1000).onChange((fogEnd) => {\n    cone.style.material.fogEnd = fogEnd;\n  });\n  materialFolder.open();\n})();\n",title:{zh:"圆锥",en:"Cone"},filename:"cone.js",isNew:!1},{id:"capsule",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*5czISLOqEeUAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshPhongMaterial,\n  CapsuleGeometry,\n  DirectionalLight,\n  Mesh,\n  FogType,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  const capsuleGeometry = new CapsuleGeometry(device, {\n    radius: 50,\n    height: 200,\n  });\n  const basicMaterial = new MeshPhongMaterial(device);\n\n  const capsule = new Mesh({\n    style: {\n      fill: 'white',\n      opacity: 1,\n      geometry: capsuleGeometry,\n      material: basicMaterial,\n    },\n  });\n  capsule.setPosition(300, 250);\n  canvas.appendChild(capsule);\n\n  // add a directional light into scene\n  const light = new DirectionalLight({\n    style: {\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n\n  const camera = canvas.getCamera();\n  camera.setPosition(300, 0, 500);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n    capsule.setOrigin(0, 0, 0);\n    capsule.rotate(0, 0.2, 0);\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const capsuleFolder = gui.addFolder('capsule');\n  const capsuleConfig = {\n    opacity: 1,\n    fill: '#fff',\n  };\n  capsuleFolder.add(capsuleConfig, 'opacity', 0, 1, 0.1).onChange((opacity) => {\n    capsule.style.opacity = opacity;\n  });\n  capsuleFolder.addColor(capsuleConfig, 'fill').onChange((color) => {\n    capsule.style.fill = color;\n  });\n  capsuleFolder.open();\n\n  const geometryFolder = gui.addFolder('geometry');\n  const geometryConfig = {\n    radius: 100,\n    height: 200,\n    heightSegments: 5,\n    capSegments: 20,\n  };\n  geometryFolder.add(geometryConfig, 'radius', 10, 300).onChange((radius) => {\n    capsuleGeometry.radius = radius;\n  });\n  geometryFolder.add(geometryConfig, 'height', 10, 300).onChange((height) => {\n    capsuleGeometry.height = height;\n  });\n  geometryFolder\n    .add(geometryConfig, 'heightSegments', 2, 30, 1)\n    .onChange((heightSegments) => {\n      capsuleGeometry.heightSegments = heightSegments;\n    });\n  geometryFolder\n    .add(geometryConfig, 'capSegments', 2, 30, 1)\n    .onChange((capSegments) => {\n      capsuleGeometry.capSegments = capSegments;\n    });\n  geometryFolder.open();\n\n  const materialFolder = gui.addFolder('material');\n  const materialConfig = {\n    wireframe: false,\n    map: 'none',\n    fogType: FogType.NONE,\n    fogColor: '#000000',\n    fogDensity: 0.5,\n    fogStart: 1,\n    fogEnd: 1000,\n  };\n  materialFolder.add(materialConfig, 'wireframe').onChange((enable) => {\n    capsule.style.material.wireframe = !!enable;\n  });\n  materialFolder\n    .add(materialConfig, 'map', [\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*npAsSLPX4A4AAAAAAAAAAAAAARQnAQ',\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n      'none',\n    ])\n    .onChange((mapURL) => {\n      if (mapURL === 'none') {\n        capsule.style.material.map = null;\n      } else {\n        const map = plugin.loadTexture(mapURL);\n        capsule.style.material.map = map;\n      }\n    });\n  const fogTypes = [FogType.NONE, FogType.EXP, FogType.EXP2, FogType.LINEAR];\n  materialFolder\n    .add(materialConfig, 'fogType', fogTypes)\n    .onChange((fogType) => {\n      // FogType.NONE\n      capsule.style.material.fogType = fogType;\n    });\n  materialFolder.addColor(materialConfig, 'fogColor').onChange((fogColor) => {\n    capsule.style.material.fogColor = fogColor;\n  });\n  materialFolder\n    .add(materialConfig, 'fogDensity', 0, 10)\n    .onChange((fogDensity) => {\n      capsule.style.material.fogDensity = fogDensity;\n    });\n  materialFolder\n    .add(materialConfig, 'fogStart', 0, 1000)\n    .onChange((fogStart) => {\n      capsule.style.material.fogStart = fogStart;\n    });\n  materialFolder.add(materialConfig, 'fogEnd', 0, 1000).onChange((fogEnd) => {\n    capsule.style.material.fogEnd = fogEnd;\n  });\n  materialFolder.open();\n})();\n",title:{zh:"胶囊",en:"Capsule"},filename:"capsule.js",isNew:!1},{id:"buffer-geometry",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshBasicMaterial,\n  BufferGeometry,\n  Mesh,\n  VertexStepMode,\n  Format,\n  VertexAttributeBufferIndex,\n  VertexAttributeLocation,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  // create buffer geometry\n  const bufferGeometry = new BufferGeometry(device);\n  bufferGeometry.setVertexBuffer({\n    bufferIndex: VertexAttributeBufferIndex.POSITION,\n    byteStride: 4 * 3,\n    stepMode: VertexStepMode.VERTEX,\n    attributes: [\n      {\n        format: Format.F32_RGB,\n        bufferByteOffset: 4 * 0,\n        location: VertexAttributeLocation.POSITION,\n      },\n    ],\n    // use 6 vertices\n    data: Float32Array.from([\n      -100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, -100.0, 100.0, 100.0,\n      -100.0, 100.0, -100.0, -100.0, 100.0, -100.0, 100.0, 100.0,\n    ]),\n  });\n  // draw 6 vertices\n  bufferGeometry.vertexCount = 6;\n  // start from...\n  // bufferGeometry.primitiveStart = 0;\n\n  const basicMaterial = new MeshBasicMaterial(device);\n\n  const mesh = new Mesh({\n    style: {\n      fill: '#1890FF',\n      opacity: 1,\n      geometry: bufferGeometry,\n      material: basicMaterial,\n    },\n  });\n  mesh.setPosition(300, 250, 0);\n  canvas.appendChild(mesh);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n})();\n",title:{zh:"自定义 Geometry",en:"Use BufferGeometry"},filename:"buffer-geometry.js",isNew:!1}],icon:"",id:"geometry",title:{en:"Geometry",zh:"几何"},api:null,childrenKey:"demos",order:10},{demos:[{id:"basic",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*hMqFTYoGSnIAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshBasicMaterial,\n  TorusGeometry,\n  DirectionalLight,\n  Mesh,\n  FogType,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  const torusGeometry = new TorusGeometry(device, {\n    tubeRadius: 30,\n    ringRadius: 200,\n  });\n  const basicMaterial = new MeshBasicMaterial(device);\n\n  const torus = new Mesh({\n    style: {\n      fill: '#b0b0b0',\n      opacity: 1,\n      geometry: torusGeometry,\n      material: basicMaterial,\n    },\n  });\n  torus.setPosition(300, 250);\n  canvas.appendChild(torus);\n\n  // add a directional light into scene\n  const light = new DirectionalLight({\n    style: {\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n\n  const camera = canvas.getCamera();\n  camera.setPosition(300, 0, 500);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const torusFolder = gui.addFolder('torus');\n  const torusConfig = {\n    opacity: 1,\n    fill: '#b0b0b0',\n  };\n  torusFolder.add(torusConfig, 'opacity', 0, 1, 0.1).onChange((opacity) => {\n    torus.style.opacity = opacity;\n  });\n  torusFolder.addColor(torusConfig, 'fill').onChange((color) => {\n    torus.style.fill = color;\n  });\n  torusFolder.open();\n\n  const geometryFolder = gui.addFolder('geometry');\n  const geometryConfig = {\n    tubeRadius: 30,\n    ringRadius: 200,\n    segments: 30,\n    sides: 20,\n  };\n  geometryFolder\n    .add(geometryConfig, 'tubeRadius', 10, 300)\n    .onChange((tubeRadius) => {\n      torusGeometry.tubeRadius = tubeRadius;\n    });\n  geometryFolder\n    .add(geometryConfig, 'ringRadius', 10, 300)\n    .onChange((ringRadius) => {\n      torusGeometry.ringRadius = ringRadius;\n    });\n  geometryFolder\n    .add(geometryConfig, 'segments', 2, 30, 1)\n    .onChange((segments) => {\n      torusGeometry.segments = segments;\n    });\n  geometryFolder.add(geometryConfig, 'sides', 2, 30, 1).onChange((sides) => {\n    torusGeometry.sides = sides;\n  });\n  geometryFolder.open();\n\n  const materialFolder = gui.addFolder('material');\n  const materialConfig = {\n    wireframe: false,\n    map: 'none',\n    fogType: FogType.NONE,\n    fogColor: '#000000',\n    fogDensity: 0.5,\n    fogStart: 1,\n    fogEnd: 1000,\n  };\n  materialFolder.add(materialConfig, 'wireframe').onChange((enable) => {\n    torus.style.material.wireframe = !!enable;\n  });\n  materialFolder\n    .add(materialConfig, 'map', [\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*npAsSLPX4A4AAAAAAAAAAAAAARQnAQ',\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n      'none',\n    ])\n    .onChange((mapURL) => {\n      if (mapURL === 'none') {\n        torus.style.material.map = null;\n      } else {\n        const map = plugin.loadTexture(mapURL);\n        torus.style.material.map = map;\n      }\n    });\n  const fogTypes = [FogType.NONE, FogType.EXP, FogType.EXP2, FogType.LINEAR];\n  materialFolder\n    .add(materialConfig, 'fogType', fogTypes)\n    .onChange((fogType) => {\n      // FogType.NONE\n      torus.style.material.fogType = fogType;\n    });\n  materialFolder.addColor(materialConfig, 'fogColor').onChange((fogColor) => {\n    torus.style.material.fogColor = fogColor;\n  });\n  materialFolder\n    .add(materialConfig, 'fogDensity', 0, 10)\n    .onChange((fogDensity) => {\n      torus.style.material.fogDensity = fogDensity;\n    });\n  materialFolder\n    .add(materialConfig, 'fogStart', 0, 1000)\n    .onChange((fogStart) => {\n      torus.style.material.fogStart = fogStart;\n    });\n  materialFolder.add(materialConfig, 'fogEnd', 0, 1000).onChange((fogEnd) => {\n    torus.style.material.fogEnd = fogEnd;\n  });\n  materialFolder.open();\n})();\n",title:{zh:"Basic",en:"Basic"},filename:"basic.js",isNew:!1},{id:"lambert",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*90sCSavLTiMAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshLambertMaterial,\n  TorusGeometry,\n  DirectionalLight,\n  Mesh,\n  FogType,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  const torusGeometry = new TorusGeometry(device, {\n    tubeRadius: 30,\n    ringRadius: 200,\n  });\n  const basicMaterial = new MeshLambertMaterial(device);\n\n  const torus = new Mesh({\n    style: {\n      fill: 'white',\n      opacity: 1,\n      geometry: torusGeometry,\n      material: basicMaterial,\n    },\n  });\n  torus.setPosition(300, 250);\n  canvas.appendChild(torus);\n\n  // add a directional light into scene\n  const light = new DirectionalLight({\n    style: {\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n\n  const camera = canvas.getCamera();\n  camera.setPosition(300, 0, 500);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n    torus.setOrigin(0, 0, 0);\n    torus.rotate(0, 0.2, 0);\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const torusFolder = gui.addFolder('torus');\n  const torusConfig = {\n    opacity: 1,\n    fill: '#fff',\n  };\n  torusFolder.add(torusConfig, 'opacity', 0, 1, 0.1).onChange((opacity) => {\n    torus.style.opacity = opacity;\n  });\n  torusFolder.addColor(torusConfig, 'fill').onChange((color) => {\n    torus.style.fill = color;\n  });\n  torusFolder.open();\n\n  const geometryFolder = gui.addFolder('geometry');\n  const geometryConfig = {\n    tubeRadius: 30,\n    ringRadius: 200,\n    segments: 30,\n    sides: 20,\n  };\n  geometryFolder\n    .add(geometryConfig, 'tubeRadius', 10, 300)\n    .onChange((tubeRadius) => {\n      torusGeometry.tubeRadius = tubeRadius;\n    });\n  geometryFolder\n    .add(geometryConfig, 'ringRadius', 10, 300)\n    .onChange((ringRadius) => {\n      torusGeometry.ringRadius = ringRadius;\n    });\n  geometryFolder\n    .add(geometryConfig, 'segments', 2, 30, 1)\n    .onChange((segments) => {\n      torusGeometry.segments = segments;\n    });\n  geometryFolder.add(geometryConfig, 'sides', 2, 30, 1).onChange((sides) => {\n    torusGeometry.sides = sides;\n  });\n  geometryFolder.open();\n\n  const materialFolder = gui.addFolder('material');\n  const materialConfig = {\n    wireframe: false,\n    map: 'none',\n    fogType: FogType.NONE,\n    fogColor: '#000000',\n    fogDensity: 0.5,\n    fogStart: 1,\n    fogEnd: 1000,\n  };\n  materialFolder.add(materialConfig, 'wireframe').onChange((enable) => {\n    torus.style.material.wireframe = !!enable;\n  });\n  materialFolder\n    .add(materialConfig, 'map', [\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*npAsSLPX4A4AAAAAAAAAAAAAARQnAQ',\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n      'none',\n    ])\n    .onChange((mapURL) => {\n      if (mapURL === 'none') {\n        torus.style.material.map = null;\n      } else {\n        const map = plugin.loadTexture(mapURL);\n        torus.style.material.map = map;\n      }\n    });\n  const fogTypes = [FogType.NONE, FogType.EXP, FogType.EXP2, FogType.LINEAR];\n  materialFolder\n    .add(materialConfig, 'fogType', fogTypes)\n    .onChange((fogType) => {\n      // FogType.NONE\n      torus.style.material.fogType = fogType;\n    });\n  materialFolder.addColor(materialConfig, 'fogColor').onChange((fogColor) => {\n    torus.style.material.fogColor = fogColor;\n  });\n  materialFolder\n    .add(materialConfig, 'fogDensity', 0, 10)\n    .onChange((fogDensity) => {\n      torus.style.material.fogDensity = fogDensity;\n    });\n  materialFolder\n    .add(materialConfig, 'fogStart', 0, 1000)\n    .onChange((fogStart) => {\n      torus.style.material.fogStart = fogStart;\n    });\n  materialFolder.add(materialConfig, 'fogEnd', 0, 1000).onChange((fogEnd) => {\n    torus.style.material.fogEnd = fogEnd;\n  });\n  materialFolder.open();\n})();\n",title:{zh:"Lambert",en:"Lambert"},filename:"lambert.js",isNew:!1},{id:"phong",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*m7RvSIZ45uwAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshPhongMaterial,\n  TorusGeometry,\n  DirectionalLight,\n  Mesh,\n  FogType,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  const torusGeometry = new TorusGeometry(device, {\n    tubeRadius: 30,\n    ringRadius: 200,\n  });\n  const basicMaterial = new MeshPhongMaterial(device);\n\n  const torus = new Mesh({\n    style: {\n      fill: 'white',\n      opacity: 1,\n      geometry: torusGeometry,\n      material: basicMaterial,\n    },\n  });\n  torus.setPosition(300, 250);\n  canvas.appendChild(torus);\n\n  // add a directional light into scene\n  const light = new DirectionalLight({\n    style: {\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n\n  const camera = canvas.getCamera();\n  camera.setPosition(300, 0, 500);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n    torus.setOrigin(0, 0, 0);\n    torus.rotate(0, 0.2, 0);\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const torusFolder = gui.addFolder('torus');\n  const torusConfig = {\n    opacity: 1,\n    fill: '#fff',\n  };\n  torusFolder.add(torusConfig, 'opacity', 0, 1, 0.1).onChange((opacity) => {\n    torus.style.opacity = opacity;\n  });\n  torusFolder.addColor(torusConfig, 'fill').onChange((color) => {\n    torus.style.fill = color;\n  });\n  torusFolder.open();\n\n  const geometryFolder = gui.addFolder('geometry');\n  const geometryConfig = {\n    tubeRadius: 30,\n    ringRadius: 200,\n    segments: 30,\n    sides: 20,\n  };\n  geometryFolder\n    .add(geometryConfig, 'tubeRadius', 10, 300)\n    .onChange((tubeRadius) => {\n      torusGeometry.tubeRadius = tubeRadius;\n    });\n  geometryFolder\n    .add(geometryConfig, 'ringRadius', 10, 300)\n    .onChange((ringRadius) => {\n      torusGeometry.ringRadius = ringRadius;\n    });\n  geometryFolder\n    .add(geometryConfig, 'segments', 2, 30, 1)\n    .onChange((segments) => {\n      torusGeometry.segments = segments;\n    });\n  geometryFolder.add(geometryConfig, 'sides', 2, 30, 1).onChange((sides) => {\n    torusGeometry.sides = sides;\n  });\n  geometryFolder.open();\n\n  const materialFolder = gui.addFolder('material');\n  const materialConfig = {\n    wireframe: false,\n    map: 'none',\n    fogType: FogType.NONE,\n    fogColor: '#000000',\n    fogDensity: 0.5,\n    fogStart: 1,\n    fogEnd: 1000,\n  };\n  materialFolder.add(materialConfig, 'wireframe').onChange((enable) => {\n    torus.style.material.wireframe = !!enable;\n  });\n  materialFolder\n    .add(materialConfig, 'map', [\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*npAsSLPX4A4AAAAAAAAAAAAAARQnAQ',\n      'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n      'none',\n    ])\n    .onChange((mapURL) => {\n      if (mapURL === 'none') {\n        torus.style.material.map = null;\n      } else {\n        const map = plugin.loadTexture(mapURL);\n        torus.style.material.map = map;\n      }\n    });\n  const fogTypes = [FogType.NONE, FogType.EXP, FogType.EXP2, FogType.LINEAR];\n  materialFolder\n    .add(materialConfig, 'fogType', fogTypes)\n    .onChange((fogType) => {\n      // FogType.NONE\n      torus.style.material.fogType = fogType;\n    });\n  materialFolder.addColor(materialConfig, 'fogColor').onChange((fogColor) => {\n    torus.style.material.fogColor = fogColor;\n  });\n  materialFolder\n    .add(materialConfig, 'fogDensity', 0, 10)\n    .onChange((fogDensity) => {\n      torus.style.material.fogDensity = fogDensity;\n    });\n  materialFolder\n    .add(materialConfig, 'fogStart', 0, 1000)\n    .onChange((fogStart) => {\n      torus.style.material.fogStart = fogStart;\n    });\n  materialFolder.add(materialConfig, 'fogEnd', 0, 1000).onChange((fogEnd) => {\n    torus.style.material.fogEnd = fogEnd;\n  });\n  materialFolder.open();\n})();\n",title:{zh:"Phong",en:"Phong"},filename:"phong.js",isNew:!1},{id:"shader-material",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*Nm5iSqYuF0IAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  ShaderMaterial,\n  BufferGeometry,\n  Mesh,\n  VertexStepMode,\n  Format,\n  VertexAttributeBufferIndex,\n  VertexAttributeLocation,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport Stats from 'stats.js';\nimport * as lil from 'lil-gui';\n\n// create a renderer\nconst renderer = new Renderer({\n  targets: ['webgl1'],\n});\nrenderer.registerPlugin(new Plugin3D());\n\n// create a canvas\nconst CANVAS_WIDTH = 600;\nconst CANVAS_HEIGHT = 500;\nconst canvas = new Canvas({\n  container: 'container',\n  width: CANVAS_WIDTH,\n  height: CANVAS_HEIGHT,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  // create buffer geometry\n  const bufferGeometry = new BufferGeometry(device);\n  bufferGeometry.setVertexBuffer({\n    bufferIndex: VertexAttributeBufferIndex.POSITION,\n    byteStride: 4 * 3,\n    stepMode: VertexStepMode.VERTEX,\n    attributes: [\n      {\n        format: Format.F32_RGB,\n        bufferByteOffset: 4 * 0,\n        location: VertexAttributeLocation.POSITION,\n      },\n    ],\n    // use 6 vertices\n    data: Float32Array.from([\n      -CANVAS_WIDTH / 2,\n      CANVAS_HEIGHT / 2,\n      100.0,\n      CANVAS_WIDTH / 2,\n      CANVAS_HEIGHT / 2,\n      100.0,\n      CANVAS_WIDTH / 2,\n      -CANVAS_HEIGHT / 2,\n      100.0,\n      CANVAS_WIDTH / 2,\n      -CANVAS_HEIGHT / 2,\n      100.0,\n      -CANVAS_WIDTH / 2,\n      -CANVAS_HEIGHT / 2,\n      100.0,\n      -CANVAS_WIDTH / 2,\n      CANVAS_HEIGHT / 2,\n      100.0,\n    ]),\n  });\n  // draw 6 vertices\n  bufferGeometry.vertexCount = 6;\n\n  const shaderMaterial = new ShaderMaterial(device, {\n    vertexShader: `\n    layout(std140) uniform ub_SceneParams {\n      mat4 u_ProjectionMatrix;\n      mat4 u_ViewMatrix;\n      vec3 u_CameraPosition;\n      float u_DevicePixelRatio;\n      vec2 u_Viewport;\n      float u_IsOrtho;\n    };\n    layout(std140) uniform ub_MaterialParams {\n      float u_Level;\n    };\n\n    layout(location = ${VertexAttributeLocation.MODEL_MATRIX0}) in vec4 a_ModelMatrix0;\n    layout(location = ${VertexAttributeLocation.MODEL_MATRIX1}) in vec4 a_ModelMatrix1;\n    layout(location = ${VertexAttributeLocation.MODEL_MATRIX2}) in vec4 a_ModelMatrix2;\n    layout(location = ${VertexAttributeLocation.MODEL_MATRIX3}) in vec4 a_ModelMatrix3;\n    layout(location = ${VertexAttributeLocation.POSITION}) in vec3 a_Position;\n\n    void main() {\n      mat4 u_ModelMatrix = mat4(a_ModelMatrix0, a_ModelMatrix1, a_ModelMatrix2, a_ModelMatrix3);\n      gl_Position = u_ProjectionMatrix * u_ViewMatrix * u_ModelMatrix * vec4(a_Position, 1.0);\n    }\n    `,\n    fragmentShader: ` \n    layout(std140) uniform ub_SceneParams {\n      mat4 u_ProjectionMatrix;\n      mat4 u_ViewMatrix;\n      vec3 u_CameraPosition;\n      float u_DevicePixelRatio;\n      vec2 u_Viewport;\n      float u_IsOrtho;\n    };\n\n    layout(std140) uniform ub_MaterialParams {\n      float u_Level;\n    };\n\n    out vec4 outputColor;\n\n    float random (vec2 st) {\n      return fract(sin(\n        dot(st.xy,vec2(12.9898,78.233)))*\n        43758.5453123);\n    }\n\n    float noise (in vec2 st) {\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n\n      // Four corners in 2D of a tile\n      float a = random(i);\n      float b = random(i + vec2(1.0, 0.0));\n      float c = random(i + vec2(0.0, 1.0));\n      float d = random(i + vec2(1.0, 1.0));\n\n      vec2 u = smoothstep(0.,1.,f);\n\n      // Mix 4 coorners percentages\n      return mix(a, b, u.x) +\n              (c - a)* u.y * (1.0 - u.x) +\n              (d - b) * u.x * u.y;\n    }\n\n    // gradient noise\n    // float noise( in vec2 st ) {\n    //   vec2 i = floor(st);\n    //   vec2 f = fract(st);\n      \n    //   vec2 u = smoothstep(0., 1., f);\n\n    //   return mix( mix( dot( random( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n    //                   dot( random( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n    //               mix( dot( random( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n    //                   dot( random( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n    // }\n\n    void main() {\n      vec2 st = gl_FragCoord.xy / u_Viewport;\n      vec2 pos = vec2(st * u_Level);\n      float n = noise(pos);\n      outputColor = vec4(vec3(n), 1.0);\n    }\n    `,\n  });\n  shaderMaterial.setUniforms({\n    u_Level: 5,\n  });\n  const mesh = new Mesh({\n    style: {\n      fill: '#1890FF',\n      opacity: 1,\n      geometry: bufferGeometry,\n      material: shaderMaterial,\n    },\n  });\n  mesh.setPosition(300, 250, 0);\n  canvas.appendChild(mesh);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n\n  const noiseFolder = gui.addFolder('noise');\n  const noiseConfig = {\n    level: 5,\n  };\n  noiseFolder.add(noiseConfig, 'level', 1, 100, 1).onChange((level) => {\n    shaderMaterial.setUniforms({ u_Level: level });\n  });\n  noiseFolder.open();\n})();\n",title:{zh:"自定义 Material",en:"Use ShaderMaterial"},filename:"shader-material.js",isNew:!1}],icon:"",id:"material",title:{en:"Material",zh:"材质"},api:null,childrenKey:"demos",order:10},{demos:[{id:"force-3d",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*3XFxQKWOeKoAAAAAAAAAAAAAARQnAQ",source:"import {\n  runtime,\n  Canvas,\n  CanvasEvent,\n  Line,\n  Text,\n  Rect,\n  Image,\n  Circle,\n} from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport {\n  MeshPhongMaterial,\n  SphereGeometry,\n  DirectionalLight,\n  Mesh,\n  Plugin as Plugin3D,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport {\n  forceLink,\n  forceSimulation,\n  forceManyBody,\n  forceCenter,\n} from 'd3-force-3d';\n\nruntime.enableCSSParsing = false;\n\n// https://bl.ocks.org/vasturiano/f59675656258d3f490e9faa40828c0e7\nconst dataset = {\n  nodes: [\n    {\n      id: 'Myriel',\n      group: 1,\n    },\n    {\n      id: 'Napoleon',\n      group: 1,\n    },\n    {\n      id: 'Mlle.Baptistine',\n      group: 1,\n    },\n    {\n      id: 'Mme.Magloire',\n      group: 1,\n    },\n    {\n      id: 'CountessdeLo',\n      group: 1,\n    },\n    {\n      id: 'Geborand',\n      group: 1,\n    },\n    {\n      id: 'Champtercier',\n      group: 1,\n    },\n    {\n      id: 'Cravatte',\n      group: 1,\n    },\n    {\n      id: 'Count',\n      group: 1,\n    },\n    {\n      id: 'OldMan',\n      group: 1,\n    },\n    {\n      id: 'Labarre',\n      group: 2,\n    },\n    {\n      id: 'Valjean',\n      group: 2,\n    },\n    {\n      id: 'Marguerite',\n      group: 3,\n    },\n    {\n      id: 'Mme.deR',\n      group: 2,\n    },\n    {\n      id: 'Isabeau',\n      group: 2,\n    },\n    {\n      id: 'Gervais',\n      group: 2,\n    },\n    {\n      id: 'Tholomyes',\n      group: 3,\n    },\n    {\n      id: 'Listolier',\n      group: 3,\n    },\n    {\n      id: 'Fameuil',\n      group: 3,\n    },\n    {\n      id: 'Blacheville',\n      group: 3,\n    },\n    {\n      id: 'Favourite',\n      group: 3,\n    },\n    {\n      id: 'Dahlia',\n      group: 3,\n    },\n    {\n      id: 'Zephine',\n      group: 3,\n    },\n    {\n      id: 'Fantine',\n      group: 3,\n    },\n    {\n      id: 'Mme.Thenardier',\n      group: 4,\n    },\n    {\n      id: 'Thenardier',\n      group: 4,\n    },\n    {\n      id: 'Cosette',\n      group: 5,\n    },\n    {\n      id: 'Javert',\n      group: 4,\n    },\n    {\n      id: 'Fauchelevent',\n      group: 0,\n    },\n    {\n      id: 'Bamatabois',\n      group: 2,\n    },\n    {\n      id: 'Perpetue',\n      group: 3,\n    },\n    {\n      id: 'Simplice',\n      group: 2,\n    },\n    {\n      id: 'Scaufflaire',\n      group: 2,\n    },\n    {\n      id: 'Woman1',\n      group: 2,\n    },\n    {\n      id: 'Judge',\n      group: 2,\n    },\n    {\n      id: 'Champmathieu',\n      group: 2,\n    },\n    {\n      id: 'Brevet',\n      group: 2,\n    },\n    {\n      id: 'Chenildieu',\n      group: 2,\n    },\n    {\n      id: 'Cochepaille',\n      group: 2,\n    },\n    {\n      id: 'Pontmercy',\n      group: 4,\n    },\n    {\n      id: 'Boulatruelle',\n      group: 6,\n    },\n    {\n      id: 'Eponine',\n      group: 4,\n    },\n    {\n      id: 'Anzelma',\n      group: 4,\n    },\n    {\n      id: 'Woman2',\n      group: 5,\n    },\n    {\n      id: 'MotherInnocent',\n      group: 0,\n    },\n    {\n      id: 'Gribier',\n      group: 0,\n    },\n    {\n      id: 'Jondrette',\n      group: 7,\n    },\n    {\n      id: 'Mme.Burgon',\n      group: 7,\n    },\n    {\n      id: 'Gavroche',\n      group: 8,\n    },\n    {\n      id: 'Gillenormand',\n      group: 5,\n    },\n    {\n      id: 'Magnon',\n      group: 5,\n    },\n    {\n      id: 'Mlle.Gillenormand',\n      group: 5,\n    },\n    {\n      id: 'Mme.Pontmercy',\n      group: 5,\n    },\n    {\n      id: 'Mlle.Vaubois',\n      group: 5,\n    },\n    {\n      id: 'Lt.Gillenormand',\n      group: 5,\n    },\n    {\n      id: 'Marius',\n      group: 8,\n    },\n    {\n      id: 'BaronessT',\n      group: 5,\n    },\n    {\n      id: 'Mabeuf',\n      group: 8,\n    },\n    {\n      id: 'Enjolras',\n      group: 8,\n    },\n    {\n      id: 'Combeferre',\n      group: 8,\n    },\n    {\n      id: 'Prouvaire',\n      group: 8,\n    },\n    {\n      id: 'Feuilly',\n      group: 8,\n    },\n    {\n      id: 'Courfeyrac',\n      group: 8,\n    },\n    {\n      id: 'Bahorel',\n      group: 8,\n    },\n    {\n      id: 'Bossuet',\n      group: 8,\n    },\n    {\n      id: 'Joly',\n      group: 8,\n    },\n    {\n      id: 'Grantaire',\n      group: 8,\n    },\n    {\n      id: 'MotherPlutarch',\n      group: 9,\n    },\n    {\n      id: 'Gueulemer',\n      group: 4,\n    },\n    {\n      id: 'Babet',\n      group: 4,\n    },\n    {\n      id: 'Claquesous',\n      group: 4,\n    },\n    {\n      id: 'Montparnasse',\n      group: 4,\n    },\n    {\n      id: 'Toussaint',\n      group: 5,\n    },\n    {\n      id: 'Child1',\n      group: 10,\n    },\n    {\n      id: 'Child2',\n      group: 10,\n    },\n    {\n      id: 'Brujon',\n      group: 4,\n    },\n    {\n      id: 'Mme.Hucheloup',\n      group: 8,\n    },\n  ],\n  links: [\n    {\n      source: 'Napoleon',\n      target: 'Myriel',\n      value: 1,\n    },\n    {\n      source: 'Mlle.Baptistine',\n      target: 'Myriel',\n      value: 8,\n    },\n    {\n      source: 'Mme.Magloire',\n      target: 'Myriel',\n      value: 10,\n    },\n    {\n      source: 'Mme.Magloire',\n      target: 'Mlle.Baptistine',\n      value: 6,\n    },\n    {\n      source: 'CountessdeLo',\n      target: 'Myriel',\n      value: 1,\n    },\n    {\n      source: 'Geborand',\n      target: 'Myriel',\n      value: 1,\n    },\n    {\n      source: 'Champtercier',\n      target: 'Myriel',\n      value: 1,\n    },\n    {\n      source: 'Cravatte',\n      target: 'Myriel',\n      value: 1,\n    },\n    {\n      source: 'Count',\n      target: 'Myriel',\n      value: 2,\n    },\n    {\n      source: 'OldMan',\n      target: 'Myriel',\n      value: 1,\n    },\n    {\n      source: 'Valjean',\n      target: 'Labarre',\n      value: 1,\n    },\n    {\n      source: 'Valjean',\n      target: 'Mme.Magloire',\n      value: 3,\n    },\n    {\n      source: 'Valjean',\n      target: 'Mlle.Baptistine',\n      value: 3,\n    },\n    {\n      source: 'Valjean',\n      target: 'Myriel',\n      value: 5,\n    },\n    {\n      source: 'Marguerite',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Mme.deR',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Isabeau',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Gervais',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Listolier',\n      target: 'Tholomyes',\n      value: 4,\n    },\n    {\n      source: 'Fameuil',\n      target: 'Tholomyes',\n      value: 4,\n    },\n    {\n      source: 'Fameuil',\n      target: 'Listolier',\n      value: 4,\n    },\n    {\n      source: 'Blacheville',\n      target: 'Tholomyes',\n      value: 4,\n    },\n    {\n      source: 'Blacheville',\n      target: 'Listolier',\n      value: 4,\n    },\n    {\n      source: 'Blacheville',\n      target: 'Fameuil',\n      value: 4,\n    },\n    {\n      source: 'Favourite',\n      target: 'Tholomyes',\n      value: 3,\n    },\n    {\n      source: 'Favourite',\n      target: 'Listolier',\n      value: 3,\n    },\n    {\n      source: 'Favourite',\n      target: 'Fameuil',\n      value: 3,\n    },\n    {\n      source: 'Favourite',\n      target: 'Blacheville',\n      value: 4,\n    },\n    {\n      source: 'Dahlia',\n      target: 'Tholomyes',\n      value: 3,\n    },\n    {\n      source: 'Dahlia',\n      target: 'Listolier',\n      value: 3,\n    },\n    {\n      source: 'Dahlia',\n      target: 'Fameuil',\n      value: 3,\n    },\n    {\n      source: 'Dahlia',\n      target: 'Blacheville',\n      value: 3,\n    },\n    {\n      source: 'Dahlia',\n      target: 'Favourite',\n      value: 5,\n    },\n    {\n      source: 'Zephine',\n      target: 'Tholomyes',\n      value: 3,\n    },\n    {\n      source: 'Zephine',\n      target: 'Listolier',\n      value: 3,\n    },\n    {\n      source: 'Zephine',\n      target: 'Fameuil',\n      value: 3,\n    },\n    {\n      source: 'Zephine',\n      target: 'Blacheville',\n      value: 3,\n    },\n    {\n      source: 'Zephine',\n      target: 'Favourite',\n      value: 4,\n    },\n    {\n      source: 'Zephine',\n      target: 'Dahlia',\n      value: 4,\n    },\n    {\n      source: 'Fantine',\n      target: 'Tholomyes',\n      value: 3,\n    },\n    {\n      source: 'Fantine',\n      target: 'Listolier',\n      value: 3,\n    },\n    {\n      source: 'Fantine',\n      target: 'Fameuil',\n      value: 3,\n    },\n    {\n      source: 'Fantine',\n      target: 'Blacheville',\n      value: 3,\n    },\n    {\n      source: 'Fantine',\n      target: 'Favourite',\n      value: 4,\n    },\n    {\n      source: 'Fantine',\n      target: 'Dahlia',\n      value: 4,\n    },\n    {\n      source: 'Fantine',\n      target: 'Zephine',\n      value: 4,\n    },\n    {\n      source: 'Fantine',\n      target: 'Marguerite',\n      value: 2,\n    },\n    {\n      source: 'Fantine',\n      target: 'Valjean',\n      value: 9,\n    },\n    {\n      source: 'Mme.Thenardier',\n      target: 'Fantine',\n      value: 2,\n    },\n    {\n      source: 'Mme.Thenardier',\n      target: 'Valjean',\n      value: 7,\n    },\n    {\n      source: 'Thenardier',\n      target: 'Mme.Thenardier',\n      value: 13,\n    },\n    {\n      source: 'Thenardier',\n      target: 'Fantine',\n      value: 1,\n    },\n    {\n      source: 'Thenardier',\n      target: 'Valjean',\n      value: 12,\n    },\n    {\n      source: 'Cosette',\n      target: 'Mme.Thenardier',\n      value: 4,\n    },\n    {\n      source: 'Cosette',\n      target: 'Valjean',\n      value: 31,\n    },\n    {\n      source: 'Cosette',\n      target: 'Tholomyes',\n      value: 1,\n    },\n    {\n      source: 'Cosette',\n      target: 'Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Javert',\n      target: 'Valjean',\n      value: 17,\n    },\n    {\n      source: 'Javert',\n      target: 'Fantine',\n      value: 5,\n    },\n    {\n      source: 'Javert',\n      target: 'Thenardier',\n      value: 5,\n    },\n    {\n      source: 'Javert',\n      target: 'Mme.Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Javert',\n      target: 'Cosette',\n      value: 1,\n    },\n    {\n      source: 'Fauchelevent',\n      target: 'Valjean',\n      value: 8,\n    },\n    {\n      source: 'Fauchelevent',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Bamatabois',\n      target: 'Fantine',\n      value: 1,\n    },\n    {\n      source: 'Bamatabois',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Bamatabois',\n      target: 'Valjean',\n      value: 2,\n    },\n    {\n      source: 'Perpetue',\n      target: 'Fantine',\n      value: 1,\n    },\n    {\n      source: 'Simplice',\n      target: 'Perpetue',\n      value: 2,\n    },\n    {\n      source: 'Simplice',\n      target: 'Valjean',\n      value: 3,\n    },\n    {\n      source: 'Simplice',\n      target: 'Fantine',\n      value: 2,\n    },\n    {\n      source: 'Simplice',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Scaufflaire',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Woman1',\n      target: 'Valjean',\n      value: 2,\n    },\n    {\n      source: 'Woman1',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Judge',\n      target: 'Valjean',\n      value: 3,\n    },\n    {\n      source: 'Judge',\n      target: 'Bamatabois',\n      value: 2,\n    },\n    {\n      source: 'Champmathieu',\n      target: 'Valjean',\n      value: 3,\n    },\n    {\n      source: 'Champmathieu',\n      target: 'Judge',\n      value: 3,\n    },\n    {\n      source: 'Champmathieu',\n      target: 'Bamatabois',\n      value: 2,\n    },\n    {\n      source: 'Brevet',\n      target: 'Judge',\n      value: 2,\n    },\n    {\n      source: 'Brevet',\n      target: 'Champmathieu',\n      value: 2,\n    },\n    {\n      source: 'Brevet',\n      target: 'Valjean',\n      value: 2,\n    },\n    {\n      source: 'Brevet',\n      target: 'Bamatabois',\n      value: 1,\n    },\n    {\n      source: 'Chenildieu',\n      target: 'Judge',\n      value: 2,\n    },\n    {\n      source: 'Chenildieu',\n      target: 'Champmathieu',\n      value: 2,\n    },\n    {\n      source: 'Chenildieu',\n      target: 'Brevet',\n      value: 2,\n    },\n    {\n      source: 'Chenildieu',\n      target: 'Valjean',\n      value: 2,\n    },\n    {\n      source: 'Chenildieu',\n      target: 'Bamatabois',\n      value: 1,\n    },\n    {\n      source: 'Cochepaille',\n      target: 'Judge',\n      value: 2,\n    },\n    {\n      source: 'Cochepaille',\n      target: 'Champmathieu',\n      value: 2,\n    },\n    {\n      source: 'Cochepaille',\n      target: 'Brevet',\n      value: 2,\n    },\n    {\n      source: 'Cochepaille',\n      target: 'Chenildieu',\n      value: 2,\n    },\n    {\n      source: 'Cochepaille',\n      target: 'Valjean',\n      value: 2,\n    },\n    {\n      source: 'Cochepaille',\n      target: 'Bamatabois',\n      value: 1,\n    },\n    {\n      source: 'Pontmercy',\n      target: 'Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Boulatruelle',\n      target: 'Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Eponine',\n      target: 'Mme.Thenardier',\n      value: 2,\n    },\n    {\n      source: 'Eponine',\n      target: 'Thenardier',\n      value: 3,\n    },\n    {\n      source: 'Anzelma',\n      target: 'Eponine',\n      value: 2,\n    },\n    {\n      source: 'Anzelma',\n      target: 'Thenardier',\n      value: 2,\n    },\n    {\n      source: 'Anzelma',\n      target: 'Mme.Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Woman2',\n      target: 'Valjean',\n      value: 3,\n    },\n    {\n      source: 'Woman2',\n      target: 'Cosette',\n      value: 1,\n    },\n    {\n      source: 'Woman2',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'MotherInnocent',\n      target: 'Fauchelevent',\n      value: 3,\n    },\n    {\n      source: 'MotherInnocent',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Gribier',\n      target: 'Fauchelevent',\n      value: 2,\n    },\n    {\n      source: 'Mme.Burgon',\n      target: 'Jondrette',\n      value: 1,\n    },\n    {\n      source: 'Gavroche',\n      target: 'Mme.Burgon',\n      value: 2,\n    },\n    {\n      source: 'Gavroche',\n      target: 'Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Gavroche',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Gavroche',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Gillenormand',\n      target: 'Cosette',\n      value: 3,\n    },\n    {\n      source: 'Gillenormand',\n      target: 'Valjean',\n      value: 2,\n    },\n    {\n      source: 'Magnon',\n      target: 'Gillenormand',\n      value: 1,\n    },\n    {\n      source: 'Magnon',\n      target: 'Mme.Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Mlle.Gillenormand',\n      target: 'Gillenormand',\n      value: 9,\n    },\n    {\n      source: 'Mlle.Gillenormand',\n      target: 'Cosette',\n      value: 2,\n    },\n    {\n      source: 'Mlle.Gillenormand',\n      target: 'Valjean',\n      value: 2,\n    },\n    {\n      source: 'Mme.Pontmercy',\n      target: 'Mlle.Gillenormand',\n      value: 1,\n    },\n    {\n      source: 'Mme.Pontmercy',\n      target: 'Pontmercy',\n      value: 1,\n    },\n    {\n      source: 'Mlle.Vaubois',\n      target: 'Mlle.Gillenormand',\n      value: 1,\n    },\n    {\n      source: 'Lt.Gillenormand',\n      target: 'Mlle.Gillenormand',\n      value: 2,\n    },\n    {\n      source: 'Lt.Gillenormand',\n      target: 'Gillenormand',\n      value: 1,\n    },\n    {\n      source: 'Lt.Gillenormand',\n      target: 'Cosette',\n      value: 1,\n    },\n    {\n      source: 'Marius',\n      target: 'Mlle.Gillenormand',\n      value: 6,\n    },\n    {\n      source: 'Marius',\n      target: 'Gillenormand',\n      value: 12,\n    },\n    {\n      source: 'Marius',\n      target: 'Pontmercy',\n      value: 1,\n    },\n    {\n      source: 'Marius',\n      target: 'Lt.Gillenormand',\n      value: 1,\n    },\n    {\n      source: 'Marius',\n      target: 'Cosette',\n      value: 21,\n    },\n    {\n      source: 'Marius',\n      target: 'Valjean',\n      value: 19,\n    },\n    {\n      source: 'Marius',\n      target: 'Tholomyes',\n      value: 1,\n    },\n    {\n      source: 'Marius',\n      target: 'Thenardier',\n      value: 2,\n    },\n    {\n      source: 'Marius',\n      target: 'Eponine',\n      value: 5,\n    },\n    {\n      source: 'Marius',\n      target: 'Gavroche',\n      value: 4,\n    },\n    {\n      source: 'BaronessT',\n      target: 'Gillenormand',\n      value: 1,\n    },\n    {\n      source: 'BaronessT',\n      target: 'Marius',\n      value: 1,\n    },\n    {\n      source: 'Mabeuf',\n      target: 'Marius',\n      value: 1,\n    },\n    {\n      source: 'Mabeuf',\n      target: 'Eponine',\n      value: 1,\n    },\n    {\n      source: 'Mabeuf',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Enjolras',\n      target: 'Marius',\n      value: 7,\n    },\n    {\n      source: 'Enjolras',\n      target: 'Gavroche',\n      value: 7,\n    },\n    {\n      source: 'Enjolras',\n      target: 'Javert',\n      value: 6,\n    },\n    {\n      source: 'Enjolras',\n      target: 'Mabeuf',\n      value: 1,\n    },\n    {\n      source: 'Enjolras',\n      target: 'Valjean',\n      value: 4,\n    },\n    {\n      source: 'Combeferre',\n      target: 'Enjolras',\n      value: 15,\n    },\n    {\n      source: 'Combeferre',\n      target: 'Marius',\n      value: 5,\n    },\n    {\n      source: 'Combeferre',\n      target: 'Gavroche',\n      value: 6,\n    },\n    {\n      source: 'Combeferre',\n      target: 'Mabeuf',\n      value: 2,\n    },\n    {\n      source: 'Prouvaire',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Prouvaire',\n      target: 'Enjolras',\n      value: 4,\n    },\n    {\n      source: 'Prouvaire',\n      target: 'Combeferre',\n      value: 2,\n    },\n    {\n      source: 'Feuilly',\n      target: 'Gavroche',\n      value: 2,\n    },\n    {\n      source: 'Feuilly',\n      target: 'Enjolras',\n      value: 6,\n    },\n    {\n      source: 'Feuilly',\n      target: 'Prouvaire',\n      value: 2,\n    },\n    {\n      source: 'Feuilly',\n      target: 'Combeferre',\n      value: 5,\n    },\n    {\n      source: 'Feuilly',\n      target: 'Mabeuf',\n      value: 1,\n    },\n    {\n      source: 'Feuilly',\n      target: 'Marius',\n      value: 1,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Marius',\n      value: 9,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Enjolras',\n      value: 17,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Combeferre',\n      value: 13,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Gavroche',\n      value: 7,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Mabeuf',\n      value: 2,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Eponine',\n      value: 1,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Feuilly',\n      value: 6,\n    },\n    {\n      source: 'Courfeyrac',\n      target: 'Prouvaire',\n      value: 3,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Combeferre',\n      value: 5,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Gavroche',\n      value: 5,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Courfeyrac',\n      value: 6,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Mabeuf',\n      value: 2,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Enjolras',\n      value: 4,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Feuilly',\n      value: 3,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Prouvaire',\n      value: 2,\n    },\n    {\n      source: 'Bahorel',\n      target: 'Marius',\n      value: 1,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Marius',\n      value: 5,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Courfeyrac',\n      value: 12,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Gavroche',\n      value: 5,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Bahorel',\n      value: 4,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Enjolras',\n      value: 10,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Feuilly',\n      value: 6,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Prouvaire',\n      value: 2,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Combeferre',\n      value: 9,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Mabeuf',\n      value: 1,\n    },\n    {\n      source: 'Bossuet',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Joly',\n      target: 'Bahorel',\n      value: 5,\n    },\n    {\n      source: 'Joly',\n      target: 'Bossuet',\n      value: 7,\n    },\n    {\n      source: 'Joly',\n      target: 'Gavroche',\n      value: 3,\n    },\n    {\n      source: 'Joly',\n      target: 'Courfeyrac',\n      value: 5,\n    },\n    {\n      source: 'Joly',\n      target: 'Enjolras',\n      value: 5,\n    },\n    {\n      source: 'Joly',\n      target: 'Feuilly',\n      value: 5,\n    },\n    {\n      source: 'Joly',\n      target: 'Prouvaire',\n      value: 2,\n    },\n    {\n      source: 'Joly',\n      target: 'Combeferre',\n      value: 5,\n    },\n    {\n      source: 'Joly',\n      target: 'Mabeuf',\n      value: 1,\n    },\n    {\n      source: 'Joly',\n      target: 'Marius',\n      value: 2,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Bossuet',\n      value: 3,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Enjolras',\n      value: 3,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Combeferre',\n      value: 1,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Courfeyrac',\n      value: 2,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Joly',\n      value: 2,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Bahorel',\n      value: 1,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Feuilly',\n      value: 1,\n    },\n    {\n      source: 'Grantaire',\n      target: 'Prouvaire',\n      value: 1,\n    },\n    {\n      source: 'MotherPlutarch',\n      target: 'Mabeuf',\n      value: 3,\n    },\n    {\n      source: 'Gueulemer',\n      target: 'Thenardier',\n      value: 5,\n    },\n    {\n      source: 'Gueulemer',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Gueulemer',\n      target: 'Mme.Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Gueulemer',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Gueulemer',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Gueulemer',\n      target: 'Eponine',\n      value: 1,\n    },\n    {\n      source: 'Babet',\n      target: 'Thenardier',\n      value: 6,\n    },\n    {\n      source: 'Babet',\n      target: 'Gueulemer',\n      value: 6,\n    },\n    {\n      source: 'Babet',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Babet',\n      target: 'Mme.Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Babet',\n      target: 'Javert',\n      value: 2,\n    },\n    {\n      source: 'Babet',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Babet',\n      target: 'Eponine',\n      value: 1,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Thenardier',\n      value: 4,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Babet',\n      value: 4,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Gueulemer',\n      value: 4,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Mme.Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Eponine',\n      value: 1,\n    },\n    {\n      source: 'Claquesous',\n      target: 'Enjolras',\n      value: 1,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Babet',\n      value: 2,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Gueulemer',\n      value: 2,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Claquesous',\n      value: 2,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Eponine',\n      value: 1,\n    },\n    {\n      source: 'Montparnasse',\n      target: 'Thenardier',\n      value: 1,\n    },\n    {\n      source: 'Toussaint',\n      target: 'Cosette',\n      value: 2,\n    },\n    {\n      source: 'Toussaint',\n      target: 'Javert',\n      value: 1,\n    },\n    {\n      source: 'Toussaint',\n      target: 'Valjean',\n      value: 1,\n    },\n    {\n      source: 'Child1',\n      target: 'Gavroche',\n      value: 2,\n    },\n    {\n      source: 'Child2',\n      target: 'Gavroche',\n      value: 2,\n    },\n    {\n      source: 'Child2',\n      target: 'Child1',\n      value: 3,\n    },\n    {\n      source: 'Brujon',\n      target: 'Babet',\n      value: 3,\n    },\n    {\n      source: 'Brujon',\n      target: 'Gueulemer',\n      value: 3,\n    },\n    {\n      source: 'Brujon',\n      target: 'Thenardier',\n      value: 3,\n    },\n    {\n      source: 'Brujon',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Brujon',\n      target: 'Eponine',\n      value: 1,\n    },\n    {\n      source: 'Brujon',\n      target: 'Claquesous',\n      value: 1,\n    },\n    {\n      source: 'Brujon',\n      target: 'Montparnasse',\n      value: 1,\n    },\n    {\n      source: 'Mme.Hucheloup',\n      target: 'Bossuet',\n      value: 1,\n    },\n    {\n      source: 'Mme.Hucheloup',\n      target: 'Joly',\n      value: 1,\n    },\n    {\n      source: 'Mme.Hucheloup',\n      target: 'Grantaire',\n      value: 1,\n    },\n    {\n      source: 'Mme.Hucheloup',\n      target: 'Bahorel',\n      value: 1,\n    },\n    {\n      source: 'Mme.Hucheloup',\n      target: 'Courfeyrac',\n      value: 1,\n    },\n    {\n      source: 'Mme.Hucheloup',\n      target: 'Gavroche',\n      value: 1,\n    },\n    {\n      source: 'Mme.Hucheloup',\n      target: 'Enjolras',\n      value: 1,\n    },\n  ],\n};\n\n// start 3d force simulation\nconst simulation = forceSimulation(dataset.nodes, 3)\n  .force(\n    'link',\n    forceLink().id(function (d) {\n      return d.id;\n    }),\n  )\n  .force('charge', forceManyBody())\n  .force('center', forceCenter(0, 0));\nsimulation.nodes(dataset.nodes);\nsimulation.force('link').links(dataset.links);\nsimulation.tick(1000);\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  // create a sphere geometry\n  const sphereGeometry = new SphereGeometry(device, {\n    radius: 5,\n    latitudeBands: 32,\n    longitudeBands: 32,\n  });\n  // create a material with Phong lighting model\n  const material = new MeshPhongMaterial(device, {\n    shininess: 30,\n  });\n\n  // @see https://antv.vision/en/docs/specification/language/palette#%E5%88%86%E7%B1%BB%E8%89%B2%E6%9D%BF\n  const colorPalette = [\n    '#5B8FF9',\n    '#CDDDFD',\n    '#61DDAA',\n    '#CDF3E4',\n    '#65789B',\n    '#F6BD16',\n    '#7262fd',\n    '#78D3F8',\n    '#9661BC',\n    '#F6903D',\n    '#008685',\n    '#F08BB4',\n  ];\n  dataset.nodes.forEach((node) => {\n    const fill = colorPalette[node.group];\n    // create a mesh\n    const sphere = new Mesh({\n      style: {\n        fill,\n        opacity: 1,\n        geometry: sphereGeometry,\n        material,\n        cursor: 'pointer',\n      },\n    });\n    sphere.setPosition(node.x + 300, node.y + 250, node.z);\n    canvas.appendChild(sphere);\n\n    sphere.addEventListener('mouseenter', () => {\n      sphere.style.fill = 'red';\n    });\n    sphere.addEventListener('mouseleave', () => {\n      sphere.style.fill = fill;\n    });\n\n    const icon = new Image({\n      style: {\n        x: node.x + 310,\n        y: node.y + 250,\n        z: node.z - 1,\n        width: 10,\n        height: 10,\n        src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n        isBillboard: true,\n      },\n    });\n    canvas.appendChild(icon);\n\n    const circle = new Circle({\n      style: {\n        cx: node.x + 310,\n        cy: node.y + 250,\n        cz: node.z - 2,\n        r: 2.5,\n        fill: 'red',\n        isBillboard: true,\n      },\n    });\n    canvas.appendChild(circle);\n\n    const label = new Text({\n      style: {\n        x: node.x + 310,\n        y: node.y + 250,\n        z: node.z + 1,\n        fontFamily: 'sans-serif',\n        text: node.id,\n        fontSize: 6,\n        fill: 'black',\n        isBillboard: true,\n      },\n    });\n\n    const rect = new Rect({\n      style: {\n        x: node.x + 310,\n        y: node.y + 250,\n        z: node.z,\n        width: label.getBBox().width,\n        height: 8,\n        fill: 'grey',\n        isBillboard: true,\n        fillOpacity: 0.6,\n      },\n    });\n    canvas.appendChild(rect);\n    canvas.appendChild(label);\n  });\n\n  dataset.links.forEach((edge) => {\n    const { source, target } = edge;\n    const line = new Line({\n      style: {\n        x1: source.x + 300,\n        y1: source.y + 250,\n        z1: source.z,\n        x2: target.x + 300,\n        y2: target.y + 250,\n        z2: target.z,\n        stroke: 'black',\n        lineWidth: 2,\n        opacity: 0.5,\n        isBillboard: true, // 始终面向屏幕\n      },\n    });\n    canvas.appendChild(line);\n  });\n\n  // add a directional light into scene\n  const light = new DirectionalLight({\n    style: {\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n\n  // adjust camera's position\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 600 / 500);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n})();\n",title:{zh:"3D 力导布局",en:"Force 3D"},filename:"force-3d.js",isNew:!1},{id:"music-viz",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*nKFQQZdL3-IAAAAAAAAAAAAAARQnAQ",source:"import React, { useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport Stats from 'stats.js';\nimport SimplexNoise from 'simplex-noise';\nimport { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport {\n  Mesh,\n  SphereGeometry,\n  PlaneGeometry,\n  MeshBasicMaterial,\n  Fog,\n  FogType,\n  Plugin as Plugin3D,\n  CullMode,\n  VertexAttributeBufferIndex,\n  VertexAttributeLocation,\n} from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\n\n/**\n * ported from https://medium.com/@mag_ops/music-visualiser-with-three-js-web-audio-api-b30175e7b5ba\n * Web Audio API @see https://developer.mozilla.org/zh-CN/docs/Web/API/AudioContext\n */\n\nconst App = function MusicViz() {\n  const containerRef = useRef(null);\n  const audioRef = useRef(null);\n  let analyser;\n  let dataArray;\n  const noise = new SimplexNoise();\n\n  useEffect(() => {\n    // create a webgl renderer\n    const renderer = new WebGLRenderer();\n    renderer.registerPlugin(new Plugin3D());\n    renderer.registerPlugin(new PluginControl());\n\n    // create a canvas\n    const canvas = new Canvas({\n      container: containerRef.current,\n      width: 600,\n      height: 500,\n      renderer,\n      background: '#120f6c',\n    });\n\n    const camera = canvas.getCamera();\n    camera.setPosition(300, 100, 500);\n    camera.setPerspective(0.1, 1000, 75, 600 / 500);\n\n    canvas.appendChild(\n      new Fog({\n        style: {\n          fill: 'purple',\n          type: FogType.EXP2,\n          density: 0.0015,\n          start: 0,\n          end: 0,\n        },\n      }),\n    );\n\n    (async () => {\n      await canvas.ready;\n\n      const plugin = renderer.getPlugin('device-renderer');\n      const device = plugin.getDevice();\n\n      const sphereGeometry = new SphereGeometry(device, {\n        radius: 100,\n        latitudeBands: 32,\n        longitudeBands: 32,\n      });\n      const groundGeometry = new PlaneGeometry(device, {\n        width: 800,\n        depth: 800,\n        widthSegments: 20,\n        depthSegments: 20,\n      });\n      const skyGeometry = new PlaneGeometry(device, {\n        width: 800,\n        depth: 800,\n        widthSegments: 20,\n        depthSegments: 20,\n      });\n      const planeMaterial = new MeshBasicMaterial(device, {\n        wireframe: true,\n        wireframeColor: 'purple',\n        cullMode: CullMode.NONE,\n      });\n      const basicMaterial = new MeshBasicMaterial(device, {\n        wireframe: true,\n        wireframeColor: '#ff00ee',\n      });\n\n      const sphere = new Mesh({\n        style: {\n          fill: '#120f6c',\n          opacity: 1,\n          geometry: sphereGeometry,\n          material: basicMaterial,\n        },\n      });\n      sphere.setPosition(300, 200);\n      canvas.appendChild(sphere);\n\n      const ground = new Mesh({\n        style: {\n          fill: '#120f6c',\n          opacity: 1,\n          geometry: groundGeometry,\n          material: planeMaterial,\n        },\n      });\n      ground.setPosition(300, 250);\n      canvas.appendChild(ground);\n\n      const sky = new Mesh({\n        style: {\n          fill: 'white',\n          opacity: 1,\n          geometry: skyGeometry,\n          material: planeMaterial,\n        },\n      });\n      sky.setPosition(300, 0);\n      canvas.appendChild(sky);\n\n      canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n        if (stats) {\n          stats.update();\n        }\n\n        canvas.document.documentElement.setOrigin(300, 250, 0);\n        canvas.document.documentElement.rotate(0, 0.2, 0);\n\n        if (analyser && dataArray) {\n          analyser.getByteFrequencyData(dataArray);\n\n          const lowerHalfArray = dataArray.slice(0, dataArray.length / 2 - 1);\n          const upperHalfArray = dataArray.slice(\n            dataArray.length / 2 - 1,\n            dataArray.length - 1,\n          );\n\n          const overallAvg = avg(dataArray);\n          const lowerMax = max(lowerHalfArray);\n          const lowerAvg = avg(lowerHalfArray);\n          const upperMax = max(upperHalfArray);\n          const upperAvg = avg(upperHalfArray);\n\n          const lowerMaxFr = lowerMax / lowerHalfArray.length;\n          const lowerAvgFr = lowerAvg / lowerHalfArray.length;\n          const upperMaxFr = upperMax / upperHalfArray.length;\n          const upperAvgFr = upperAvg / upperHalfArray.length;\n\n          makeRoughGround(groundGeometry, modulate(lowerMaxFr, 0, 1, 0.5, 4));\n          makeRoughGround(skyGeometry, modulate(upperAvgFr, 0, 1, 0.5, 4));\n          makeRoughBall(\n            sphereGeometry,\n            modulate(Math.pow(lowerMaxFr, 0.8), 0, 1, 0, 8),\n            modulate(upperAvgFr, 0, 1, 0, 4),\n          );\n        }\n      });\n\n      const makeRoughGround = (geometry, distortionFr) => {\n        const bufferIndex = VertexAttributeBufferIndex.POSITION;\n        const positions = geometry.vertices[bufferIndex];\n\n        for (let i = 0; i < positions.length; i += 3) {\n          const x = positions[i];\n          const y = positions[i + 1];\n          const z = positions[i + 2];\n\n          const amp = 2;\n          const time = window.performance.now();\n          const distance =\n            noise.noise2D(x + time * 0.003, z + time * 0.001) *\n            distortionFr *\n            amp;\n          positions[i + 1] = distance;\n        }\n\n        geometry.updateVertexBuffer(\n          bufferIndex,\n          VertexAttributeLocation.POSITION,\n          0,\n          new Uint8Array(positions.buffer),\n        );\n      };\n\n      const makeRoughBall = (geometry, bassFr, treFr) => {\n        const bufferIndex = VertexAttributeBufferIndex.POSITION;\n        const positions = geometry.vertices[bufferIndex];\n\n        for (let i = 0; i < positions.length; i += 3) {\n          const x = positions[i];\n          const y = positions[i + 1];\n          const z = positions[i + 2];\n\n          const amp = 7;\n          const time = window.performance.now();\n          const radius = 100;\n          const vec3 = [x, y, z];\n\n          normalize(vec3, vec3);\n          const rf = 0.0001;\n          const distance =\n            radius +\n            bassFr +\n            noise.noise3D(\n              vec3[0] + time * rf * 7,\n              vec3[1] + time * rf * 8,\n              vec3[2] + time * rf * 9,\n            ) *\n              amp *\n              treFr;\n\n          positions[i] = vec3[0] * distance;\n          positions[i + 1] = vec3[1] * distance;\n          positions[i + 2] = vec3[2] * distance;\n        }\n\n        geometry.updateVertexBuffer(\n          bufferIndex,\n          VertexAttributeLocation.POSITION,\n          0,\n          new Uint8Array(positions.buffer),\n        );\n      };\n\n      const stats = new Stats();\n      stats.showPanel(0);\n      const $stats = stats.dom;\n      $stats.style.position = 'absolute';\n      $stats.style.left = '0px';\n      $stats.style.top = '0px';\n      const $wrapper = containerRef.current;\n      $wrapper.appendChild($stats);\n    })();\n  }, []);\n\n  const handleFileChanged = (e) => {\n    const files = e.target.files;\n    const audio = audioRef.current;\n    audio.src = URL.createObjectURL(files[0]);\n    audio.load();\n    audio.play();\n\n    const context = new AudioContext();\n    const src = context.createMediaElementSource(audio);\n    analyser = context.createAnalyser();\n    src.connect(analyser);\n    analyser.connect(context.destination);\n    analyser.fftSize = 512;\n    const bufferLength = analyser.frequencyBinCount;\n    dataArray = new Uint8Array(bufferLength);\n  };\n\n  return (\n    <>\n      <label htmlFor=\"file\">\n        <input\n          type=\"file\"\n          id=\"file\"\n          accept=\"audio/*\"\n          onChange={handleFileChanged}\n        />\n      </label>\n      <audio id=\"audio\" controls ref={audioRef}></audio>\n\n      <div\n        id=\"container1\"\n        ref={containerRef}\n        style={{\n          width: '100%',\n          height: '100%',\n        }}\n      />\n    </>\n  );\n};\n\n//some helper functions here\nfunction fractionate(val, minVal, maxVal) {\n  return (val - minVal) / (maxVal - minVal);\n}\n\nfunction modulate(val, minVal, maxVal, outMin, outMax) {\n  const fr = fractionate(val, minVal, maxVal);\n  const delta = outMax - outMin;\n  return outMin + fr * delta;\n}\n\nfunction avg(arr) {\n  const total = arr.reduce(function (sum, b) {\n    return sum + b;\n  });\n  return total / arr.length;\n}\n\nfunction max(arr) {\n  return arr.reduce(function (a, b) {\n    return Math.max(a, b);\n  });\n}\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"音乐可视化",en:"Music Visualization"},filename:"music-viz.tsx",isNew:!1},{id:"billboard",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*V44QR4my8ZwAAAAAAAAAAAAADmJ7AQ/original",source:"import {\n  runtime,\n  Canvas,\n  CanvasEvent,\n  Line,\n  Text,\n  Rect,\n  Image,\n  CameraType,\n  Circle,\n  Polyline,\n  Path,\n} from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport { DirectionalLight, Plugin as Plugin3D } from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nruntime.enableCSSParsing = false;\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 400,\n  height: 400,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  const origin = new Image({\n    style: {\n      x: 200,\n      y: 200,\n      z: 0,\n      width: 20,\n      height: 20,\n      src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n      isBillboard: true,\n      billboardRotation: Math.PI / 8,\n    },\n  });\n  const label = new Text({\n    style: {\n      x: 200,\n      y: 200,\n      text: '0',\n      fontSize: 12,\n      fill: 'black',\n      isBillboard: true,\n      billboardRotation: Math.PI / 8,\n    },\n  });\n  origin.appendChild(label);\n  canvas.appendChild(origin);\n\n  const x = origin.cloneNode(true);\n  x.attr({\n    x: 300,\n  });\n  x.childNodes[0].style.text = 'x';\n  x.childNodes[0].style.x = 300;\n  canvas.appendChild(x);\n\n  const y = origin.cloneNode(true);\n  y.attr({\n    y: 100,\n  });\n  y.childNodes[0].style.text = 'y';\n  y.childNodes[0].style.y = 100;\n  canvas.appendChild(y);\n\n  const z = origin.cloneNode(true);\n  z.attr({\n    z: 100,\n  });\n  z.childNodes[0].style.text = 'z';\n  z.childNodes[0].style.z = 100;\n  canvas.appendChild(z);\n\n  const xAxis = new Line({\n    style: {\n      x1: 200,\n      y1: 200,\n      z1: 0,\n      x2: 300,\n      y2: 200,\n      z2: 0,\n      stroke: 'black',\n      lineWidth: 2,\n      isSizeAttenuation: true,\n    },\n  });\n  canvas.appendChild(xAxis);\n\n  const yAxis = new Path({\n    style: {\n      d: [\n        ['M', 200, 200],\n        ['L', 200, 100],\n      ],\n      stroke: 'black',\n      lineWidth: 2,\n      isSizeAttenuation: true,\n    },\n  });\n  canvas.appendChild(yAxis);\n\n  const zAxis = new Line({\n    style: {\n      x1: 200,\n      y1: 200,\n      z1: 0,\n      x2: 200,\n      y2: 200,\n      z2: 100,\n      stroke: 'black',\n      lineWidth: 2,\n      isSizeAttenuation: true,\n    },\n  });\n  canvas.appendChild(zAxis);\n\n  const polyline3D = new Polyline({\n    style: {\n      stroke: '#1890FF',\n      lineWidth: 10,\n      lineCap: 'round',\n      lineJoin: 'round',\n      points: [\n        [50, 50, 0],\n        [100, 50, 100],\n        [100, 100, 0],\n        [150, 100, 100],\n        [150, 150, 0],\n        [200, 150, 0],\n        [200, 200, 0],\n        [250, 200, 0],\n      ],\n      cursor: 'pointer',\n      isBillboard: true,\n    },\n  });\n  polyline3D.translate(0, 200);\n  canvas.appendChild(polyline3D);\n\n  const circle = new Circle({\n    style: {\n      cx: 200,\n      cy: 200,\n      r: 50,\n      fill: 'red',\n      isBillboard: true,\n      cursor: 'pointer',\n    },\n  });\n  canvas.appendChild(circle);\n\n  const rect = new Rect({\n    style: {\n      x: 100,\n      y: 100,\n      width: 10,\n      height: 10,\n      fill: 'red',\n      isBillboard: true,\n      cursor: 'pointer',\n    },\n  });\n  canvas.appendChild(rect);\n\n  const path = new Path({\n    style: {\n      d: [\n        ['M', 57.06339097770921, -18.541019662496844],\n        ['L', 13.225168176580645, -18.202882373436317],\n        ['L', 3.67394039744206e-15, -60],\n        ['L', -13.225168176580643, -18.202882373436317],\n        ['L', -57.06339097770921, -18.54101966249685],\n        ['L', -21.398771616640953, 6.952882373436324],\n        ['L', -35.267115137548394, 48.54101966249684],\n        ['L', -4.133182947122317e-15, 22.5],\n        ['L', 35.26711513754837, 48.54101966249685],\n        ['L', 21.398771616640953, 6.952882373436322],\n        ['Z'],\n      ],\n      stroke: '#1890FF',\n      fill: '#1890FF',\n      fillOpacity: 0.5,\n      lineWidth: 10,\n      lineCap: 'round',\n      lineJoin: 'round',\n      isBillboard: true,\n      cursor: 'pointer',\n    },\n  });\n  path.translate(100, 100, 0);\n  canvas.appendChild(path);\n\n  // add a directional light into scene\n  const light = new DirectionalLight({\n    style: {\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n\n  // adjust camera's position\n  const camera = canvas.getCamera();\n  camera.setType(CameraType.ORBITING);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n})();\n",title:{zh:"公告牌效果",en:"Billboard effect"},filename:"billboard.js",isNew:!1},{id:"size-attenuation",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*9SMLQpVThc4AAAAAAAAAAAAADmJ7AQ/original",source:"import {\n  runtime,\n  Canvas,\n  CanvasEvent,\n  Line,\n  Text,\n  Rect,\n  Polyline,\n  Path,\n  Image,\n  CameraType,\n} from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport { DirectionalLight, Plugin as Plugin3D } from '@antv/g-plugin-3d';\nimport { Plugin as PluginControl } from '@antv/g-plugin-control';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst renderer = new Renderer();\nrenderer.registerPlugin(new Plugin3D());\nrenderer.registerPlugin(new PluginControl());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 400,\n  height: 400,\n  renderer,\n});\n\n(async () => {\n  // wait for canvas' initialization complete\n  await canvas.ready;\n  // use GPU device\n  const plugin = renderer.getPlugin('device-renderer');\n  const device = plugin.getDevice();\n\n  const origin = new Image({\n    style: {\n      x: 200,\n      y: 200,\n      z: 0,\n      width: 20,\n      height: 20,\n      src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n      isBillboard: true,\n      isSizeAttenuation: true,\n    },\n  });\n  const label = new Text({\n    style: {\n      x: 200,\n      y: 200,\n      text: '0',\n      fontSize: 12,\n      fill: 'black',\n      isBillboard: true,\n      billboardRotation: Math.PI / 8,\n    },\n  });\n  origin.appendChild(label);\n  canvas.appendChild(origin);\n\n  const x = origin.cloneNode(true);\n  x.attr({\n    x: 300,\n  });\n  x.childNodes[0].style.text = 'x';\n  x.childNodes[0].style.x = 300;\n  canvas.appendChild(x);\n\n  const y = origin.cloneNode(true);\n  y.attr({\n    y: 100,\n  });\n  y.childNodes[0].style.text = 'y';\n  y.childNodes[0].style.y = 100;\n  canvas.appendChild(y);\n\n  const z = origin.cloneNode(true);\n  z.attr({\n    z: 100,\n  });\n  z.childNodes[0].style.text = 'z';\n  z.childNodes[0].style.z = 100;\n  canvas.appendChild(z);\n\n  const xAxis = new Line({\n    style: {\n      x1: 200,\n      y1: 200,\n      z1: 0,\n      x2: 300,\n      y2: 200,\n      z2: 0,\n      stroke: 'black',\n      lineWidth: 2,\n      isBillboard: true,\n      isSizeAttenuation: true,\n    },\n  });\n  canvas.appendChild(xAxis);\n\n  const yAxis = new Line({\n    style: {\n      x1: 200,\n      y1: 200,\n      z1: 0,\n      x2: 200,\n      y2: 100,\n      z2: 0,\n      stroke: 'black',\n      lineWidth: 2,\n      isBillboard: true,\n      isSizeAttenuation: true,\n    },\n  });\n  canvas.appendChild(yAxis);\n\n  const zAxis = new Line({\n    style: {\n      x1: 200,\n      y1: 200,\n      z1: 0,\n      x2: 200,\n      y2: 200,\n      z2: 100,\n      stroke: 'black',\n      lineWidth: 2,\n      isBillboard: true,\n      isSizeAttenuation: true,\n    },\n  });\n  canvas.appendChild(zAxis);\n\n  const path = new Path({\n    style: {\n      path: [\n        ['M', 57.06339097770921, -18.541019662496844],\n        ['L', 13.225168176580645, -18.202882373436317],\n        ['L', 3.67394039744206e-15, -60],\n        ['L', -13.225168176580643, -18.202882373436317],\n        ['L', -57.06339097770921, -18.54101966249685],\n        ['L', -21.398771616640953, 6.952882373436324],\n        ['L', -35.267115137548394, 48.54101966249684],\n        ['L', -4.133182947122317e-15, 22.5],\n        ['L', 35.26711513754837, 48.54101966249685],\n        ['L', 21.398771616640953, 6.952882373436322],\n        ['Z'],\n      ],\n      stroke: '#1890FF',\n      lineWidth: 10,\n      lineCap: 'round',\n      lineJoin: 'round',\n      isBillboard: true,\n      isSizeAttenuation: true,\n      cursor: 'pointer',\n    },\n  });\n  path.translate(100, 100, 0);\n  canvas.appendChild(path);\n\n  const polyline3D = new Polyline({\n    style: {\n      stroke: '#1890FF',\n      lineWidth: 10,\n      lineCap: 'round',\n      lineJoin: 'round',\n      points: [\n        [50, 50, 0],\n        [100, 50, 100],\n        [100, 100, 0],\n        [150, 100, 100],\n        [150, 150, 0],\n        [200, 150, 0],\n        [200, 200, 0],\n        [250, 200, 0],\n      ],\n      cursor: 'pointer',\n      isBillboard: true,\n      isSizeAttenuation: true,\n    },\n  });\n  polyline3D.translate(0, 200);\n  canvas.appendChild(polyline3D);\n\n  const polyline2D = new Polyline({\n    style: {\n      stroke: '#1890FF',\n      lineWidth: 10,\n      lineCap: 'round',\n      lineJoin: 'round',\n      points: [\n        [50, 50],\n        [100, 50],\n        [100, 100],\n        [150, 100],\n        [150, 150],\n        [200, 150],\n        [200, 200],\n        [250, 200],\n      ],\n      cursor: 'pointer',\n      isBillboard: true,\n      isSizeAttenuation: true,\n    },\n  });\n  polyline2D.translate(200, 200);\n  canvas.appendChild(polyline2D);\n\n  // add a directional light into scene\n  const light = new DirectionalLight({\n    style: {\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n\n  // adjust camera's position\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.01, 1000, 75, 1);\n  camera.setType(CameraType.ORBITING);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const textFolder = gui.addFolder('text');\n  const textConfig = {\n    isBillboard: true,\n    isSizeAttenuation: true,\n  };\n  const imageFolder = gui.addFolder('image');\n  const imageConfig = {\n    isBillboard: true,\n    isSizeAttenuation: true,\n  };\n  const pathFolder = gui.addFolder('path');\n  const pathConfig = {\n    isBillboard: true,\n    isSizeAttenuation: true,\n  };\n  const polyline2DFolder = gui.addFolder('polyline2D');\n  const polyline2DConfig = {\n    isBillboard: true,\n    isSizeAttenuation: true,\n  };\n  const polyline3DFolder = gui.addFolder('polyline3D');\n  const polyline3DConfig = {\n    isBillboard: true,\n    isSizeAttenuation: true,\n  };\n\n  textFolder.add(textConfig, 'isBillboard').onChange((isBillboard) => {\n    canvas.document.querySelectorAll('text').forEach((text) => {\n      text.style.isBillboard = isBillboard;\n    });\n  });\n  textFolder\n    .add(textConfig, 'isSizeAttenuation')\n    .onChange((isSizeAttenuation) => {\n      canvas.document.querySelectorAll('text').forEach((text) => {\n        text.style.isSizeAttenuation = isSizeAttenuation;\n      });\n    });\n\n  imageFolder.add(imageConfig, 'isBillboard').onChange((isBillboard) => {\n    canvas.document.querySelectorAll('image').forEach((image) => {\n      image.style.isBillboard = isBillboard;\n    });\n  });\n  imageFolder\n    .add(imageConfig, 'isSizeAttenuation')\n    .onChange((isSizeAttenuation) => {\n      canvas.document.querySelectorAll('image').forEach((image) => {\n        image.style.isSizeAttenuation = isSizeAttenuation;\n      });\n    });\n\n  pathFolder.add(pathConfig, 'isBillboard').onChange((isBillboard) => {\n    canvas.document.querySelectorAll('path').forEach((path) => {\n      path.style.isBillboard = isBillboard;\n    });\n  });\n  pathFolder\n    .add(pathConfig, 'isSizeAttenuation')\n    .onChange((isSizeAttenuation) => {\n      canvas.document.querySelectorAll('path').forEach((path) => {\n        path.style.isSizeAttenuation = isSizeAttenuation;\n      });\n    });\n\n  polyline2DFolder\n    .add(polyline2DConfig, 'isBillboard')\n    .onChange((isBillboard) => {\n      polyline2D.style.isBillboard = isBillboard;\n    });\n  polyline2DFolder\n    .add(polyline2DConfig, 'isSizeAttenuation')\n    .onChange((isSizeAttenuation) => {\n      polyline2D.style.isSizeAttenuation = isSizeAttenuation;\n    });\n\n  polyline3DFolder\n    .add(polyline3DConfig, 'isBillboard')\n    .onChange((isBillboard) => {\n      polyline3D.style.isBillboard = isBillboard;\n    });\n  polyline3DFolder\n    .add(polyline3DConfig, 'isSizeAttenuation')\n    .onChange((isSizeAttenuation) => {\n      polyline3D.style.isSizeAttenuation = isSizeAttenuation;\n    });\n})();\n",title:{zh:"开启大小衰减",en:"Enable size attenuation"},filename:"size-attenuation.js",isNew:!1},{id:"webgpu",source:"import {\n  Canvas,\n  CanvasEvent,\n  Circle,\n  Ellipse,\n  Rect,\n  Image,\n  Line,\n  Path,\n} from '@antv/g';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\n\nimport Stats from 'stats.js';\n\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 500,\n  height: 500,\n  renderer: webgpuRenderer,\n  // background: 'gray',\n});\n\nconst circle = new Circle({\n  style: {\n    cx: 100,\n    cy: 100,\n    r: 50,\n    fill: 'green',\n    cursor: 'pointer',\n  },\n});\n\nconst ellipse = new Ellipse({\n  style: {\n    cx: 200,\n    cy: 100,\n    rx: 100,\n    ry: 50,\n    fill: 'red',\n  },\n});\n\nconst rect = new Rect({\n  style: {\n    x: 300,\n    y: 100,\n    width: 100,\n    height: 50,\n    fill: 'blue',\n    stroke: 'yellow',\n    lineWidth: 2,\n  },\n});\n\nconst line = new Line({\n  style: {\n    x1: 200,\n    y1: 100,\n    x2: 400,\n    y2: 100,\n    stroke: '#1890FF',\n    lineWidth: 2,\n  },\n});\n\nconst path = new Path({\n  style: {\n    transform: 'translate(200, 100) scale(10)',\n    d: 'M2 4C0.8954304997175604 3.9999999991219815 -1.3527075029566811e-16 4.895430499717561 0 6C0 6 0 9.9375 0 12C1.3527075029566811e-16 13.10456950028244 0.8954304997175604 14.00000000087802 2 14C8 14 10.25 14 14 14C15.104569499040734 13.99999999912198 16 13.104569499040734 16 12C16 9 16 7.875 16 6C16 4.895430500959266 15.104569499040734 4.0000000008780185 14 4C13.414 4 13.194249999999998 4 12.828 4C12.297610373455704 3.9998867247945213 11.788985462367364 3.7890987493850155 11.414 3.414C11 3 10.84475 2.8447500000000003 10.586 2.5860000000000003C10.211014537632636 2.210901250614985 9.702389626544296 2.0001132752054787 9.172 2.0000000000000004C8 2.0000000000000004 7.560500000000001 2.0000000000000004 6.828000000000001 2.0000000000000004C6.297610373455706 2.0001132752054787 5.788985462367367 2.210901250614985 5.4140000000000015 2.5860000000000003C5.000000000000002 3 4.844750000000001 3.1552499999999997 4.586000000000001 3.414C4.211014537632636 3.7890987493850155 3.7023896265442966 3.9998867247945213 3.1720000000000015 4C2.5860000000000016 4 2.3662500000000017 4 2.0000000000000018 4C2.000000000000001 4 2.000000000000001 4 2 4M10.5 8.5C10.5 6.575499102701247 8.416666666666666 5.372686041889527 6.75 6.334936490538903C5.976497308103742 6.781518477924107 5.5 7.606836025229591 5.5 8.5C5.5 10.424500897298753 7.583333333333334 11.627313958110474 9.25 10.665063509461097C10.023502691896258 10.218481522075892 10.5 9.39316397477041 10.5 8.5C10.5 8.5 10.5 8.5 10.5 8.5M2.5 6C2.1150998205402494 6.000000000305956 1.874537208444147 5.583333333830511 2.0669872979090567 5.2500000003442C2.1563036954051213 5.095299461648009 2.321367204761929 4.999999999858005 2.5 5C2.8849001794597506 5.000000000305956 3.125462791688336 5.416666667163845 2.933012701693495 5.7500000003442C2.8436963042354777 5.904700538406512 2.6786327946700927 5.999999999858005 2.5 6C2.5 6 2.5 6 2.5 6M11.5 8.5C11.5 11.194301256218253 8.583333333333334 12.878239541354663 6.250000000000001 11.531088913245537C5.167096231345241 10.90587413090625 4.5 9.750429564678573 4.5 8.5C4.5 5.805698743781747 7.416666666666667 4.121760458645338 9.75 5.468911086754464C10.832903768654761 6.094125869093751 11.5 7.249570435321427 11.5 8.5C11.5 8.5 11.5 8.5 11.5 8.5',\n    lineWidth: 1,\n    lineJoin: 'round',\n    stroke: '#54BECC',\n    cursor: 'pointer',\n  },\n});\n\nconst image = new Image({\n  style: {\n    x: 200,\n    y: 200,\n    z: 0,\n    width: 200,\n    height: 200,\n    src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(circle);\n  canvas.appendChild(ellipse);\n  canvas.appendChild(rect);\n  canvas.appendChild(line);\n  canvas.appendChild(path);\n  canvas.appendChild(image);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n",title:{zh:"WebGPU",en:"WebGPU"},filename:"webgpu.js",isNew:!1}],icon:"",id:"3d-basic",title:{en:"More cases",zh:"其它案例"},api:null,childrenKey:"demos",order:20}],childrenKey:"examples"},{id:"ecosystem",title:{zh:"生态",en:"Ecosystem"},examples:[{demos:[{id:"d3-piechart",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*Wq7wSK_0p3AAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as d3 from 'd3';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * inspired by sprite.js\n * @see http://spritejs.com/#/en/guide/d3\n *\n * ported from fullstack-d3\n * @see https://codesandbox.io/s/z375662r0p?file=/src/index.js\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst data = [38024.7, 209484.6, 6201.2, 17741.9, 24377.7];\nconst total = d3.sum(data);\nconst colors = 'blue red maroon gray orange'.split(' ');\nconst width = 600;\nconst sectorArc = d3\n  .arc()\n  .innerRadius(width / 8)\n  .outerRadius(width / 5);\nconst tweens = [\n  function (sectorData) {\n    const currentPath = this.getAttribute('d');\n    return d3.interpolate(currentPath, sectorArc(sectorData));\n  },\n  function (sectorData) {\n    const interpolator = d3.interpolate(this._current, sectorData);\n    this._current = interpolator(0);\n    return (t) => sectorArc(interpolator(t));\n  },\n];\nlet svg;\n\nfunction drawCharts(data) {\n  const pieData = d3.pie().sort(null)(data);\n  const sectors = svg.selectAll('path').data(pieData);\n\n  sectors\n    .enter()\n    .append('path')\n    .attr('fill', (_, i) => colors[i])\n    .attr('d', sectorArc)\n    .property('_current', (d) => d);\n\n  sectors.transition().duration(1000).attrTween('d', tweens[1]);\n}\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const wrapper = d3.select(\n    canvas.document.documentElement, // use GCanvas' document element instead of a real DOM\n  );\n\n  const bounds = wrapper\n    .append('g')\n    .style('transform', `translate(${width / 2}px, ${width / 2}px)`);\n  svg = bounds.append('g');\n\n  drawCharts(data);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.on('afterrender', () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nlet isEven = false;\nconst animationFolder = gui.addFolder('animation');\nconst animationConfig = {\n  swapData: () => {\n    isEven = !isEven;\n    drawCharts(isEven ? [...data].fill(total / data.length) : data);\n  },\n};\nanimationFolder.add(animationConfig, 'swapData');\nanimationFolder.open();\n",title:{zh:"替换 D3 渲染层 - 饼图",en:"D3's Piechart"},filename:"d3-piechart.js",isNew:!1},{id:"d3-barchart",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*h6vDS6eRVFoAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as d3 from 'd3';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * inspired by sprite.js\n * @see http://spritejs.com/#/en/guide/d3\n *\n * ported from fullstack-d3\n * @see https://codesandbox.io/s/vllpx?file=/chart.js\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst drawBars = async () => {\n  // 1. Access data\n  const dataset = await d3.json(\n    'https://gw.alipayobjects.com/os/bmw-prod/8e7cfeb6-28e5-4e78-8d16-c08468360f5f.json',\n  );\n  const metricAccessor = (d) => d.humidity;\n  const yAccessor = (d) => d.length;\n\n  // 2. Create chart dimensions\n  const width = 600;\n  let dimensions = {\n    width: width,\n    height: width * 0.6,\n    margin: {\n      top: 30,\n      right: 10,\n      bottom: 50,\n      left: 50,\n    },\n  };\n  dimensions.boundedWidth =\n    dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  dimensions.boundedHeight =\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n\n  // 3. Draw canvas\n  const wrapper = d3.select(\n    canvas.document.documentElement, // use GCanvas' document element instead of a real DOM\n  );\n\n  const bounds = wrapper\n    .append('g')\n    .style(\n      'transform',\n      `translate(${dimensions.margin.left}px, ${dimensions.margin.top}px)`,\n    );\n\n  // 4. Create scales\n\n  const xScale = d3\n    .scaleLinear()\n    .domain(d3.extent(dataset, metricAccessor))\n    .range([0, dimensions.boundedWidth])\n    .nice();\n\n  const binsGenerator = d3\n    .bin()\n    .domain(xScale.domain())\n    .value(metricAccessor)\n    .thresholds(12);\n\n  const bins = binsGenerator(dataset);\n\n  const yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(bins, yAccessor)])\n    .range([dimensions.boundedHeight, 0])\n    .nice();\n\n  // 5. Draw data\n  const binsGroup = bounds.append('g');\n  const binGroups = binsGroup\n    .selectAll('g')\n    .data(bins)\n    .join('g')\n    .attr('class', 'bin');\n\n  const barPadding = 1;\n  const barRects = binGroups\n    .append('rect')\n    .attr('x', (d) => xScale(d.x0) + barPadding / 2)\n    .attr('y', (d) => yScale(yAccessor(d)))\n    .attr('width', (d) => d3.max([0, xScale(d.x1) - xScale(d.x0) - barPadding]))\n    .attr('height', (d) => dimensions.boundedHeight - yScale(yAccessor(d)))\n    .attr('fill', 'cornflowerblue')\n    .on('mouseenter', function (e) {\n      d3.select(e.target).attr('fill', 'red');\n    })\n    .on('mouseleave', function (e) {\n      d3.select(e.target).attr('fill', 'cornflowerblue');\n    });\n\n  const barText = binGroups\n    .filter(yAccessor)\n    .append('text')\n    .attr('x', (d) => xScale(d.x0) + (xScale(d.x1) - xScale(d.x0)) / 2)\n    .attr('y', (d) => yScale(yAccessor(d)) - 5)\n    .text(yAccessor)\n    .attr('fill', 'darkgrey')\n    .style('text-anchor', 'middle')\n    .style('font-size', '12px')\n    .style('font-family', 'sans-serif');\n\n  const mean = d3.mean(dataset, metricAccessor);\n  const meanLine = bounds\n    .append('line')\n    .attr('x1', xScale(mean))\n    .attr('x2', xScale(mean))\n    .attr('y1', -15)\n    .attr('y2', dimensions.boundedHeight)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'maroon')\n    .attr('stroke-dasharray', '2px 4px');\n\n  const meanLabel = bounds\n    .append('text')\n    .attr('x', xScale(mean))\n    .attr('y', -20)\n    .text('mean')\n    .attr('fill', 'maroon')\n    .style('font-size', '12px')\n    .style('text-anchor', 'middle');\n\n  // 6. Draw peripherals\n  const xAxisGenerator = d3.axisBottom().scale(xScale);\n\n  const xAxis = bounds\n    .append('g')\n    .call(xAxisGenerator)\n    .attr('transform', `translateY(${dimensions.boundedHeight}px)`)\n    .attr('fill', 'black');\n\n  const xAxisLabel = xAxis\n    .append('text')\n    .attr('x', dimensions.boundedWidth / 2)\n    .attr('y', dimensions.margin.bottom - 10)\n    .attr('fill', 'black')\n    .style('font-size', '10px')\n    .text('Humidity')\n    .style('text-transform', 'capitalize');\n};\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  drawBars();\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"替换 D3 渲染层 - 柱状图",en:"Takeover D3's rendering layer"},filename:"d3-barchart.js",isNew:!1},{id:"d3-linechart",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*j50URoC5hSMAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as d3 from 'd3';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * inspired by sprite.js\n * @see http://spritejs.com/#/en/guide/d3\n *\n * ported from fullstack-d3\n * @see https://codesandbox.io/s/30io6?file=/chart.js\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst drawLineChart = async () => {\n  // 1. Access data\n  const data = await d3.json(\n    'https://gw.alipayobjects.com/os/bmw-prod/8e7cfeb6-28e5-4e78-8d16-c08468360f5f.json',\n  );\n  const parseDate = d3.timeParse('%Y-%m-%d');\n  //define x axis with xAccessor, wrape with parseDate from above\n  const xAccessor = (d) => parseDate(d['date']);\n  const yAccessor = (d) => d['temperatureMax'];\n\n  // 2. Create chart dimensions\n  const width = 600;\n  let dimensions = {\n    width: width,\n    height: width * 0.6,\n    margin: {\n      top: 30,\n      right: 10,\n      bottom: 50,\n      left: 50,\n    },\n  };\n  dimensions.boundedWidth =\n    dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  dimensions.boundedHeight =\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n\n  // 3. Draw canvas\n  const container = d3\n    .select(\n      canvas.document.documentElement, // use GCanvas' document element instead of a real DOM\n    )\n    .append('g')\n    .attr('x', dimensions.margin.left)\n    .attr('y', dimensions.margin.top);\n\n  // 4. Create scales\n\n  const yScale = d3\n    .scaleLinear()\n    //domain is the min and max input value, range is min and max output\n    //domain should be the smallest and largest numbers our y axis will need to handle — in this case the lowest and highest max temperature in our dataset.\n    // could define ourselves with .domain([0, 100])\n    //better to use d3.extent, which will figure if out for us\n    //needs two parameters, the data and the yAccessor (temp max)\n    .domain(d3.extent(data, yAccessor))\n    //range, in this case, should be min and max on xaxis. Can use boundedHeight to stay within margins\n    .range([dimensions.boundedHeight, 0]);\n\n  //Draw a rectangle covering all temps below freezing.\n  //define scale - 32 degrees\n  const freezingTemperaturePlacement = yScale(32);\n  //create the rectangle with x,y, width and height\n  const freezingTemperatures = container\n    .append('rect')\n    .attr('x', 0)\n    .attr('width', dimensions.boundedWidth)\n    .attr('y', freezingTemperaturePlacement)\n    .attr('height', dimensions.boundedHeight - freezingTemperaturePlacement)\n    .attr('fill', '#e0f3f3');\n\n  const xScale = d3\n    .scaleTime()\n    .domain(d3.extent(data, xAccessor))\n    .range([0, dimensions.boundedWidth]);\n\n  // 5. Draw data\n\n  //We transform our data point with both the accessor function and the scale to get the scaled value in pixel space.\n\n  const lineGenerator = d3\n    .line()\n    .x((d) => xScale(xAccessor(d)))\n    .y((d) => yScale(yAccessor(d)));\n\n  //Now add the path element to the points\n  // Will be filled by default. Use styles to add a stroke\n  const line = container\n    .append('path')\n    .attr('d', lineGenerator(data))\n    .attr('fill', 'none')\n    .attr('stroke', '#af9358')\n    .attr('stroke-width', 2);\n\n  // 6. Draw Axis\n\n  const yAxisGenerator = d3.axisLeft().scale(yScale);\n\n  const yAxis = container.append('g').call(yAxisGenerator);\n\n  const xAxisGenerator = d3.axisBottom().scale(xScale);\n\n  const xAxis = container\n    .append('g')\n    .call(xAxisGenerator)\n    .style('transform', `translateY(${dimensions.boundedHeight}px)`);\n};\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  drawLineChart();\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"替换 D3 渲染层 - 折线图",en:"D3's Linechart"},filename:"d3-linechart.js",isNew:!1},{id:"d3-scatterplot",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*JTbHSYrWlYQAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as d3 from 'd3';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * use D3's data-driven syntax & G's rendering, ported from fullstack-d3\n * @see https://codesandbox.io/s/ruu4q?file=/chart.js\n *\n * inspired by sprite.js\n * @see http://spritejs.com/#/en/guide/d3\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 600,\n  renderer: canvasRenderer,\n});\n\nconst drawScatter = async () => {\n  // 1. Access data\n  const dataset = await d3.json(\n    'https://gw.alipayobjects.com/os/bmw-prod/8e7cfeb6-28e5-4e78-8d16-c08468360f5f.json',\n  );\n  const xAccessor = (d) => d.dewPoint;\n  const yAccessor = (d) => d.humidity;\n  const colorAccessor = (d) => d.cloudCover;\n\n  // 2. Create chart dimensions\n  const width = 600;\n  let dimensions = {\n    width: width,\n    height: width,\n    margin: {\n      top: 10,\n      right: 10,\n      bottom: 50,\n      left: 50,\n    },\n  };\n  dimensions.boundedWidth =\n    dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  dimensions.boundedHeight =\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n\n  // 3. Draw canvas\n  const bounds = d3\n    .select(\n      canvas.document.documentElement, // use GCanvas' document element instead of a real DOM\n    )\n    .append('g')\n    .attr('x', dimensions.margin.left)\n    .attr('y', dimensions.margin.top);\n\n  // 4. Create scales\n\n  const xScale = d3\n    .scaleLinear()\n    .domain(d3.extent(dataset, xAccessor))\n    .range([0, dimensions.boundedWidth])\n    .nice();\n\n  const yScale = d3\n    .scaleLinear()\n    .domain(d3.extent(dataset, yAccessor))\n    .range([dimensions.boundedHeight, 0])\n    .nice();\n\n  const colorScale = d3\n    .scaleLinear()\n    .domain(d3.extent(dataset, colorAccessor))\n    .range(['skyblue', 'darkslategrey']);\n\n  // 5. Draw data\n\n  const dots = bounds.selectAll('circle').data(dataset);\n\n  dots\n    .join('circle')\n    .attr('cx', (d) => xScale(xAccessor(d)))\n    .attr('cy', (d) => yScale(yAccessor(d)))\n    .attr('r', 5)\n    .attr('fill', (d) => colorScale(colorAccessor(d)));\n\n  // 6. Draw Preipherals - x axis and y axis\n\n  //create a variable for xaxis and define it\n  const xAxisGenerator = d3.axisBottom().scale(xScale);\n\n  //add to the bounds\n  const xAxis = bounds\n    .append('g')\n    .call(xAxisGenerator)\n    //move to the bottom of the screen\n    .style('transform', `translateY(${dimensions.boundedHeight}px)`);\n\n  const xAxisLabel = xAxis\n    .append('text')\n    .attr('x', dimensions.boundedWidth / 2)\n    .attr('y', dimensions.margin.bottom - 10)\n    .attr('fill', 'black')\n    .style('font-size', '1.4em')\n    .html('Dew point (&deg;F)');\n\n  //same thing with the y axis\n  const yAxisGenerator = d3\n    .axisLeft()\n    .scale(yScale)\n    //define the number of ticks that you want\n    .ticks(4);\n\n  const yAxis = bounds.append('g').call(yAxisGenerator);\n\n  const yAxisLabel = yAxis\n    .append('text')\n    //using negative dimensions so we can rotate below with transform\n    .attr('x', -dimensions.boundedHeight / 2)\n    .attr('y', -dimensions.margin.left + 10)\n    .style('fill', 'black')\n    .text('Relative Humidity')\n    .style('transform', 'rotate(-90deg)')\n    .style('font-size', '1.4em')\n    .style('text-anchor', 'middle');\n};\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  drawScatter();\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\n\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"替换 D3 渲染层 - 散点图",en:"D3's Scatterplot"},filename:"d3-scatterplot.js",isNew:!1},{id:"d3-force-directed-graph",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*PovRRJtsBMIAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin as PluginCSSSelect } from '@antv/g-plugin-css-select';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as d3 from 'd3';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * ported from https://observablehq.com/@d3/force-directed-graph\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\nconst cssSelectPlugin = new PluginCSSSelect();\n\ncanvasRenderer.registerPlugin(cssSelectPlugin);\nwebglRenderer.registerPlugin(cssSelectPlugin);\nwebgpuRenderer.registerPlugin(cssSelectPlugin);\ncanvaskitRenderer.registerPlugin(cssSelectPlugin);\nsvgRenderer.registerPlugin(cssSelectPlugin);\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 600,\n  renderer: canvasRenderer,\n});\n\n// Copyright 2021 Observable, Inc.\n// Released under the ISC license.\n// https://observablehq.com/@d3/force-directed-graph\nfunction ForceGraph(\n  {\n    nodes, // an iterable of node objects (typically [{id}, …])\n    links, // an iterable of link objects (typically [{source, target}, …])\n  },\n  {\n    nodeId = (d) => d.id, // given d in nodes, returns a unique identifier (string)\n    nodeGroup, // given d in nodes, returns an (ordinal) value for color\n    nodeGroups, // an array of ordinal values representing the node groups\n    nodeTitle, // given d in nodes, a title string\n    nodeFill = 'currentColor', // node stroke fill (if not using a group color encoding)\n    nodeStroke = '#fff', // node stroke color\n    nodeStrokeWidth = 1.5, // node stroke width, in pixels\n    nodeStrokeOpacity = 1, // node stroke opacity\n    nodeRadius = 5, // node radius, in pixels\n    nodeStrength,\n    linkSource = ({ source }) => source, // given d in links, returns a node identifier string\n    linkTarget = ({ target }) => target, // given d in links, returns a node identifier string\n    linkStroke = '#999', // link stroke color\n    linkStrokeOpacity = 0.6, // link stroke opacity\n    linkStrokeWidth = 1.5, // given d in links, returns a stroke width in pixels\n    linkStrokeLinecap = 'round', // link stroke linecap\n    linkStrength,\n    colors = d3.schemeTableau10, // an array of color strings, for the node groups\n    width = 640, // outer width, in pixels\n    height = 400, // outer height, in pixels\n    invalidation, // when this promise resolves, stop the simulation\n  } = {},\n) {\n  // Compute values.\n  const N = d3.map(nodes, nodeId).map(intern);\n  const LS = d3.map(links, linkSource).map(intern);\n  const LT = d3.map(links, linkTarget).map(intern);\n  if (nodeTitle === undefined) nodeTitle = (_, i) => N[i];\n  const T = nodeTitle == null ? null : d3.map(nodes, nodeTitle);\n  const G = nodeGroup == null ? null : d3.map(nodes, nodeGroup).map(intern);\n  const W =\n    typeof linkStrokeWidth !== 'function'\n      ? null\n      : d3.map(links, linkStrokeWidth);\n  const L = typeof linkStroke !== 'function' ? null : d3.map(links, linkStroke);\n\n  // Replace the input nodes and links with mutable objects for the simulation.\n  nodes = d3.map(nodes, (_, i) => ({ id: N[i] }));\n  links = d3.map(links, (_, i) => ({ source: LS[i], target: LT[i] }));\n\n  // Compute default domains.\n  if (G && nodeGroups === undefined) nodeGroups = d3.sort(G);\n\n  // Construct the scales.\n  const color = nodeGroup == null ? null : d3.scaleOrdinal(nodeGroups, colors);\n\n  // Construct the forces.\n  const forceNode = d3.forceManyBody();\n  const forceLink = d3.forceLink(links).id(({ index: i }) => N[i]);\n  if (nodeStrength !== undefined) forceNode.strength(nodeStrength);\n  if (linkStrength !== undefined) forceLink.strength(linkStrength);\n\n  const simulation = d3\n    .forceSimulation(nodes)\n    .force('link', forceLink)\n    .force('charge', forceNode)\n    .force('center', d3.forceCenter())\n    .on('tick', ticked);\n\n  const wrapper = d3.select(\n    canvas.document.documentElement, // use GCanvas' document element instead of a real DOM\n  );\n\n  const svg = wrapper\n    .append('g')\n    .style('transform', `translate(${width / 2}px, ${height / 2}px)`);\n\n  // const svg = d3\n  //   .create('svg')\n  //   .attr('width', width)\n  //   .attr('height', height)\n  //   .attr('viewBox', [-width / 2, -height / 2, width, height])\n  //   .attr('style', 'max-width: 100%; height: auto; height: intrinsic;');\n\n  const link = svg\n    .append('g')\n    .attr('stroke', typeof linkStroke !== 'function' ? linkStroke : null)\n    .attr('stroke-opacity', linkStrokeOpacity)\n    .attr(\n      'stroke-width',\n      typeof linkStrokeWidth !== 'function' ? linkStrokeWidth : null,\n    )\n    .attr('stroke-linecap', linkStrokeLinecap)\n    .selectAll('line')\n    .data(links)\n    .join('line');\n\n  const node = svg\n    .append('g')\n    .attr('fill', nodeFill)\n    .attr('stroke', nodeStroke)\n    .attr('stroke-opacity', nodeStrokeOpacity)\n    .attr('stroke-width', nodeStrokeWidth)\n    .selectAll('circle')\n    .data(nodes)\n    .join('circle')\n    .attr('r', nodeRadius)\n    .call(drag(simulation));\n\n  if (W) link.attr('stroke-width', ({ index: i }) => W[i]);\n  if (L) link.attr('stroke', ({ index: i }) => L[i]);\n  if (G) node.attr('fill', ({ index: i }) => color(G[i]));\n  if (T) node.append('title').text(({ index: i }) => T[i]);\n  if (invalidation != null) invalidation.then(() => simulation.stop());\n\n  function intern(value) {\n    return value !== null && typeof value === 'object'\n      ? value.valueOf()\n      : value;\n  }\n\n  function ticked() {\n    link\n      .attr('x1', (d) => d.source.x)\n      .attr('y1', (d) => d.source.y)\n      .attr('x2', (d) => d.target.x)\n      .attr('y2', (d) => d.target.y);\n\n    node.attr('cx', (d) => d.x).attr('cy', (d) => d.y);\n  }\n\n  function drag(simulation) {\n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n\n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n\n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n\n    return d3\n      .drag()\n      .on('start', dragstarted)\n      .on('drag', dragged)\n      .on('end', dragended);\n  }\n\n  return Object.assign(svg.node(), { scales: { color } });\n}\n\nconst miserables = {\n  nodes: [\n    { id: 'Myriel', group: 1 },\n    { id: 'Napoleon', group: 1 },\n    { id: 'Mlle.Baptistine', group: 1 },\n    { id: 'Mme.Magloire', group: 1 },\n    { id: 'CountessdeLo', group: 1 },\n    { id: 'Geborand', group: 1 },\n    { id: 'Champtercier', group: 1 },\n    { id: 'Cravatte', group: 1 },\n    { id: 'Count', group: 1 },\n    { id: 'OldMan', group: 1 },\n    { id: 'Labarre', group: 2 },\n    { id: 'Valjean', group: 2 },\n    { id: 'Marguerite', group: 3 },\n    { id: 'Mme.deR', group: 2 },\n    { id: 'Isabeau', group: 2 },\n    { id: 'Gervais', group: 2 },\n    { id: 'Tholomyes', group: 3 },\n    { id: 'Listolier', group: 3 },\n    { id: 'Fameuil', group: 3 },\n    { id: 'Blacheville', group: 3 },\n    { id: 'Favourite', group: 3 },\n    { id: 'Dahlia', group: 3 },\n    { id: 'Zephine', group: 3 },\n    { id: 'Fantine', group: 3 },\n    { id: 'Mme.Thenardier', group: 4 },\n    { id: 'Thenardier', group: 4 },\n    { id: 'Cosette', group: 5 },\n    { id: 'Javert', group: 4 },\n    { id: 'Fauchelevent', group: 0 },\n    { id: 'Bamatabois', group: 2 },\n    { id: 'Perpetue', group: 3 },\n    { id: 'Simplice', group: 2 },\n    { id: 'Scaufflaire', group: 2 },\n    { id: 'Woman1', group: 2 },\n    { id: 'Judge', group: 2 },\n    { id: 'Champmathieu', group: 2 },\n    { id: 'Brevet', group: 2 },\n    { id: 'Chenildieu', group: 2 },\n    { id: 'Cochepaille', group: 2 },\n    { id: 'Pontmercy', group: 4 },\n    { id: 'Boulatruelle', group: 6 },\n    { id: 'Eponine', group: 4 },\n    { id: 'Anzelma', group: 4 },\n    { id: 'Woman2', group: 5 },\n    { id: 'MotherInnocent', group: 0 },\n    { id: 'Gribier', group: 0 },\n    { id: 'Jondrette', group: 7 },\n    { id: 'Mme.Burgon', group: 7 },\n    { id: 'Gavroche', group: 8 },\n    { id: 'Gillenormand', group: 5 },\n    { id: 'Magnon', group: 5 },\n    { id: 'Mlle.Gillenormand', group: 5 },\n    { id: 'Mme.Pontmercy', group: 5 },\n    { id: 'Mlle.Vaubois', group: 5 },\n    { id: 'Lt.Gillenormand', group: 5 },\n    { id: 'Marius', group: 8 },\n    { id: 'BaronessT', group: 5 },\n    { id: 'Mabeuf', group: 8 },\n    { id: 'Enjolras', group: 8 },\n    { id: 'Combeferre', group: 8 },\n    { id: 'Prouvaire', group: 8 },\n    { id: 'Feuilly', group: 8 },\n    { id: 'Courfeyrac', group: 8 },\n    { id: 'Bahorel', group: 8 },\n    { id: 'Bossuet', group: 8 },\n    { id: 'Joly', group: 8 },\n    { id: 'Grantaire', group: 8 },\n    { id: 'MotherPlutarch', group: 9 },\n    { id: 'Gueulemer', group: 4 },\n    { id: 'Babet', group: 4 },\n    { id: 'Claquesous', group: 4 },\n    { id: 'Montparnasse', group: 4 },\n    { id: 'Toussaint', group: 5 },\n    { id: 'Child1', group: 10 },\n    { id: 'Child2', group: 10 },\n    { id: 'Brujon', group: 4 },\n    { id: 'Mme.Hucheloup', group: 8 },\n  ],\n  links: [\n    { source: 'Napoleon', target: 'Myriel', value: 1 },\n    { source: 'Mlle.Baptistine', target: 'Myriel', value: 8 },\n    { source: 'Mme.Magloire', target: 'Myriel', value: 10 },\n    { source: 'Mme.Magloire', target: 'Mlle.Baptistine', value: 6 },\n    { source: 'CountessdeLo', target: 'Myriel', value: 1 },\n    { source: 'Geborand', target: 'Myriel', value: 1 },\n    { source: 'Champtercier', target: 'Myriel', value: 1 },\n    { source: 'Cravatte', target: 'Myriel', value: 1 },\n    { source: 'Count', target: 'Myriel', value: 2 },\n    { source: 'OldMan', target: 'Myriel', value: 1 },\n    { source: 'Valjean', target: 'Labarre', value: 1 },\n    { source: 'Valjean', target: 'Mme.Magloire', value: 3 },\n    { source: 'Valjean', target: 'Mlle.Baptistine', value: 3 },\n    { source: 'Valjean', target: 'Myriel', value: 5 },\n    { source: 'Marguerite', target: 'Valjean', value: 1 },\n    { source: 'Mme.deR', target: 'Valjean', value: 1 },\n    { source: 'Isabeau', target: 'Valjean', value: 1 },\n    { source: 'Gervais', target: 'Valjean', value: 1 },\n    { source: 'Listolier', target: 'Tholomyes', value: 4 },\n    { source: 'Fameuil', target: 'Tholomyes', value: 4 },\n    { source: 'Fameuil', target: 'Listolier', value: 4 },\n    { source: 'Blacheville', target: 'Tholomyes', value: 4 },\n    { source: 'Blacheville', target: 'Listolier', value: 4 },\n    { source: 'Blacheville', target: 'Fameuil', value: 4 },\n    { source: 'Favourite', target: 'Tholomyes', value: 3 },\n    { source: 'Favourite', target: 'Listolier', value: 3 },\n    { source: 'Favourite', target: 'Fameuil', value: 3 },\n    { source: 'Favourite', target: 'Blacheville', value: 4 },\n    { source: 'Dahlia', target: 'Tholomyes', value: 3 },\n    { source: 'Dahlia', target: 'Listolier', value: 3 },\n    { source: 'Dahlia', target: 'Fameuil', value: 3 },\n    { source: 'Dahlia', target: 'Blacheville', value: 3 },\n    { source: 'Dahlia', target: 'Favourite', value: 5 },\n    { source: 'Zephine', target: 'Tholomyes', value: 3 },\n    { source: 'Zephine', target: 'Listolier', value: 3 },\n    { source: 'Zephine', target: 'Fameuil', value: 3 },\n    { source: 'Zephine', target: 'Blacheville', value: 3 },\n    { source: 'Zephine', target: 'Favourite', value: 4 },\n    { source: 'Zephine', target: 'Dahlia', value: 4 },\n    { source: 'Fantine', target: 'Tholomyes', value: 3 },\n    { source: 'Fantine', target: 'Listolier', value: 3 },\n    { source: 'Fantine', target: 'Fameuil', value: 3 },\n    { source: 'Fantine', target: 'Blacheville', value: 3 },\n    { source: 'Fantine', target: 'Favourite', value: 4 },\n    { source: 'Fantine', target: 'Dahlia', value: 4 },\n    { source: 'Fantine', target: 'Zephine', value: 4 },\n    { source: 'Fantine', target: 'Marguerite', value: 2 },\n    { source: 'Fantine', target: 'Valjean', value: 9 },\n    { source: 'Mme.Thenardier', target: 'Fantine', value: 2 },\n    { source: 'Mme.Thenardier', target: 'Valjean', value: 7 },\n    { source: 'Thenardier', target: 'Mme.Thenardier', value: 13 },\n    { source: 'Thenardier', target: 'Fantine', value: 1 },\n    { source: 'Thenardier', target: 'Valjean', value: 12 },\n    { source: 'Cosette', target: 'Mme.Thenardier', value: 4 },\n    { source: 'Cosette', target: 'Valjean', value: 31 },\n    { source: 'Cosette', target: 'Tholomyes', value: 1 },\n    { source: 'Cosette', target: 'Thenardier', value: 1 },\n    { source: 'Javert', target: 'Valjean', value: 17 },\n    { source: 'Javert', target: 'Fantine', value: 5 },\n    { source: 'Javert', target: 'Thenardier', value: 5 },\n    { source: 'Javert', target: 'Mme.Thenardier', value: 1 },\n    { source: 'Javert', target: 'Cosette', value: 1 },\n    { source: 'Fauchelevent', target: 'Valjean', value: 8 },\n    { source: 'Fauchelevent', target: 'Javert', value: 1 },\n    { source: 'Bamatabois', target: 'Fantine', value: 1 },\n    { source: 'Bamatabois', target: 'Javert', value: 1 },\n    { source: 'Bamatabois', target: 'Valjean', value: 2 },\n    { source: 'Perpetue', target: 'Fantine', value: 1 },\n    { source: 'Simplice', target: 'Perpetue', value: 2 },\n    { source: 'Simplice', target: 'Valjean', value: 3 },\n    { source: 'Simplice', target: 'Fantine', value: 2 },\n    { source: 'Simplice', target: 'Javert', value: 1 },\n    { source: 'Scaufflaire', target: 'Valjean', value: 1 },\n    { source: 'Woman1', target: 'Valjean', value: 2 },\n    { source: 'Woman1', target: 'Javert', value: 1 },\n    { source: 'Judge', target: 'Valjean', value: 3 },\n    { source: 'Judge', target: 'Bamatabois', value: 2 },\n    { source: 'Champmathieu', target: 'Valjean', value: 3 },\n    { source: 'Champmathieu', target: 'Judge', value: 3 },\n    { source: 'Champmathieu', target: 'Bamatabois', value: 2 },\n    { source: 'Brevet', target: 'Judge', value: 2 },\n    { source: 'Brevet', target: 'Champmathieu', value: 2 },\n    { source: 'Brevet', target: 'Valjean', value: 2 },\n    { source: 'Brevet', target: 'Bamatabois', value: 1 },\n    { source: 'Chenildieu', target: 'Judge', value: 2 },\n    { source: 'Chenildieu', target: 'Champmathieu', value: 2 },\n    { source: 'Chenildieu', target: 'Brevet', value: 2 },\n    { source: 'Chenildieu', target: 'Valjean', value: 2 },\n    { source: 'Chenildieu', target: 'Bamatabois', value: 1 },\n    { source: 'Cochepaille', target: 'Judge', value: 2 },\n    { source: 'Cochepaille', target: 'Champmathieu', value: 2 },\n    { source: 'Cochepaille', target: 'Brevet', value: 2 },\n    { source: 'Cochepaille', target: 'Chenildieu', value: 2 },\n    { source: 'Cochepaille', target: 'Valjean', value: 2 },\n    { source: 'Cochepaille', target: 'Bamatabois', value: 1 },\n    { source: 'Pontmercy', target: 'Thenardier', value: 1 },\n    { source: 'Boulatruelle', target: 'Thenardier', value: 1 },\n    { source: 'Eponine', target: 'Mme.Thenardier', value: 2 },\n    { source: 'Eponine', target: 'Thenardier', value: 3 },\n    { source: 'Anzelma', target: 'Eponine', value: 2 },\n    { source: 'Anzelma', target: 'Thenardier', value: 2 },\n    { source: 'Anzelma', target: 'Mme.Thenardier', value: 1 },\n    { source: 'Woman2', target: 'Valjean', value: 3 },\n    { source: 'Woman2', target: 'Cosette', value: 1 },\n    { source: 'Woman2', target: 'Javert', value: 1 },\n    { source: 'MotherInnocent', target: 'Fauchelevent', value: 3 },\n    { source: 'MotherInnocent', target: 'Valjean', value: 1 },\n    { source: 'Gribier', target: 'Fauchelevent', value: 2 },\n    { source: 'Mme.Burgon', target: 'Jondrette', value: 1 },\n    { source: 'Gavroche', target: 'Mme.Burgon', value: 2 },\n    { source: 'Gavroche', target: 'Thenardier', value: 1 },\n    { source: 'Gavroche', target: 'Javert', value: 1 },\n    { source: 'Gavroche', target: 'Valjean', value: 1 },\n    { source: 'Gillenormand', target: 'Cosette', value: 3 },\n    { source: 'Gillenormand', target: 'Valjean', value: 2 },\n    { source: 'Magnon', target: 'Gillenormand', value: 1 },\n    { source: 'Magnon', target: 'Mme.Thenardier', value: 1 },\n    { source: 'Mlle.Gillenormand', target: 'Gillenormand', value: 9 },\n    { source: 'Mlle.Gillenormand', target: 'Cosette', value: 2 },\n    { source: 'Mlle.Gillenormand', target: 'Valjean', value: 2 },\n    { source: 'Mme.Pontmercy', target: 'Mlle.Gillenormand', value: 1 },\n    { source: 'Mme.Pontmercy', target: 'Pontmercy', value: 1 },\n    { source: 'Mlle.Vaubois', target: 'Mlle.Gillenormand', value: 1 },\n    { source: 'Lt.Gillenormand', target: 'Mlle.Gillenormand', value: 2 },\n    { source: 'Lt.Gillenormand', target: 'Gillenormand', value: 1 },\n    { source: 'Lt.Gillenormand', target: 'Cosette', value: 1 },\n    { source: 'Marius', target: 'Mlle.Gillenormand', value: 6 },\n    { source: 'Marius', target: 'Gillenormand', value: 12 },\n    { source: 'Marius', target: 'Pontmercy', value: 1 },\n    { source: 'Marius', target: 'Lt.Gillenormand', value: 1 },\n    { source: 'Marius', target: 'Cosette', value: 21 },\n    { source: 'Marius', target: 'Valjean', value: 19 },\n    { source: 'Marius', target: 'Tholomyes', value: 1 },\n    { source: 'Marius', target: 'Thenardier', value: 2 },\n    { source: 'Marius', target: 'Eponine', value: 5 },\n    { source: 'Marius', target: 'Gavroche', value: 4 },\n    { source: 'BaronessT', target: 'Gillenormand', value: 1 },\n    { source: 'BaronessT', target: 'Marius', value: 1 },\n    { source: 'Mabeuf', target: 'Marius', value: 1 },\n    { source: 'Mabeuf', target: 'Eponine', value: 1 },\n    { source: 'Mabeuf', target: 'Gavroche', value: 1 },\n    { source: 'Enjolras', target: 'Marius', value: 7 },\n    { source: 'Enjolras', target: 'Gavroche', value: 7 },\n    { source: 'Enjolras', target: 'Javert', value: 6 },\n    { source: 'Enjolras', target: 'Mabeuf', value: 1 },\n    { source: 'Enjolras', target: 'Valjean', value: 4 },\n    { source: 'Combeferre', target: 'Enjolras', value: 15 },\n    { source: 'Combeferre', target: 'Marius', value: 5 },\n    { source: 'Combeferre', target: 'Gavroche', value: 6 },\n    { source: 'Combeferre', target: 'Mabeuf', value: 2 },\n    { source: 'Prouvaire', target: 'Gavroche', value: 1 },\n    { source: 'Prouvaire', target: 'Enjolras', value: 4 },\n    { source: 'Prouvaire', target: 'Combeferre', value: 2 },\n    { source: 'Feuilly', target: 'Gavroche', value: 2 },\n    { source: 'Feuilly', target: 'Enjolras', value: 6 },\n    { source: 'Feuilly', target: 'Prouvaire', value: 2 },\n    { source: 'Feuilly', target: 'Combeferre', value: 5 },\n    { source: 'Feuilly', target: 'Mabeuf', value: 1 },\n    { source: 'Feuilly', target: 'Marius', value: 1 },\n    { source: 'Courfeyrac', target: 'Marius', value: 9 },\n    { source: 'Courfeyrac', target: 'Enjolras', value: 17 },\n    { source: 'Courfeyrac', target: 'Combeferre', value: 13 },\n    { source: 'Courfeyrac', target: 'Gavroche', value: 7 },\n    { source: 'Courfeyrac', target: 'Mabeuf', value: 2 },\n    { source: 'Courfeyrac', target: 'Eponine', value: 1 },\n    { source: 'Courfeyrac', target: 'Feuilly', value: 6 },\n    { source: 'Courfeyrac', target: 'Prouvaire', value: 3 },\n    { source: 'Bahorel', target: 'Combeferre', value: 5 },\n    { source: 'Bahorel', target: 'Gavroche', value: 5 },\n    { source: 'Bahorel', target: 'Courfeyrac', value: 6 },\n    { source: 'Bahorel', target: 'Mabeuf', value: 2 },\n    { source: 'Bahorel', target: 'Enjolras', value: 4 },\n    { source: 'Bahorel', target: 'Feuilly', value: 3 },\n    { source: 'Bahorel', target: 'Prouvaire', value: 2 },\n    { source: 'Bahorel', target: 'Marius', value: 1 },\n    { source: 'Bossuet', target: 'Marius', value: 5 },\n    { source: 'Bossuet', target: 'Courfeyrac', value: 12 },\n    { source: 'Bossuet', target: 'Gavroche', value: 5 },\n    { source: 'Bossuet', target: 'Bahorel', value: 4 },\n    { source: 'Bossuet', target: 'Enjolras', value: 10 },\n    { source: 'Bossuet', target: 'Feuilly', value: 6 },\n    { source: 'Bossuet', target: 'Prouvaire', value: 2 },\n    { source: 'Bossuet', target: 'Combeferre', value: 9 },\n    { source: 'Bossuet', target: 'Mabeuf', value: 1 },\n    { source: 'Bossuet', target: 'Valjean', value: 1 },\n    { source: 'Joly', target: 'Bahorel', value: 5 },\n    { source: 'Joly', target: 'Bossuet', value: 7 },\n    { source: 'Joly', target: 'Gavroche', value: 3 },\n    { source: 'Joly', target: 'Courfeyrac', value: 5 },\n    { source: 'Joly', target: 'Enjolras', value: 5 },\n    { source: 'Joly', target: 'Feuilly', value: 5 },\n    { source: 'Joly', target: 'Prouvaire', value: 2 },\n    { source: 'Joly', target: 'Combeferre', value: 5 },\n    { source: 'Joly', target: 'Mabeuf', value: 1 },\n    { source: 'Joly', target: 'Marius', value: 2 },\n    { source: 'Grantaire', target: 'Bossuet', value: 3 },\n    { source: 'Grantaire', target: 'Enjolras', value: 3 },\n    { source: 'Grantaire', target: 'Combeferre', value: 1 },\n    { source: 'Grantaire', target: 'Courfeyrac', value: 2 },\n    { source: 'Grantaire', target: 'Joly', value: 2 },\n    { source: 'Grantaire', target: 'Gavroche', value: 1 },\n    { source: 'Grantaire', target: 'Bahorel', value: 1 },\n    { source: 'Grantaire', target: 'Feuilly', value: 1 },\n    { source: 'Grantaire', target: 'Prouvaire', value: 1 },\n    { source: 'MotherPlutarch', target: 'Mabeuf', value: 3 },\n    { source: 'Gueulemer', target: 'Thenardier', value: 5 },\n    { source: 'Gueulemer', target: 'Valjean', value: 1 },\n    { source: 'Gueulemer', target: 'Mme.Thenardier', value: 1 },\n    { source: 'Gueulemer', target: 'Javert', value: 1 },\n    { source: 'Gueulemer', target: 'Gavroche', value: 1 },\n    { source: 'Gueulemer', target: 'Eponine', value: 1 },\n    { source: 'Babet', target: 'Thenardier', value: 6 },\n    { source: 'Babet', target: 'Gueulemer', value: 6 },\n    { source: 'Babet', target: 'Valjean', value: 1 },\n    { source: 'Babet', target: 'Mme.Thenardier', value: 1 },\n    { source: 'Babet', target: 'Javert', value: 2 },\n    { source: 'Babet', target: 'Gavroche', value: 1 },\n    { source: 'Babet', target: 'Eponine', value: 1 },\n    { source: 'Claquesous', target: 'Thenardier', value: 4 },\n    { source: 'Claquesous', target: 'Babet', value: 4 },\n    { source: 'Claquesous', target: 'Gueulemer', value: 4 },\n    { source: 'Claquesous', target: 'Valjean', value: 1 },\n    { source: 'Claquesous', target: 'Mme.Thenardier', value: 1 },\n    { source: 'Claquesous', target: 'Javert', value: 1 },\n    { source: 'Claquesous', target: 'Eponine', value: 1 },\n    { source: 'Claquesous', target: 'Enjolras', value: 1 },\n    { source: 'Montparnasse', target: 'Javert', value: 1 },\n    { source: 'Montparnasse', target: 'Babet', value: 2 },\n    { source: 'Montparnasse', target: 'Gueulemer', value: 2 },\n    { source: 'Montparnasse', target: 'Claquesous', value: 2 },\n    { source: 'Montparnasse', target: 'Valjean', value: 1 },\n    { source: 'Montparnasse', target: 'Gavroche', value: 1 },\n    { source: 'Montparnasse', target: 'Eponine', value: 1 },\n    { source: 'Montparnasse', target: 'Thenardier', value: 1 },\n    { source: 'Toussaint', target: 'Cosette', value: 2 },\n    { source: 'Toussaint', target: 'Javert', value: 1 },\n    { source: 'Toussaint', target: 'Valjean', value: 1 },\n    { source: 'Child1', target: 'Gavroche', value: 2 },\n    { source: 'Child2', target: 'Gavroche', value: 2 },\n    { source: 'Child2', target: 'Child1', value: 3 },\n    { source: 'Brujon', target: 'Babet', value: 3 },\n    { source: 'Brujon', target: 'Gueulemer', value: 3 },\n    { source: 'Brujon', target: 'Thenardier', value: 3 },\n    { source: 'Brujon', target: 'Gavroche', value: 1 },\n    { source: 'Brujon', target: 'Eponine', value: 1 },\n    { source: 'Brujon', target: 'Claquesous', value: 1 },\n    { source: 'Brujon', target: 'Montparnasse', value: 1 },\n    { source: 'Mme.Hucheloup', target: 'Bossuet', value: 1 },\n    { source: 'Mme.Hucheloup', target: 'Joly', value: 1 },\n    { source: 'Mme.Hucheloup', target: 'Grantaire', value: 1 },\n    { source: 'Mme.Hucheloup', target: 'Bahorel', value: 1 },\n    { source: 'Mme.Hucheloup', target: 'Courfeyrac', value: 1 },\n    { source: 'Mme.Hucheloup', target: 'Gavroche', value: 1 },\n    { source: 'Mme.Hucheloup', target: 'Enjolras', value: 1 },\n  ],\n};\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const chart = ForceGraph(miserables, {\n    nodeId: (d) => d.id,\n    nodeGroup: (d) => d.group,\n    nodeTitle: (d) => `${d.id}\\n${d.group}`,\n    linkStroke: () => '#999',\n    linkStrokeWidth: (l) => Math.sqrt(l.value),\n    width: 600,\n    height: 600,\n    invalidation: null, // a promise to stop the simulation when the cell is re-run\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"D3 力导",en:"D3's ForceDirectedGraph"},filename:"d3-force-directed-graph.js",isNew:!1},{id:"d3-geo",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*cG62RqGKMXsAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin as PluginRoughCanvasRenderer } from '@antv/g-plugin-rough-canvas-renderer';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as d3 from 'd3';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport * as topojson from 'topojson';\nimport versor from 'versor';\n\n/**\n * @see https://observablehq.com/@d3/sketchy-earth?collection=@d3/d3-geo\n */\n\nfunction curveContext(curve) {\n  return {\n    moveTo(x, y) {\n      curve.lineStart();\n      curve.point(x, y);\n    },\n    lineTo(x, y) {\n      curve.point(x, y);\n    },\n    closePath() {\n      curve.lineEnd();\n    },\n  };\n}\n\nfunction geoCurvePath(curve, projection, context) {\n  return (object) => {\n    const pathContext = context === undefined ? d3.path() : context;\n    d3.geoPath(projection, curveContext(curve(pathContext)))(object);\n    return context === undefined ? pathContext + '' : undefined;\n  };\n}\n\nfunction zoom(\n  projection,\n  {\n    // Capture the projection’s original scale, before any zooming.\n    scale = projection._scale === undefined\n      ? (projection._scale = projection.scale())\n      : projection._scale,\n    scaleExtent = [0.8, 8],\n  } = {},\n) {\n  let v0, q0, r0, a0, tl;\n\n  const zoom = d3\n    .zoom()\n    .scaleExtent(scaleExtent.map((x) => x * scale))\n    .on('start', zoomstarted)\n    .on('zoom', zoomed);\n\n  function point(event, that) {\n    const t = d3.pointers(event, that);\n\n    if (t.length !== tl) {\n      tl = t.length;\n      if (tl > 1) a0 = Math.atan2(t[1][1] - t[0][1], t[1][0] - t[0][0]);\n      zoomstarted.call(that, event);\n    }\n\n    return tl > 1\n      ? [\n          d3.mean(t, (p) => p[0]),\n          d3.mean(t, (p) => p[1]),\n          Math.atan2(t[1][1] - t[0][1], t[1][0] - t[0][0]),\n        ]\n      : t[0];\n  }\n\n  function zoomstarted(event) {\n    v0 = versor.cartesian(projection.invert(point(event, this)));\n    q0 = versor((r0 = projection.rotate()));\n  }\n\n  function zoomed(event) {\n    projection.scale(event.transform.k);\n    const pt = point(event, this);\n    const v1 = versor.cartesian(projection.rotate(r0).invert(pt));\n    const delta = versor.delta(v0, v1);\n    let q1 = versor.multiply(q0, delta);\n\n    // For multitouch, compose with a rotation around the axis.\n    if (pt[2]) {\n      const d = (pt[2] - a0) / 2;\n      const s = -Math.sin(d);\n      const c = Math.sign(Math.cos(d));\n      q1 = versor.multiply([Math.sqrt(1 - s * s), 0, 0, c * s], q1);\n    }\n\n    projection.rotate(versor.rotation(q1));\n\n    // In vicinity of the antipode (unstable) of q0, restart.\n    if (delta[0] < 0.7) zoomstarted.call(this, event);\n  }\n\n  return Object.assign(\n    (selection) =>\n      selection\n        .property('__zoom', d3.zoomIdentity.scale(projection.scale()))\n        .call(zoom),\n    {\n      on(type, ...options) {\n        return options.length\n          ? (zoom.on(type, ...options), this)\n          : zoom.on(type);\n      },\n    },\n  );\n}\n\n(async () => {\n  let world = await d3.json(\n    'https://gw.alipayobjects.com/os/bmw-prod/d518b501-e0f9-48e0-996f-f6662c04a439.json',\n  );\n\n  const width = 500;\n  const curve = d3.curveBasisClosed;\n  const projection = d3.geoOrthographic().precision(0.1);\n  const path = geoCurvePath(curve, projection);\n  const minArea = Math.pow(10, 2 - 1);\n  const sphere = { type: 'Sphere' };\n\n  const [[x0, y0], [x1, y1]] = d3\n    .geoPath(projection.fitWidth(width, sphere))\n    .bounds(sphere);\n  const dy = Math.ceil(y1 - y0),\n    l = Math.min(Math.ceil(x1 - x0), dy);\n  projection.scale((projection.scale() * (l - 1)) / l).precision(0.2);\n  const height = dy;\n\n  let topology = world;\n  topology = topojson.presimplify(topology);\n  topology = topojson.simplify(topology, minArea);\n  const land = topojson.feature(topology, topology.objects.land);\n\n  const canvasRenderer = new CanvasRenderer();\n  // sketchy with rough.js\n  canvasRenderer.registerPlugin(new PluginRoughCanvasRenderer());\n  const svgRenderer = new SVGRenderer();\n  const webglRenderer = new WebGLRenderer();\n  const webgpuRenderer = new WebGPURenderer({\n    shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n  });\n  const canvaskitRenderer = new CanvaskitRenderer({\n    wasmDir: '/',\n    fonts: [\n      {\n        name: 'Roboto',\n        url: '/Roboto-Regular.ttf',\n      },\n      {\n        name: 'sans-serif',\n        url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n      },\n    ],\n  });\n  const canvas = new Canvas({\n    container: 'container',\n    width,\n    height,\n    renderer: canvasRenderer,\n  });\n\n  canvas.addEventListener(CanvasEvent.READY, () => {\n    const svg = d3.select(\n      canvas.document.documentElement, // use GCanvas' document element instead of a real DOM\n    );\n\n    const outline = svg\n      .append('path')\n      .attr('stroke', 'black')\n      .attr('fill', 'white');\n    const feature = svg\n      .append('path')\n      .attr('stroke', 'black')\n      .attr('fill', 'white');\n\n    function render() {\n      outline.attr('d', path(sphere));\n      feature.attr('d', path(land));\n    }\n\n    svg\n      .call(zoom(projection).on('zoom.render end.render', render))\n      .call(render);\n  });\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', [\n      'canvas',\n      'svg',\n      'webgl',\n      'webgpu',\n      'canvaskit',\n    ])\n    .onChange((rendererName) => {\n      let renderer;\n      if (rendererName === 'canvas') {\n        renderer = canvasRenderer;\n      } else if (rendererName === 'svg') {\n        renderer = svgRenderer;\n      } else if (rendererName === 'webgl') {\n        renderer = webglRenderer;\n      } else if (rendererName === 'webgpu') {\n        renderer = webgpuRenderer;\n      } else if (rendererName === 'canvaskit') {\n        renderer = canvaskitRenderer;\n      }\n      canvas.setRenderer(renderer);\n    });\n  rendererFolder.open();\n})();\n",title:{zh:"D3 Geo",en:"D3 Geo"},filename:"d3-geo.js",isNew:!1},{id:"d3-annotation",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*vrV5TbXidQwAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Plugin as PluginCSSSelect } from '@antv/g-plugin-css-select';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as d3 from 'd3';\nimport * as d3SvgAnnotation from 'd3-svg-annotation';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nObject.assign(d3, d3SvgAnnotation);\n\n/**\n * inspired by sprite.js\n * @see http://spritejs.com/#/en/guide/d3\n *\n * ported from https://d3-annotation.susielu.com/\n * @see https://bl.ocks.org/susielu/974e41473737320f8db5ae711ded8542\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\nconst cssSelectPlugin = new PluginCSSSelect();\n\ncanvasRenderer.registerPlugin(cssSelectPlugin);\nwebglRenderer.registerPlugin(cssSelectPlugin);\nsvgRenderer.registerPlugin(cssSelectPlugin);\nwebgpuRenderer.registerPlugin(cssSelectPlugin);\ncanvaskitRenderer.registerPlugin(cssSelectPlugin);\n\n// create chart dimensions\nconst margin = { top: 20, right: 20, bottom: 30, left: 50 },\n  height = 500 - margin.top - margin.bottom;\nconst maxWidth = 860 - margin.left - margin.right;\nlet width = 860 - margin.left - margin.right;\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 960,\n  height: height + margin.top + margin.bottom,\n  renderer: canvasRenderer,\n});\n\nconst drawBars = async () => {\n  const wrapper = d3.select(\n    canvas.document.documentElement, // use GCanvas' document element instead of a real DOM\n  );\n\n  const svg = wrapper\n    .append('g')\n    .style('transform', `translate(${margin.left}px, ${margin.top}px)`);\n\n  const parseTime = d3.timeParse('%d-%b-%y');\n  const x = d3.scaleTime().range([0, width]);\n  const y = d3.scaleLinear().range([height, 0]);\n\n  const valueline = d3\n    .line()\n    .x((d) => x(d.date) || 0)\n    .y((d) => y(d.close) || 0);\n\n  const data = await d3.json(\n    'https://gw.alipayobjects.com/os/bmw-prod/e5e0e405-e0b0-4585-a10d-caf6b657dc9f.json',\n  );\n\n  data.forEach(function (d) {\n    d.date = parseTime(d.date);\n    d.close = +d.close;\n  });\n\n  x.domain(d3.extent(data, (d) => d.date));\n  y.domain([0, d3.max(data, (d) => d.close)]);\n\n  svg\n    .append('path')\n    .data([data])\n    .attr('class', 'line')\n    .attr('d', valueline)\n    .style('stroke', 'black')\n    .style('stroke-width', '1px');\n\n  svg\n    .append('g')\n    .attr('class', 'x-axis')\n    .attr('transform', 'translate(0,' + height + ')')\n    .call(d3.axisBottom(x));\n\n  svg.append('g').call(d3.axisLeft(y));\n\n  //Add annotations\n  const labels = [\n    {\n      data: { date: '9-Apr-12', close: 636.23 },\n      dy: 37,\n      dx: -142,\n      subject: { text: 'C', y: 'bottom' },\n      id: 'minimize-badge',\n    },\n    {\n      data: { date: '26-Feb-08', close: 119.15 },\n      dy: -137,\n      dx: 0,\n      note: { align: 'middle' },\n      subject: { text: 'A', y: 'bottom' },\n      id: 'minimize-badge',\n    },\n    {\n      data: { date: '18-Sep-09', close: 185.02 },\n      dy: 37,\n      dx: 42,\n      subject: { text: 'B' },\n      id: 'minimize-badge',\n    },\n  ].map((l) => {\n    l.note = Object.assign({}, l.note, {\n      title: `Close: ${l.data.close}`,\n      label: `${l.data.date}`,\n    });\n    return l;\n  });\n\n  //using a separate type of annotation to control the resize functionality\n  const resize = [\n    {\n      subject: {\n        y1: 0,\n        y2: height,\n      },\n      x: width,\n      dx: 10,\n      dy: height / 2,\n      disable: ['connector'],\n      note: {\n        title: '< >',\n        label: 'drag to resize',\n        lineType: 'none',\n      },\n    },\n  ];\n\n  const timeFormat = d3.timeFormat('%d-%b-%y');\n\n  window.makeAnnotations = d3\n    .annotation()\n    .annotations(labels)\n    .type(d3.annotationCalloutElbow)\n    .accessors({ x: (d) => x(parseTime(d.date)), y: (d) => y(d.close) })\n    .accessorsInverse({\n      date: (d) => timeFormat(x.invert(d.x)),\n      close: (d) => y.invert(d.y),\n    })\n    .on('subjectover', function (annotation) {\n      //cannot reference this if you are using es6 function syntax\n      this.append('text')\n        .attr('class', 'hover')\n        .text(annotation.note.title)\n        .attr('text-anchor', 'middle')\n        .attr(\n          'y',\n          annotation.subject.y && annotation.subject.y == 'bottom' ? 50 : -40,\n        )\n        .attr('x', -15);\n\n      this.append('text')\n        .attr('class', 'hover')\n        .text(annotation.note.label)\n        .attr('text-anchor', 'middle')\n        .attr(\n          'y',\n          annotation.subject.y && annotation.subject.y == 'bottom' ? 70 : -60,\n        )\n        .attr('x', -15);\n    })\n    .on('subjectout', function (annotation) {\n      this.selectAll('text.hover').remove();\n    });\n\n  //Isn't using data for placement so accessors and accessorsInverse\n  //are not necessary\n  window.makeResize = d3\n    .annotation()\n    .annotations(resize)\n    .type(d3.annotationXYThreshold);\n\n  svg.append('g').attr('class', 'annotation-test').call(makeAnnotations);\n\n  svg.append('g').attr('class', 'annotation-resize').call(makeResize);\n\n  svg.select('.annotation.xythreshold').call(\n    d3.drag().on('drag', function (d) {\n      const newWidth = Math.max(0, Math.min(maxWidth, d.x + d.dx));\n      // d.x = newWidth;\n\n      const threshold = 400;\n      if (newWidth < threshold && width >= threshold) {\n        makeAnnotations.type(d3.annotationBadge);\n        svg.select('g.annotation-test').call(makeAnnotations);\n      } else if (newWidth > threshold && width <= threshold) {\n        makeAnnotations.type(d3.annotationCalloutElbow);\n        svg.select('g.annotation-test').call(makeAnnotations);\n      }\n\n      width = newWidth;\n\n      x.range([0, width]);\n      makeAnnotations.updatedAccessors();\n      makeResize.updatedAccessors();\n\n      svg.select('g.x-axis').call(d3.axisBottom(x));\n\n      svg.select('path.line').attr('d', valueline);\n    }),\n  );\n\n  // load font\n  // const latoFontFace = new FontFace(\n  //   'Lato',\n  //   'url(https://fonts.gstatic.com/s/lato/v22/S6u9w4BMUTPHh7USSwaPGQ3q5d0N7w.woff2)',\n  // );\n  // window.document.fonts.add(latoFontFace);\n  // latoFontFace.loaded.then((fontFace) => {\n  //   console.log(fontFace.family);\n  //   canvas.document.documentElement.style.fontFamily = 'Lato';\n  // });\n\n  var bitterFontFace = new FontFace(\n    'Lato',\n    'url(https://fonts.gstatic.com/s/lato/v22/S6u9w4BMUTPHh7USSwaPGQ3q5d0N7w.woff2)',\n  );\n  document.fonts.add(bitterFontFace);\n  bitterFontFace.loaded.then((fontFace) => {\n    console.log(fontFace.family);\n  });\n\n  document.fonts.ready.then(function () {\n    for (const c of document.fonts.values()) {\n      console.log(c);\n    }\n\n    canvas.document.documentElement.style.fontFamily = 'Lato';\n  });\n\n  // apply CSS styles\n  canvas.document.querySelectorAll('.annotation path').forEach((path) => {\n    path.style.stroke = '#E8336D';\n  });\n\n  canvas.document\n    .querySelectorAll('.annotation-note-title')\n    .forEach((title) => {\n      title.style['font-weight'] = 'bold';\n    });\n\n  const handle = canvas.document.querySelector('.annotation.xythreshold');\n  handle.style.cursor = 'move';\n  // console.log(t, svg.selectAll('.annotation path'));\n};\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  drawBars();\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"D3 标注",en:"D3's Annotation"},filename:"d3-annotation.js",isNew:!1}],icon:"",id:"d3",title:{en:"D3",zh:"D3"},api:null,childrenKey:"demos",order:100},{demos:[{id:"lottie-player-basic-shapes",source:"import { Canvas, CanvasEvent, HTML, Rectangle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { loadAnimation } from '@antv/g-lottie-player';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * @see https://lottiefiles.github.io/lottie-docs/breakdown/bouncy_ball/\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst bouncy_ball = {\n  nm: 'Bouncy Ball',\n  v: '5.5.2',\n  ip: 0,\n  op: 120,\n  fr: 60,\n  w: 512,\n  h: 512,\n  layers: [\n    {\n      ddd: 0,\n      ty: 4,\n      ind: 0,\n      st: 0,\n      ip: 0,\n      op: 120,\n      nm: 'Layer',\n      ks: {\n        a: {\n          a: 0,\n          k: [0, 0],\n        },\n        p: {\n          a: 0,\n          k: [0, 0],\n        },\n        s: {\n          a: 0,\n          k: [100, 100],\n        },\n        r: {\n          a: 0,\n          k: 0,\n        },\n        o: {\n          a: 0,\n          k: 100,\n        },\n      },\n      shapes: [\n        {\n          ty: 'gr',\n          nm: 'Ellipse Group',\n          it: [\n            {\n              ty: 'el',\n              nm: 'Ellipse',\n              p: {\n                // position\n                a: 0,\n                k: [204, 169],\n              },\n              s: {\n                // size\n                a: 0,\n                k: [153, 153],\n              },\n            },\n            {\n              ty: 'fl',\n              nm: 'Fill',\n              o: {\n                a: 0,\n                k: 100,\n              },\n              c: {\n                a: 0,\n                k: [0.71, 0.192, 0.278],\n              },\n              r: 1,\n            },\n            {\n              ty: 'tr',\n              a: {\n                // anchor\n                a: 0,\n                k: [204, 169],\n              },\n              p: {\n                a: 1,\n                k: [\n                  {\n                    t: 0,\n                    s: [235, 106],\n                    h: 0,\n                    o: {\n                      x: [0.333],\n                      y: [0],\n                    },\n                    i: {\n                      x: [1],\n                      y: [1],\n                    },\n                  },\n                  {\n                    t: 60,\n                    s: [265, 441],\n                    h: 0,\n                    o: {\n                      x: [0],\n                      y: [0],\n                    },\n                    i: {\n                      x: [0.667],\n                      y: [1],\n                    },\n                  },\n                  {\n                    t: 120,\n                    s: [235, 106],\n                  },\n                ],\n              },\n              s: {\n                a: 1,\n                k: [\n                  {\n                    t: 55,\n                    s: [100, 100],\n                    h: 0,\n                    o: {\n                      x: [0],\n                      y: [0],\n                    },\n                    i: {\n                      x: [1],\n                      y: [1],\n                    },\n                  },\n                  {\n                    t: 60,\n                    s: [136, 59],\n                    h: 0,\n                    o: {\n                      x: [0],\n                      y: [0],\n                    },\n                    i: {\n                      x: [1],\n                      y: [1],\n                    },\n                  },\n                  {\n                    t: 65,\n                    s: [100, 100],\n                  },\n                ],\n              },\n              r: {\n                // rotation\n                a: 0,\n                k: 0,\n              },\n              o: {\n                // opacity\n                a: 0,\n                k: 100,\n              },\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\n// @see https://lottiefiles.github.io/lottie-docs/shapes/#rectangle\nconst rect = {\n  v: '5.5.7',\n  ip: 0,\n  op: 180,\n  nm: 'Animation',\n  mn: '{8f1618e3-6f83-4531-8f65-07dd4b68ee2e}',\n  fr: 60,\n  w: 512,\n  h: 512,\n  assets: [],\n  layers: [\n    {\n      ddd: 0,\n      ty: 4,\n      ind: 0,\n      st: 0,\n      ip: 0,\n      op: 180,\n      nm: 'Layer',\n      mn: '{85f37d8b-1792-4a4f-82d2-1b3b6d829c07}',\n      ks: {\n        a: {\n          a: 0,\n          k: [256, 256],\n        },\n        p: {\n          a: 0,\n          k: [256, 256],\n        },\n        s: {\n          a: 0,\n          k: [100, 100],\n        },\n        r: {\n          a: 0,\n          k: 0,\n        },\n        o: {\n          a: 0,\n          k: 100,\n        },\n      },\n      shapes: [\n        {\n          ty: 'gr',\n          nm: 'Group',\n          it: [\n            {\n              ty: 'rc',\n              nm: 'Rectangle',\n              p: {\n                a: 0,\n                k: [256, 256],\n              },\n              s: {\n                a: 0,\n                k: [256, 256],\n              },\n              r: {\n                a: 0,\n                k: 0,\n              },\n            },\n            {\n              ty: 'st',\n              nm: 'Stroke',\n              mn: '{0930ce27-c8f9-4371-b0cf-111a859abfaf}',\n              o: {\n                a: 0,\n                k: 100,\n              },\n              c: {\n                a: 0,\n                k: [1, 0.9803921568627451, 0.2823529411764706],\n              },\n              lc: 2,\n              lj: 2,\n              ml: 0,\n              w: {\n                a: 0,\n                k: 30,\n              },\n            },\n            {\n              ty: 'tr',\n              a: {\n                a: 0,\n                k: [249.3134328358209, 254.47164179104476],\n              },\n              p: {\n                a: 0,\n                k: [249.3134328358209, 254.47164179104476],\n              },\n              s: {\n                a: 0,\n                k: [100, 100],\n              },\n              r: {\n                a: 0,\n                k: 0,\n              },\n              o: {\n                a: 0,\n                k: 100,\n              },\n            },\n          ],\n        },\n      ],\n    },\n  ],\n  meta: {\n    g: 'Glaxnimate 0.4.6-26-g7b05e75c',\n  },\n};\n\n// @see https://lottiefiles.github.io/lottie-docs/breakdown/bezier/#beziers-in-lottie\nconst path = {\n  v: '5.7.1',\n  ip: 0,\n  op: 180,\n  nm: 'Animation',\n  mn: '{8f1618e3-6f83-4531-8f65-07dd4b68ee2e}',\n  fr: 60,\n  w: 512,\n  h: 512,\n  layers: [\n    {\n      ty: 4,\n      ddd: 0,\n      nm: 'Layer',\n      mn: '{85f37d8b-1792-4a4f-82d2-1b3b6d829c07}',\n      ip: 0,\n      op: 180,\n      ind: 0,\n      st: 0,\n      sr: 1,\n      ks: {\n        a: {\n          a: 0,\n          k: [256, 256],\n        },\n        p: {\n          a: 0,\n          k: [256, 256],\n        },\n        s: {\n          a: 0,\n          k: [100, 100],\n        },\n        r: {\n          a: 0,\n          k: 0,\n        },\n        o: {\n          a: 0,\n          k: 100,\n        },\n      },\n      shapes: [\n        {\n          ty: 'gr',\n          nm: 'Path',\n          mn: '{9199543e-3552-4e51-a802-623f2a4a2ca1}',\n          it: [\n            {\n              ty: 'sh',\n              ks: {\n                a: 0,\n                k: {\n                  c: false,\n                  v: [\n                    [53, 325],\n                    [429, 147],\n                    [215, 430],\n                  ],\n                  i: [\n                    [0, 0],\n                    [-147, 186],\n                    [114, 36],\n                  ],\n                  o: [\n                    [89, -189],\n                    [40, 189],\n                    [0, 0],\n                  ],\n                },\n              },\n            },\n            {\n              ty: 'st',\n              nm: 'Stroke',\n              mn: '{0930ce27-c8f9-4371-b0cf-111a859abfaf}',\n              o: {\n                a: 0,\n                k: 100,\n              },\n              c: {\n                a: 0,\n                k: [1, 0.979995422293431, 0.28000305180437934],\n              },\n              lc: 2,\n              lj: 2,\n              ml: 0,\n              w: {\n                a: 0,\n                k: 30,\n              },\n            },\n            {\n              ty: 'tr',\n              a: {\n                a: 0,\n                k: [0, 0],\n              },\n              p: {\n                a: 0,\n                k: [0, 0],\n              },\n              s: {\n                a: 0,\n                k: [100, 100],\n              },\n              r: {\n                a: 0,\n                k: 0,\n              },\n              o: {\n                a: 0,\n                k: 100,\n              },\n            },\n          ],\n        },\n      ],\n    },\n  ],\n  meta: {\n    g: 'Glaxnimate 0.4.6-32-gb62899be',\n  },\n};\n\nconst gradient = {\n  v: '5.7.1',\n  ip: 0,\n  op: 180,\n  nm: 'Animation',\n  mn: '{8f1618e3-6f83-4531-8f65-07dd4b68ee2e}',\n  fr: 60,\n  w: 512,\n  h: 512,\n  layers: [\n    {\n      ty: 4,\n      ddd: 0,\n      nm: 'Layer',\n      mn: '{85f37d8b-1792-4a4f-82d2-1b3b6d829c07}',\n      ip: 0,\n      op: 180,\n      ind: 0,\n      st: 0,\n      sr: 1,\n      ks: {\n        a: {\n          a: 0,\n          k: [256, 256],\n        },\n        p: {\n          a: 0,\n          k: [256, 256],\n        },\n        s: {\n          a: 0,\n          k: [100, 100],\n        },\n        r: {\n          a: 0,\n          k: 0,\n        },\n        o: {\n          a: 0,\n          k: 100,\n        },\n      },\n      shapes: [\n        // {\n        //   ty: 'gf',\n        //   nm: 'Gradient Fill',\n        //   o: {\n        //     a: 0,\n        //     k: 100,\n        //   },\n        //   r: 1,\n        //   s: {\n        //     a: 0,\n        //     k: [256, 496],\n        //   },\n        //   e: {\n        //     a: 0,\n        //     k: [256, 16],\n        //   },\n        //   t: 2,\n        //   h: {\n        //     a: 0,\n        //     k: 0,\n        //   },\n        //   a: {\n        //     a: 0,\n        //     k: 0,\n        //   },\n        //   g: {\n        //     p: 3,\n        //     k: {\n        //       a: 0,\n        //       k: [\n        //         0, 0.7686274509803922, 0.8509803921568627, 0.9607843137254902, 0.5,\n        //         0.19600213626306554, 0.31400015259021896, 0.6899977111467155, 1,\n        //         0.16099794003204396, 0.18399328603036547, 0.45900663767452504, 0, 1, 0.5, 1, 1, 1,\n        //       ],\n        //     },\n        //   },\n        // },\n        {\n          ty: 'gr',\n          nm: 'Gradient',\n          mn: '{9df3ba96-24a3-412e-abd4-e64e2e76e6df}',\n          it: [\n            {\n              ty: 'rc',\n              nm: 'Rectangle',\n              mn: '{20934ad0-1c22-4752-a5b1-be99889ea79a}',\n              p: {\n                a: 0,\n                k: [256, 256],\n              },\n              s: {\n                a: 0,\n                k: [512, 512],\n              },\n              r: {\n                a: 0,\n                k: 0,\n              },\n            },\n            {\n              ty: 'gf',\n              nm: 'Gradient Fill',\n              o: {\n                a: 0,\n                k: 100,\n              },\n              r: 1,\n              s: {\n                a: 0,\n                k: [256, 496],\n              },\n              e: {\n                a: 0,\n                k: [256, 16],\n              },\n              t: 1,\n              h: {\n                a: 0,\n                k: 0,\n              },\n              a: {\n                a: 0,\n                k: 0,\n              },\n              g: {\n                p: 3,\n                k: {\n                  a: 0,\n                  k: [\n                    0, 0.7686274509803922, 0.8509803921568627,\n                    0.9607843137254902, 0.5, 0.19600213626306554,\n                    0.31400015259021896, 0.6899977111467155, 1,\n                    0.16099794003204396, 0.18399328603036547,\n                    0.45900663767452504, 0, 1, 0.5, 1, 1, 1,\n                  ],\n                },\n              },\n            },\n            {\n              ty: 'tr',\n              a: {\n                a: 0,\n                k: [257.4805970149254, 255.76119402985074],\n              },\n              p: {\n                a: 0,\n                k: [257.4805970149254, 255.76119402985074],\n              },\n              s: {\n                a: 0,\n                k: [100, 100],\n              },\n              r: {\n                a: 0,\n                k: 0,\n              },\n              o: {\n                a: 0,\n                k: 100,\n              },\n            },\n          ],\n        },\n      ],\n    },\n  ],\n  meta: {\n    g: 'Glaxnimate 0.4.6-32-gb62899be',\n  },\n};\n\n// const gradientAnimation = loadAnimation(gradient);\n// const rectAnimation = loadAnimation(rect);\n// const pathAnimation = loadAnimation(path);\nconst ballAnimation = loadAnimation(bouncy_ball, {\n  loop: true,\n  autoplay: true,\n});\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // gradientAnimation.render(canvas);\n  // rectAnimation.render(canvas);\n  // pathAnimation.render(canvas);\n  ballAnimation.render(canvas);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst controlFolder = gui.addFolder('control');\nconst controlConfig = {\n  pause: () => {\n    ballAnimation.pause();\n  },\n  play: () => {\n    ballAnimation.play();\n  },\n  stop: () => {\n    ballAnimation.stop();\n  },\n  speed: 1,\n  goToCurrentTime: 0,\n  goToFrame: 0,\n};\ncontrolFolder.add(controlConfig, 'play');\ncontrolFolder.add(controlConfig, 'pause');\ncontrolFolder.add(controlConfig, 'stop');\ncontrolFolder.add(controlConfig, 'speed', -3, 3).onChange((speed) => {\n  ballAnimation.setSpeed(speed);\n});\ncontrolFolder\n  .add(controlConfig, 'goToCurrentTime', 0, 2000)\n  .onChange((time) => {\n    ballAnimation.goTo(time);\n  });\ncontrolFolder.add(controlConfig, 'goToFrame', 0, 100).onChange((frame) => {\n  ballAnimation.goTo(frame, true);\n});\ncontrolFolder.open();\n",title:{zh:"Lottie 播放器 - 基础图形",en:"Lottie Player - Basic shapes"},filename:"lottie-player-basic-shapes.js",isNew:!1},{id:"lottie-player-transform",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*U_bTSJXuQMQAAAAAAAAAAAAADmJ7AQ",source:"import { Canvas, CanvasEvent, HTML, Rectangle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { loadAnimation } from '@antv/g-lottie-player';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport * as d3 from 'd3';\n\n/**\n * @see https://lottiefiles.github.io/lottie-docs/concepts/#transform\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, async () => {\n  const data = await d3.json('/lottie/transform.json');\n  const animation = loadAnimation(data, { loop: true });\n  const wrapper = animation.render(canvas);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"Lottie 播放器 - 变换",en:"Lottie Player - Transform"},filename:"lottie-player-transform.js",isNew:!1},{id:"lottie-player-assets",screenshot:"https://gw.alipayobjects.com/zos/raptor/1667977747890/A_NVmwSb89Y3kAAAAAAAAAAAAAARQnAQ.gif",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { loadAnimation } from '@antv/g-lottie-player';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport * as d3 from 'd3';\n\n/**\n * @see https://lottiefiles.github.io/lottie-docs/breakdown/bouncy_ball/\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 600,\n  renderer: canvasRenderer,\n});\n\nlet pointerAnimation;\ncanvas.addEventListener(CanvasEvent.READY, async () => {\n  const data1 = await d3.json('/lottie/data1.json');\n  const animation1 = loadAnimation(data1, { loop: true, autoplay: true });\n  const wrapper1 = animation1.render(canvas);\n  wrapper1.scale(0.5);\n\n  const data2 = await d3.json('/lottie/data4.json');\n  const animation2 = loadAnimation(data2, { loop: true, autoplay: true });\n  const wrapper2 = animation2.render(canvas);\n  wrapper2.scale(0.5);\n  wrapper2.translate(300, 0);\n\n  const data3 = await d3.json('/lottie/data3.json');\n  const animation3 = loadAnimation(data3, { loop: true, autoplay: true });\n  const wrapper3 = animation3.render(canvas);\n  wrapper3.scale(0.5);\n  wrapper3.translate(300, 200);\n\n  // const flower = await d3.json('/lottie/flower.json');\n  // flowerAnimation = loadAnimation(flower, { loop: true, autoplay: true });\n  // const wrapper = flowerAnimation.render(canvas);\n  // wrapper.scale(0.5);\n  // wrapper.translate(0, 200);\n\n  const pointer = await d3.json('/lottie/pointer.json');\n  pointerAnimation = loadAnimation(pointer, { loop: false, autoplay: false });\n  const wrapper = pointerAnimation.render(canvas);\n  wrapper.scale(0.5);\n  wrapper.translate(0, 200);\n\n  console.log(\n    pointerAnimation.fps(),\n    pointerAnimation.getDuration(false),\n    pointerAnimation.getDuration(true),\n  );\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst controlFolder = gui.addFolder('control');\nconst controlConfig = {\n  pause: () => {\n    pointerAnimation.pause();\n  },\n  play: () => {\n    pointerAnimation.play();\n  },\n  stop: () => {\n    pointerAnimation.stop();\n  },\n  speed: 1,\n  goToCurrentTime: 0,\n  goToFrame: 0,\n  playSegmentsFirstFrame: 0,\n  playSegmentsLastFrame: 0,\n};\ncontrolFolder.add(controlConfig, 'play');\ncontrolFolder.add(controlConfig, 'pause');\ncontrolFolder.add(controlConfig, 'stop');\ncontrolFolder.add(controlConfig, 'speed', -3, 3).onChange((speed) => {\n  pointerAnimation.setSpeed(speed);\n});\ncontrolFolder\n  .add(controlConfig, 'goToCurrentTime', 0, 4.04)\n  .onChange((time) => {\n    pointerAnimation.goTo(time);\n    pointerAnimation.play();\n  });\ncontrolFolder.add(controlConfig, 'goToFrame', 0, 101).onChange((frame) => {\n  pointerAnimation.goTo(frame, true);\n  pointerAnimation.play();\n});\ncontrolFolder\n  .add(controlConfig, 'playSegmentsFirstFrame', 0, 101)\n  .onChange((firstFrame) => {\n    pointerAnimation.playSegments([\n      firstFrame,\n      controlConfig.playSegmentsLastFrame,\n    ]);\n  });\ncontrolFolder\n  .add(controlConfig, 'playSegmentsLastFrame', 0, 101)\n  .onChange((lastFrame) => {\n    pointerAnimation.playSegments([\n      controlConfig.playSegmentsFirstFrame,\n      lastFrame,\n    ]);\n  });\ncontrolFolder.open();\n",title:{zh:"Lottie 播放器 - 图片资产",en:"Lottie Player - Displaying assets"},filename:"lottie-player-assets.js",isNew:!1},{id:"radar",screenshot:"https://gw.alipayobjects.com/zos/raptor/1669793623610/radar.gif",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { loadAnimation } from '@antv/g-lottie-player';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport * as d3 from 'd3';\n\n/**\n * @see https://lottiefiles.github.io/lottie-docs/concepts/#transform\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, async () => {\n  const data = await d3.json('/lottie/radar.json');\n  const animation = loadAnimation(data, { loop: true });\n  const wrapper = animation.render(canvas);\n\n  const data2 = await d3.json('/lottie/radar2.json');\n  const animation2 = loadAnimation(data2, { loop: true });\n  const wrapper2 = animation2.render(canvas);\n  wrapper2.translate(0, 200);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"雷达",en:"Radar"},filename:"radar.js",isNew:!1},{id:"ant",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { loadAnimation } from '@antv/g-lottie-player';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport * as d3 from 'd3';\n\n/**\n * @see https://lottiefiles.github.io/lottie-docs/concepts/#transform\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, async () => {\n  const data = await d3.json('/lottie/ant.json');\n  const animation = loadAnimation(data, { loop: true });\n  const wrapper = animation.render(canvas);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"蚂蚁形象",en:"Ant"},filename:"ant.js",isNew:!1},{id:"spring",screenshot:"https://mdn.alipayobjects.com/antforest/afts/img/A*RxrUQKfhT_AAAAAAAAAAAAAADrd2AQ/Dec-14-2022%2015-15-29.gif",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { loadAnimation } from '@antv/g-lottie-player';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport * as d3 from 'd3';\n\n/**\n * @see https://lottiefiles.github.io/lottie-docs/concepts/#transform\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, async () => {\n  const data = await d3.json('/lottie/spring.json');\n  const animation = loadAnimation(data, { loop: true, autoplay: true });\n  const wrapper = animation.render(canvas);\n\n  const data2 = await d3.json('/lottie/spring2.json');\n  const animation2 = loadAnimation(data2, { loop: false, autoplay: false });\n  const wrapper2 = animation2.render(canvas);\n  wrapper2.translate(150, 0);\n\n  console.log(\n    animation2.fps(),\n    animation2.getDuration(),\n    animation2.getDuration(true),\n  );\n\n  const data3 = await d3.json('/lottie/spring3.json');\n  const animation3 = loadAnimation(data3, { loop: true, autoplay: true });\n  const wrapper3 = animation3.render(canvas);\n  wrapper3.translate(250, 0);\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', [\n      'canvas',\n      'svg',\n      'webgl',\n      'webgpu',\n      'canvaskit',\n    ])\n    .onChange((rendererName) => {\n      let renderer;\n      if (rendererName === 'canvas') {\n        renderer = canvasRenderer;\n      } else if (rendererName === 'svg') {\n        renderer = svgRenderer;\n      } else if (rendererName === 'webgl') {\n        renderer = webglRenderer;\n      } else if (rendererName === 'webgpu') {\n        renderer = webgpuRenderer;\n      } else if (rendererName === 'canvaskit') {\n        renderer = canvaskitRenderer;\n      }\n      canvas.setRenderer(renderer);\n    });\n  rendererFolder.open();\n\n  const folder = gui.addFolder('playSegments');\n  const config = {\n    playSegmentsFirstFrame: 0,\n    playSegmentsLastFrame: 24,\n  };\n\n  folder.add(config, 'playSegmentsFirstFrame', 0, 24).onChange((firstFrame) => {\n    animation2.playSegments([firstFrame, config.playSegmentsLastFrame]);\n  });\n  folder.add(config, 'playSegmentsLastFrame', 0, 24).onChange((lastFrame) => {\n    animation2.playSegments([config.playSegmentsFirstFrame, lastFrame]);\n  });\n  folder.open();\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n",title:{zh:"弹簧",en:"Spring"},filename:"spring.js",isNew:!1},{id:"arrow",screenshot:"https://mdn.alipayobjects.com/antforest/afts/img/A*wi6FS4B16roAAAAAAAAAAAAADrd2AQ/Dec-14-2022%2015-16-27.gif",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { loadAnimation } from '@antv/g-lottie-player';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport * as d3 from 'd3';\n\n/**\n * @see https://lottiefiles.github.io/lottie-docs/concepts/#transform\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, async () => {\n  const data = await d3.json('/lottie/arrow.json');\n  const animation = loadAnimation(data, { loop: true, autoplay: true });\n  const wrapper = animation.render(canvas);\n  wrapper.scale(0.5);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"箭头",en:"Arrow"},filename:"arrow.js",isNew:!1},{id:"use-animations",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { loadAnimation } from '@antv/g-lottie-player';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport * as d3 from 'd3';\n\n/**\n * @see https://useanimations.com/\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, async () => {\n  const data = await d3.json('/lottie/use-animations/alert.json');\n  const animation = loadAnimation(data, { loop: true, autoplay: true });\n  const wrapper = animation.render(canvas);\n  wrapper.translate(100, 100);\n\n  const data2 = await d3.json('/lottie/use-animations/error.json');\n  const animation2 = loadAnimation(data2, { loop: true, autoplay: true });\n  const wrapper2 = animation2.render(canvas);\n  wrapper2.translate(200, 100);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"图标",en:"Icons"},filename:"use-animations.js",isNew:!1}],icon:"",id:"lottie",title:{en:"Lottie",zh:"Lottie"},api:null,childrenKey:"demos",order:100},{demos:[{id:"dot",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*EyjlTIwCrlgAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport * as Plot from '@observablehq/plot';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 640,\n  height: 400,\n  renderer: canvasRenderer,\n});\n\n(async () => {\n  const res = await fetch(\n    'https://gw.alipayobjects.com/os/bmw-prod/b8954a70-dcc7-4868-9b85-5e291ba8d5db.json',\n  );\n  const athletes = await res.json();\n\n  Plot.dot(athletes, {\n    x: 'weight',\n    y: 'height',\n    stroke: 'sex',\n  }).plot({\n    document: canvas.document,\n  });\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  // GUI\n  const gui = new lil.GUI({ autoPlace: false });\n  $wrapper.appendChild(gui.domElement);\n  const rendererFolder = gui.addFolder('renderer');\n  const rendererConfig = {\n    renderer: 'canvas',\n  };\n  rendererFolder\n    .add(rendererConfig, 'renderer', [\n      'canvas',\n      'svg',\n      'webgl',\n      'webgpu',\n      'canvaskit',\n    ])\n    .onChange((rendererName) => {\n      let renderer;\n      if (rendererName === 'canvas') {\n        renderer = canvasRenderer;\n      } else if (rendererName === 'svg') {\n        renderer = svgRenderer;\n      } else if (rendererName === 'webgl') {\n        renderer = webglRenderer;\n      } else if (rendererName === 'webgpu') {\n        renderer = webgpuRenderer;\n      } else if (rendererName === 'canvaskit') {\n        renderer = canvaskitRenderer;\n      }\n      canvas.setRenderer(renderer);\n    });\n  rendererFolder.open();\n})();\n",title:{zh:"散点图",en:"Dot Plot"},filename:"dot.js",isNew:!1},{id:"rough-dot",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*022sTZrfznEAAAAAAAAAAAAAARQnAQ",source:"import { Canvas } from '@antv/g';\nimport { Renderer } from '@antv/g-canvas';\nimport { Plugin as PluginRoughCanvasRenderer } from '@antv/g-plugin-rough-canvas-renderer';\nimport * as Plot from '@observablehq/plot';\n\n// create a renderer\nconst canvasRenderer = new Renderer();\ncanvasRenderer.registerPlugin(new PluginRoughCanvasRenderer());\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 640,\n  height: 400,\n  renderer: canvasRenderer,\n});\n\n(async () => {\n  const res = await fetch(\n    'https://gw.alipayobjects.com/os/bmw-prod/b8954a70-dcc7-4868-9b85-5e291ba8d5db.json',\n  );\n  const athletes = await res.json();\n\n  Plot.dot(athletes, {\n    x: 'weight',\n    y: 'height',\n    stroke: 'sex',\n  }).plot({\n    document: canvas.document,\n  });\n})();\n",title:{zh:"手绘风格的散点图",en:"Rough + Dot Plot"},filename:"rough-dot.js",isNew:!1}],icon:"",id:"observable-plot",title:{en:"Observable Plot",zh:"Observable Plot"},api:null,childrenKey:"demos",order:100},{demos:[{id:"web-components",source:'import \'@antv/g\';\nimport \'@antv/g-canvas\';\nimport \'@antv/g-web-components\';\n\nconst $wrapper = document.getElementById(\'container\');\n$wrapper.innerHTML = `\n<g-canvas renderer="canvas" width="400" height="400">\n  <g-rect fill="#2f54eb" radius="0 24 24" x="12" y="24" width="200" height="50">\n    <g-circle fill="#adc6ff" r="16" cx="25" cy="25"></g-circle>\n    <g-text fill="#fff" x="50" y="20">我是一段文字</g-text>\n  </g-rect>\n  <g-ellipse fill="#adc6ff" stroke="red" stroke-width="4" rx="40" ry="20" cx="280" cy="40"></g-ellipse>\n  <g-image src="https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ" x="12" y="200" width="200" height="200" transform="scale(0.5)"></g-image>\n  <g-line x1="360" y1="20" x2="360" y2="120" line-cap="round" stroke="black" stroke-width="10" stroke-dasharray="5 5"></g-line>\n  <g-path\n    transform="translate(0, 100)"\n    stroke="#2f54eb"\n    path="M 0,40 C 5.5555555555555545,40,22.222222222222218,44.44444444444445,33.33333333333333,40 C 44.444444444444436,35.55555555555556,55.55555555555554,14.66666666666667,66.66666666666666,13.333333333333336 C 77.77777777777777,12.000000000000002,88.88888888888887,32,100,32 C 111.11111111111113,32,122.22222222222221,14.66666666666667,133.33333333333331,13.333333333333336 C 144.44444444444443,12.000000000000002,155.55555555555557,24,166.66666666666669,24 C 177.7777777777778,24,188.8888888888889,11.111111111111114,200,13.333333333333336 C 211.1111111111111,15.555555555555557,222.22222222222226,35.111111111111114,233.33333333333334,37.333333333333336 C 244.44444444444443,39.55555555555555,255.55555555555551,31.22222222222223,266.66666666666663,26.66666666666667 C 277.77777777777777,22.111111111111114,294.4444444444444,12.777777777777779,300,10"\n  ></g-path>\n  <g-html x="10" y="200" width="120" height="400">\n    <div>\n      <h2>hahahah</h2>\n      <hr />\n      <p>bsdkjfbkjsadbfkjabnjfnalsjkfnkja</p>\n    </div>\n  </g-html>\n</g-canvas>\n`;\n',title:{zh:"使用 Web Components",en:"Use Web Components"},filename:"web-components.js",isNew:!1},{id:"web-components-react",source:'// @ts-nocheck\nimport { Ellipse } from \'@antv/g\';\nimport \'@antv/g-canvas\';\nimport \'@antv/g-web-components\';\nimport React, { useEffect, useRef } from \'react\';\nimport ReactDOM from \'react-dom\';\n\nfunction App() {\n  const ellipseRef = useRef(null);\n\n  useEffect(() => {\n    const ellipse = ellipseRef.current.getElementInstance() as Ellipse;\n    // ellipse.animate([{ transform: \'scale(1)\' }, { transform: \'scale(2)\' }], {\n    //   duration: 1000,\n    //   fill: \'both\',\n    //   iterations: Infinity,\n    // });\n\n    console.log(ellipse);\n\n    setTimeout(() => {\n      console.log(ellipse);\n      ellipse.style.ry = 100;\n    }, 500);\n  });\n\n  return (\n    <g-canvas renderer="canvas" width="400" height="400">\n      <g-rect\n        fill="#2f54eb"\n        radius="0 24 24"\n        x="12"\n        y="24"\n        width="200"\n        height="50"\n      >\n        <g-circle fill="#adc6ff" r="16" cx="25" cy="25" />\n        <g-text fill="#fff" x="50" y="20">\n          我是一段文字\n        </g-text>\n      </g-rect>\n      <g-ellipse\n        fill="#adc6ff"\n        stroke="red"\n        stroke-width="4"\n        rx="40"\n        ry="20"\n        cx="280"\n        cy="40"\n        ref={ellipseRef}\n      />\n      <g-image\n        src="https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ"\n        x="12"\n        y="200"\n        width="200"\n        height="200"\n        transform="scale(0.5)"\n      />\n      <g-line\n        x1="360"\n        y1="20"\n        x2="360"\n        y2="120"\n        line-cap="round"\n        stroke="black"\n        stroke-width="10"\n        stroke-dasharray="5 5"\n      />\n      <g-path\n        transform="translate(0, 100)"\n        stroke="#2f54eb"\n        path="M 0,40 C 5.5555555555555545,40,22.222222222222218,44.44444444444445,33.33333333333333,40 C 44.444444444444436,35.55555555555556,55.55555555555554,14.66666666666667,66.66666666666666,13.333333333333336 C 77.77777777777777,12.000000000000002,88.88888888888887,32,100,32 C 111.11111111111113,32,122.22222222222221,14.66666666666667,133.33333333333331,13.333333333333336 C 144.44444444444443,12.000000000000002,155.55555555555557,24,166.66666666666669,24 C 177.7777777777778,24,188.8888888888889,11.111111111111114,200,13.333333333333336 C 211.1111111111111,15.555555555555557,222.22222222222226,35.111111111111114,233.33333333333334,37.333333333333336 C 244.44444444444443,39.55555555555555,255.55555555555551,31.22222222222223,266.66666666666663,26.66666666666667 C 277.77777777777777,22.111111111111114,294.4444444444444,12.777777777777779,300,10"\n      />\n      <g-html x="10" y="200" width="120" height="400">\n        <div>\n          <h2>hahahah</h2>\n          <hr />\n          <p>bsdkjfbkjsadbfkjabnjfnalsjkfnkja</p>\n        </div>\n      </g-html>\n    </g-canvas>\n  );\n}\n\n// eslint-disable-next-line react/no-deprecated\nReactDOM.render(<App />, document.getElementById(\'container\'));\n',title:{zh:"使用 Web Components 和 React",en:"Use Web Components and React"},filename:"web-components-react.tsx",isNew:!1},{id:"react-g",source:"import { Renderer as CanvasRenderer } from '@antv/g-webgl';\nimport { Canvas, Circle } from '@antv/react-g';\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst renderer = new CanvasRenderer();\n\nconst App = () => {\n  const [size, setSize] = useState(50);\n  return (\n    <Canvas width={600} height={400} renderer={renderer}>\n      <Circle\n        cx={100}\n        cy={200}\n        r={size}\n        fill=\"#1890FF\"\n        stroke=\"#F04864\"\n        lineWidth={4}\n        onMouseenter={() => {\n          setSize(100);\n        }}\n        onMouseleave={() => {\n          setSize(50);\n        }}\n      />\n    </Canvas>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"ReactG",en:"ReactG"},filename:"react-g.js",isNew:!1},{id:"react-g-render",source:'import React, { useState, useEffect } from \'react\';\nimport ReactDOM from \'react-dom\';\nimport { Canvas as GCanvas, Group as GGroup, runtime } from \'@antv/g\';\nimport { Renderer } from \'@antv/g-canvas\';\nimport {\n  Circle,\n  Ellipse,\n  Line,\n  Polyline,\n  Path,\n  Text,\n  Rect,\n  Group,\n  render,\n} from \'@antv/react-g\';\n\nconst CustomShape = () => {\n  const [size, setSize] = useState(100);\n  return (\n    <Circle cx={100} cy={100} r={size} stroke="#ff0000" lineWidth={2}>\n      <Circle r={50} stroke="#ff0000" lineWidth={2}>\n        <Group>\n          <Group>\n            <Line\n              x1={0}\n              y1={0}\n              x2={-50}\n              y2={-50}\n              stroke="#ff0000"\n              lineWidth={2}\n            />\n          </Group>\n        </Group>\n        <Path path="M40 40 L100 40 L100 -100" stroke="green" lineWidth={2} />\n        <Polyline\n          points={[\n            [0, 0],\n            [100, 100],\n          ]}\n          stroke="blue"\n          lineWidth={2}\n        />\n        <Ellipse cx={-50} cy={-50} rx={20} ry={10} fill="red" />\n        <Rect\n          width={50}\n          height={50}\n          stroke="black"\n          lineWidth={2}\n          opacity={0.5}\n          fill="red"\n          cursor="pointer"\n          onMouseenter={() => {\n            setSize(80);\n          }}\n          onMouseleave={() => {\n            setSize(100);\n          }}\n        >\n          <Text\n            fill="black"\n            text="Hover me!"\n            fontSize={20}\n            fontFamily="PingFang SC"\n          />\n        </Rect>\n      </Circle>\n    </Circle>\n  );\n};\n\nconst App = () => {\n  useEffect(() => {\n    // runtime.enableCSSParsing = false;\n\n    const canvas = new GCanvas({\n      container: \'C\',\n      width: 500,\n      height: 500,\n      renderer: new Renderer(), // select a renderer\n    });\n\n    const group = new GGroup();\n    canvas.appendChild(group);\n\n    render(<CustomShape />, group);\n\n    console.log(group);\n  }, []);\n\n  return <div id="C"></div>;\n};\n\nReactDOM.render(<App />, document.getElementById(\'container\'));\n',title:{zh:"ReactG 渲染到任意 G 的图形",en:"ReactG render to any element from G"},filename:"react-g-render.js",isNew:!1}],icon:"",id:"declarative",title:{en:"Declarative Usage",zh:"声明式用法"},api:null,childrenKey:"demos",order:200},{demos:[{id:"image-exporter",source:"import { Canvas, CanvasEvent, HTML, Rectangle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { ImageExporter } from '@antv/g-image-exporter';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as d3 from 'd3';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * Export contents in canvas to image.\n *\n * inspired by sprite.js\n * @see http://spritejs.com/#/en/guide/d3\n *\n * ported from fullstack-d3\n * @see https://codesandbox.io/s/vllpx?file=/chart.js\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst exporter = new ImageExporter({\n  canvas,\n  defaultFilename: 'test',\n});\n\nconst drawBars = async () => {\n  // 1. Access data\n  const dataset = await d3.json(\n    'https://gw.alipayobjects.com/os/bmw-prod/8e7cfeb6-28e5-4e78-8d16-c08468360f5f.json',\n  );\n  const metricAccessor = (d) => d.humidity;\n  const yAccessor = (d) => d.length;\n\n  // 2. Create chart dimensions\n  const width = 600;\n  let dimensions = {\n    width: width,\n    height: width * 0.6,\n    margin: {\n      top: 30,\n      right: 10,\n      bottom: 50,\n      left: 50,\n    },\n  };\n  dimensions.boundedWidth =\n    dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  dimensions.boundedHeight =\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n\n  // 3. Draw canvas\n  const wrapper = d3.select(\n    canvas.document.documentElement, // use GCanvas' document element instead of a real DOM\n  );\n\n  const bounds = wrapper\n    .append('g')\n    .style(\n      'transform',\n      `translate(${dimensions.margin.left}px, ${dimensions.margin.top}px)`,\n    );\n\n  // 4. Create scales\n\n  const xScale = d3\n    .scaleLinear()\n    .domain(d3.extent(dataset, metricAccessor))\n    .range([0, dimensions.boundedWidth])\n    .nice();\n\n  const binsGenerator = d3\n    .bin()\n    .domain(xScale.domain())\n    .value(metricAccessor)\n    .thresholds(12);\n\n  const bins = binsGenerator(dataset);\n\n  const yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(bins, yAccessor)])\n    .range([dimensions.boundedHeight, 0])\n    .nice();\n\n  // 5. Draw data\n  const binsGroup = bounds.append('g');\n  const binGroups = binsGroup\n    .selectAll('g')\n    .data(bins)\n    .join('g')\n    .attr('class', 'bin');\n\n  const barPadding = 1;\n  const barRects = binGroups\n    .append('rect')\n    .attr('x', (d) => xScale(d.x0) + barPadding / 2)\n    .attr('y', (d) => yScale(yAccessor(d)))\n    .attr('width', (d) => d3.max([0, xScale(d.x1) - xScale(d.x0) - barPadding]))\n    .attr('height', (d) => dimensions.boundedHeight - yScale(yAccessor(d)))\n    .attr('fill', 'cornflowerblue')\n    .on('mouseenter', function (e) {\n      d3.select(e.target).attr('fill', 'red');\n    })\n    .on('mouseleave', function (e) {\n      d3.select(e.target).attr('fill', 'cornflowerblue');\n    });\n\n  const barText = binGroups\n    .filter(yAccessor)\n    .append('text')\n    .attr('x', (d) => xScale(d.x0) + (xScale(d.x1) - xScale(d.x0)) / 2)\n    .attr('y', (d) => yScale(yAccessor(d)) - 5)\n    .text(yAccessor)\n    .attr('fill', 'darkgrey')\n    .style('text-anchor', 'middle')\n    .style('font-size', '12px')\n    .style('font-family', 'sans-serif');\n\n  const mean = d3.mean(dataset, metricAccessor);\n  const meanLine = bounds\n    .append('line')\n    .attr('x1', xScale(mean))\n    .attr('x2', xScale(mean))\n    .attr('y1', -15)\n    .attr('y2', dimensions.boundedHeight)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'maroon')\n    .attr('stroke-dasharray', '2px 4px');\n\n  const meanLabel = bounds\n    .append('text')\n    .attr('x', xScale(mean))\n    .attr('y', -20)\n    .text('mean')\n    .attr('fill', 'maroon')\n    .style('font-size', '12px')\n    .style('text-anchor', 'middle');\n\n  // 6. Draw peripherals\n  const xAxisGenerator = d3.axisBottom().scale(xScale);\n\n  const xAxis = bounds\n    .append('g')\n    .call(xAxisGenerator)\n    .attr('transform', `translateY(${dimensions.boundedHeight}px)`)\n    .attr('fill', 'black');\n\n  const xAxisLabel = xAxis\n    .append('text')\n    .attr('x', dimensions.boundedWidth / 2)\n    .attr('y', dimensions.margin.bottom - 10)\n    .attr('fill', 'black')\n    .style('font-size', '10px')\n    .text('Humidity')\n    .style('text-transform', 'capitalize');\n};\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  drawBars();\n\n  const tooltip = new HTML({\n    style: {\n      x: 100,\n      y: 100,\n      innerHTML: 'Tooltip',\n      fill: 'white',\n      stroke: 'black',\n      lineWidth: 6,\n      width: 100,\n      height: 30,\n      pointerEvents: 'none',\n    },\n  });\n  canvas.appendChild(tooltip);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst exporterFolder = gui.addFolder('exporter');\nconst exporterConfig = {\n  clippingRegionX: 0,\n  clippingRegionY: 0,\n  clippingRegionWidth: 600,\n  clippingRegionHeight: 500,\n  enableBackgroundColor: false,\n  backgroundColor: 'none',\n  enableWatermark: false,\n  type: 'image/png',\n  encoderOptions: 1,\n  toDataURL: async () => {\n    const {\n      clippingRegionX,\n      clippingRegionY,\n      clippingRegionWidth,\n      clippingRegionHeight,\n      enableBackgroundColor,\n      backgroundColor,\n      enableWatermark,\n      type,\n      encoderOptions,\n    } = exporterConfig;\n    const canvas = await exporter.toCanvas({\n      ignoreElements: (element) => {\n        return [gui.domElement, stats.dom].indexOf(element) > -1;\n      },\n      clippingRegion: new Rectangle(\n        clippingRegionX,\n        clippingRegionY,\n        clippingRegionWidth,\n        clippingRegionHeight,\n      ),\n      beforeDrawImage: (context) => {\n        if (enableBackgroundColor) {\n          context.fillStyle = backgroundColor;\n          context.fillRect(0, 0, clippingRegionWidth, clippingRegionHeight);\n        }\n      },\n      afterDrawImage: (context) => {\n        if (enableWatermark) {\n          context.font = '24px Times New Roman';\n          context.fillStyle = '#FFC82C';\n          context.fillText('AntV', 20, 20);\n        }\n      },\n    });\n    console.log(canvas.toDataURL(type, encoderOptions));\n  },\n  downloadImage: async () => {\n    const {\n      clippingRegionX,\n      clippingRegionY,\n      clippingRegionWidth,\n      clippingRegionHeight,\n      enableBackgroundColor,\n      backgroundColor,\n      enableWatermark,\n      type,\n      encoderOptions,\n    } = exporterConfig;\n    const canvas = await exporter.toCanvas({\n      ignoreElements: (element) => {\n        return [gui.domElement, stats.dom].indexOf(element) > -1;\n      },\n      clippingRegion: new Rectangle(\n        clippingRegionX,\n        clippingRegionY,\n        clippingRegionWidth,\n        clippingRegionHeight,\n      ),\n      beforeDrawImage: (context) => {\n        if (enableBackgroundColor) {\n          context.fillStyle = backgroundColor;\n          context.fillRect(0, 0, clippingRegionWidth, clippingRegionHeight);\n        }\n      },\n      afterDrawImage: (context) => {\n        if (enableWatermark) {\n          context.font = '24px Times New Roman';\n          context.fillStyle = '#FFC82C';\n          context.fillText('AntV', 20, 20);\n        }\n      },\n    });\n    const dataURL = canvas.toDataURL(type, encoderOptions);\n    exporter.downloadImage({\n      dataURL,\n      name: 'test',\n    });\n  },\n  toSVGDataURL: async () => {\n    const svgDataURL = await exporter.toSVGDataURL();\n    if (!svgDataURL) {\n      console.log(\"Current renderer doesn't support exporting SVG.\");\n    } else {\n      console.log(svgDataURL);\n    }\n  },\n  downloadSVG: async () => {\n    const svgDataURL = await exporter.toSVGDataURL();\n    if (!svgDataURL) {\n      console.log(\"Current renderer doesn't support exporting SVG.\");\n    } else {\n      exporter.downloadImage({\n        dataURL: svgDataURL,\n        name: 'test',\n      });\n    }\n  },\n};\nexporterFolder.add(exporterConfig, 'clippingRegionX', 0, 600);\nexporterFolder.add(exporterConfig, 'clippingRegionY', 0, 500);\nexporterFolder.add(exporterConfig, 'clippingRegionWidth', 0, 600);\nexporterFolder.add(exporterConfig, 'clippingRegionHeight', 0, 500);\nexporterFolder.add(exporterConfig, 'enableBackgroundColor');\nexporterFolder.addColor(exporterConfig, 'backgroundColor');\nexporterFolder.add(exporterConfig, 'enableWatermark');\nexporterFolder.add(exporterConfig, 'type', [\n  'image/png',\n  'image/jpeg',\n  'image/webp',\n  'image/bmp',\n]);\nexporterFolder.add(exporterConfig, 'encoderOptions', 0, 1);\nexporterFolder.add(exporterConfig, 'toDataURL');\nexporterFolder.add(exporterConfig, 'downloadImage');\nexporterFolder.add(exporterConfig, 'toSVGDataURL');\nexporterFolder.add(exporterConfig, 'downloadSVG');\nexporterFolder.open();\n",title:{zh:"导出画布内容成图片",en:"Export canvas' contents to image"},filename:"image-exporter.js",isNew:!1},{id:"animated-svg",source:"import { Canvas, CanvasEvent, Circle, Text, Group } from '@antv/g';\nimport { ImageExporter } from '@antv/g-image-exporter';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nconst svgRenderer = new SVGRenderer();\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: svgRenderer,\n});\n\nconst exporter = new ImageExporter({\n  canvas,\n  defaultFilename: 'test',\n});\n\n/**\n * ported from https://github.com/wellyshen/use-web-animations/tree/master/src/animations\n */\nconst transformOrigin = 'center bottom';\nconst effects = [\n  () => ({\n    name: 'backInDown',\n    keyframes: [\n      { transform: 'translateY(-1200px) scale(0.7)', opacity: 0.7, offset: 0 },\n      { transform: 'translateY(0px) scale(0.7)', opacity: 0.7, offset: 0.8 },\n      { transform: 'translateY(0px)', opacity: 1, offset: 1 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'fadeIn',\n    keyframes: [{ opacity: 0 }, { opacity: 1 }],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'fadeInBottomLeft',\n    keyframes: [\n      { transform: 'translate3d(-100%, 100%, 0)', opacity: 0 },\n      { transform: 'translate3d(0, 0, 0)', opacity: 1 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'fadeInBottomRight',\n    keyframes: [\n      { transform: 'translate3d(100%, 100%, 0)', opacity: 0 },\n      { transform: 'translate3d(0, 0, 0)', opacity: 1 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'fadeOutTopRight',\n    keyframes: [\n      { transform: 'translate3d(0, 0, 0)', opacity: 1 },\n      { transform: 'translate3d(100%, -100%, 0)', opacity: 0 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => {\n    const easing1 = 'cubic-bezier(0.215, 0.61, 0.355, 1)';\n    const easing2 = 'cubic-bezier(0.755, 0.05, 0.855, 0.06)';\n    const frame1 = {\n      transform: 'translate3d(0, 0, 0) scaleY(1)',\n      easing: easing1,\n      transformOrigin,\n    };\n    const frame2 = {\n      transform: 'translate3d(0, -30px, 0) scaleY(1.1)',\n      easing: easing2,\n      transformOrigin,\n    };\n    return {\n      name: 'bounce',\n      keyframes: [\n        { ...frame1, offset: 0 },\n        { ...frame1, offset: 0.2 },\n        { ...frame2, offset: 0.4 },\n        { ...frame2, offset: 0.43 },\n        { ...frame1, offset: 0.53 },\n        {\n          transform: 'translate3d(0, -15px, 0) scaleY(1.05)',\n          easing: easing2,\n          transformOrigin,\n          offset: 0.7,\n        },\n        {\n          transform: 'translate3d(0, 0, 0) scaleY(0.95)',\n          easing: easing1,\n          transformOrigin,\n          offset: 0.8,\n        },\n        {\n          transform: 'translate3d(0, -4px, 0) scaleY(1.02)',\n          transformOrigin,\n          offset: 0.9,\n        },\n        { ...frame1, offset: 1 },\n      ],\n      animationOptions: { duration: 1000, fill: 'both' },\n    };\n  },\n  () => {\n    const easing = 'cubic-bezier(0.215, 0.61, 0.355, 1)';\n    return {\n      name: 'bounceIn',\n      keyframes: [\n        { transform: 'scale3d(0.3, 0.3, 0.3)', opacity: 0, easing, offset: 0 },\n        { transform: 'scale3d(1.1, 1.1, 1.1)', easing, offset: 0.2 },\n        { transform: 'scale3d(0.9, 0.9, 0.9)', easing, offset: 0.4 },\n        {\n          transform: 'scale3d(1.03, 1.03, 1.03)',\n          opacity: 1,\n          easing,\n          offset: 0.6,\n        },\n        { transform: 'scale3d(0.97, 0.97, 0.97)', easing, offset: 0.8 },\n        { transform: 'scale3d(1, 1, 1)', opacity: 1, easing, offset: 1 },\n      ],\n      animationOptions: { duration: 750, fill: 'both' },\n    };\n  },\n  () => {\n    const frame = { transform: 'scale3d(1.1, 1.1, 1.1)', opacity: 1 };\n    return {\n      name: 'bounceOut',\n      keyframes: [\n        { transform: 'none', opacity: 1, offset: 0 },\n        { transform: 'scale3d(0.9, 0.9, 0.9)', offset: 0.2 },\n        { ...frame, offset: 0.5 },\n        { ...frame, offset: 0.55 },\n        { transform: 'scale3d(0.3, 0.3, 0.3)', opacity: 0, offset: 1 },\n      ],\n      animationOptions: { duration: 750, fill: 'both' },\n    };\n  },\n  () => {\n    const frame1 = { opacity: 1 };\n    const frame2 = { opacity: 0 };\n    return {\n      name: 'flash',\n      keyframes: [\n        { ...frame1, offset: 0 },\n        { ...frame2, offset: 0.25 },\n        { ...frame1, offset: 0.5 },\n        { ...frame2, offset: 0.75 },\n        { ...frame1, offset: 1 },\n      ],\n      animationOptions: { duration: 1000, fill: 'both' },\n    };\n  },\n  () => ({\n    name: 'headShake',\n    keyframes: [\n      { transform: 'translateX(0)', offset: 0 },\n      { transform: 'translateX(-6px) rotateY(-9deg)', offset: 0.065 },\n      { transform: 'translateX(5px) rotateY(7deg)', offset: 0.185 },\n      { transform: 'translateX(-3px) rotateY(-5deg)', offset: 0.315 },\n      { transform: 'translateX(2px) rotateY(3deg)', offset: 0.435 },\n      { transform: 'translateX(0)', offset: 0.5 },\n      { transform: 'none', offset: 1 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both', easing: 'ease-in-out' },\n  }),\n  () => {\n    const frame1 = { transform: 'scale(1)' };\n    const frame2 = { transform: 'scale(1.3)' };\n    return {\n      name: 'heartBeat',\n      keyframes: [\n        { ...frame1, offset: 0 },\n        { ...frame2, offset: 0.14 },\n        { ...frame1, offset: 0.28 },\n        { ...frame2, offset: 0.42 },\n        { ...frame1, offset: 0.7 },\n        { transform: 'none', offset: 1 },\n      ],\n      animationOptions: { duration: 1300, fill: 'both', easing: 'ease-in-out' },\n    };\n  },\n  () => ({\n    name: 'swing',\n    keyframes: [\n      { transform: 'rotateZ(0deg)', transformOrigin, offset: 0 },\n      { transform: 'rotateZ(15deg)', transformOrigin, offset: 0.2 },\n      { transform: 'rotateZ(-10deg)', transformOrigin, offset: 0.4 },\n      { transform: 'rotateZ(5deg)', transformOrigin, offset: 0.6 },\n      { transform: 'rotateZ(-5deg)', transformOrigin, offset: 0.8 },\n      { transform: 'rotateZ(0deg)', transformOrigin, offset: 1 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'skewX',\n    keyframes: [\n      { transform: 'skewX(0deg)', transformOrigin, offset: 0 },\n      { transform: 'skewX(30deg)', transformOrigin, offset: 0.25 },\n      { transform: 'skewX(-30deg)', transformOrigin, offset: 0.75 },\n      { transform: 'skewX(0deg)', transformOrigin, offset: 1 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'skewY',\n    keyframes: [\n      { transform: 'skewY(0deg)', transformOrigin, offset: 0 },\n      { transform: 'skewY(30deg)', transformOrigin, offset: 0.25 },\n      { transform: 'skewY(-30deg)', transformOrigin, offset: 0.75 },\n      { transform: 'skewY(0deg)', transformOrigin, offset: 1 },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'flipX',\n    keyframes: [\n      { transform: 'scaleX(1)', transformOrigin },\n      { transform: 'scaleX(-1)', transformOrigin },\n      { transform: 'scaleX(1)', transformOrigin },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'flipY',\n    keyframes: [\n      { transform: 'scaleY(1)', transformOrigin: 'center' },\n      { transform: 'scaleY(-1)', transformOrigin: 'center' },\n      { transform: 'scaleY(1)', transformOrigin: 'center' },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n  () => ({\n    name: 'matrix interpolation',\n    keyframes: [\n      { transform: 'skewY(30deg)', transformOrigin: 'center' },\n      { transform: 'matrix(0.2,0,0,0.2,-50,0)', transformOrigin: 'center' },\n    ],\n    animationOptions: { duration: 1000, fill: 'both' },\n  }),\n];\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  effects.forEach((f, i) => {\n    const { name, keyframes, animationOptions } = f();\n    const row = Math.floor(i / 4);\n    const group = new Group();\n    const circle = new Circle({\n      style: {\n        r: 50,\n        fill: '#1890FF',\n        stroke: '#F04864',\n        lineWidth: 4,\n      },\n    });\n    const text = new Text({\n      style: {\n        text: name,\n        fontSize: 10,\n        fill: '#000',\n        textAlign: 'center',\n        textBaseline: 'middle',\n      },\n    });\n    circle.appendChild(text);\n    group.appendChild(circle);\n    canvas.appendChild(group);\n\n    group.setPosition(50 + 150 * (i % 4), 50 + 120 * row);\n\n    const animation = circle.animate(keyframes, {\n      ...animationOptions,\n      iterations: Infinity,\n    });\n    animation.pause();\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\n\nconst exporterFolder = gui.addFolder('exporter');\nconst exporterConfig = {\n  downloadSVG: async () => {\n    const svgDataURL = await exporter.toSVGDataURL();\n    if (!svgDataURL) {\n      console.log(\"Current renderer doesn't support exporting SVG.\");\n    } else {\n      exporter.downloadImage({\n        dataURL: svgDataURL,\n        name: 'test',\n      });\n    }\n  },\n};\nexporterFolder.add(exporterConfig, 'downloadSVG');\nexporterFolder.open();\n",title:{zh:"导出包含动画的 SVG",en:"Export SVG includes animation"},filename:"animated-svg.js",isNew:!1}],icon:"",id:"image-exporter",title:{en:"Image Exporter",zh:"导出图片"},api:null,childrenKey:"demos",order:300},{demos:[{id:"lite",source:"import { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Canvas, CanvasEvent } from '@antv/g-lite';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as d3 from 'd3';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * inspired by sprite.js\n * @see http://spritejs.com/#/en/guide/d3\n *\n * ported from fullstack-d3\n * @see https://codesandbox.io/s/vllpx?file=/chart.js\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst svgRenderer = new SVGRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst drawBars = async () => {\n  // 1. Access data\n  const dataset = await d3.json(\n    'https://gw.alipayobjects.com/os/bmw-prod/8e7cfeb6-28e5-4e78-8d16-c08468360f5f.json',\n  );\n  const metricAccessor = (d) => d.humidity;\n  const yAccessor = (d) => d.length;\n\n  // 2. Create chart dimensions\n  const width = 600;\n  let dimensions = {\n    width: width,\n    height: width * 0.6,\n    margin: {\n      top: 30,\n      right: 10,\n      bottom: 50,\n      left: 50,\n    },\n  };\n  dimensions.boundedWidth =\n    dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  dimensions.boundedHeight =\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n\n  // 3. Draw canvas\n  const wrapper = d3.select(\n    canvas.document.documentElement, // use GCanvas' document element instead of a real DOM\n  );\n\n  const bounds = wrapper\n    .append('g')\n    .style(\n      'transform',\n      `translate(${dimensions.margin.left}px, ${dimensions.margin.top}px)`,\n    );\n\n  // 4. Create scales\n\n  const xScale = d3\n    .scaleLinear()\n    .domain(d3.extent(dataset, metricAccessor))\n    .range([0, dimensions.boundedWidth])\n    .nice();\n\n  const binsGenerator = d3\n    .bin()\n    .domain(xScale.domain())\n    .value(metricAccessor)\n    .thresholds(12);\n\n  const bins = binsGenerator(dataset);\n\n  const yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(bins, yAccessor)])\n    .range([dimensions.boundedHeight, 0])\n    .nice();\n\n  // 5. Draw data\n  const binsGroup = bounds.append('g');\n  const binGroups = binsGroup\n    .selectAll('g')\n    .data(bins)\n    .join('g')\n    .attr('class', 'bin');\n\n  const barPadding = 1;\n  const barRects = binGroups\n    .append('rect')\n    .attr('x', (d) => xScale(d.x0) + barPadding / 2)\n    .attr('y', (d) => yScale(yAccessor(d)))\n    .attr('width', (d) => d3.max([0, xScale(d.x1) - xScale(d.x0) - barPadding]))\n    .attr('height', (d) => dimensions.boundedHeight - yScale(yAccessor(d)))\n    .attr('fill', 'cornflowerblue')\n    .on('mouseenter', function (e) {\n      d3.select(e.target).attr('fill', 'red');\n    })\n    .on('mouseleave', function (e) {\n      d3.select(e.target).attr('fill', 'cornflowerblue');\n    });\n\n  const barText = binGroups\n    .filter(yAccessor)\n    .append('text')\n    .attr('x', (d) => xScale(d.x0) + (xScale(d.x1) - xScale(d.x0)) / 2)\n    .attr('y', (d) => yScale(yAccessor(d)) - 5)\n    .text(yAccessor)\n    .attr('fill', 'darkgrey')\n    .style('text-anchor', 'middle')\n    .style('font-size', '12px')\n    .style('font-family', 'sans-serif');\n\n  const mean = d3.mean(dataset, metricAccessor);\n  const meanLine = bounds\n    .append('line')\n    .attr('x1', xScale(mean))\n    .attr('x2', xScale(mean))\n    .attr('y1', -15)\n    .attr('y2', dimensions.boundedHeight)\n    .attr('stroke-width', 1)\n    .attr('stroke', 'maroon')\n    .attr('stroke-dasharray', '2px 4px');\n\n  const meanLabel = bounds\n    .append('text')\n    .attr('x', xScale(mean))\n    .attr('y', -20)\n    .text('mean')\n    .attr('fill', 'maroon')\n    .style('font-size', '12px')\n    .style('text-anchor', 'middle');\n\n  // 6. Draw peripherals\n  const xAxisGenerator = d3.axisBottom().scale(xScale);\n\n  const xAxis = bounds\n    .append('g')\n    .call(xAxisGenerator)\n    .attr('transform', `translateY(${dimensions.boundedHeight}px)`)\n    .attr('fill', 'black');\n\n  const xAxisLabel = xAxis\n    .append('text')\n    .attr('x', dimensions.boundedWidth / 2)\n    .attr('y', dimensions.margin.bottom - 10)\n    .attr('fill', 'black')\n    .style('font-size', '10px')\n    .text('Humidity')\n    .style('text-transform', 'capitalize');\n};\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  drawBars();\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"使用轻量版",en:"Use lightweight version of G"},filename:"lite.js",isNew:!1}],icon:"",id:"lite",title:{en:"Use lightweight version",zh:"使用轻量版"},api:null,childrenKey:"demos",order:500}],childrenKey:"examples"},{id:"perf",title:{zh:"性能",en:"Performance"},examples:[{demos:[{id:"circle-zoomin",source:"import { Canvas, CanvasEvent, Circle, Text } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport Stats from 'stats.js';\n\nconst renderer = new WebGLRenderer();\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  for (let i = 0; i < 100; i++) {\n    const x = Math.random() * 600;\n    const y = Math.random() * 500;\n    canvas.appendChild(\n      new Circle({\n        attrs: {\n          fill: '#C6E5FF',\n          stroke: 'red',\n          r: 20,\n          cx: x,\n          cy: y,\n          lineWidth: 3,\n        },\n      }),\n    );\n\n    canvas.appendChild(\n      new Text({\n        attrs: {\n          text: 'ccc',\n          x,\n          y,\n          fill: '#ccc',\n          fontSize: 12,\n        },\n      }),\n    );\n  }\n});\n\nconst camera = canvas.getCamera();\ncamera.setZoom(10);\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n",title:{zh:"缩放的 Circle",en:"Zoom in Circle"},filename:"circle-zoomin.js",isNew:!1},{id:"circle-linedash",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*mu59SqFdEtUAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  for (let i = 0; i < 5000; i++) {\n    const circle = new Circle({\n      style: {\n        cx: Math.random() * 600,\n        cy: Math.random() * 500,\n        r: Math.random() * 100,\n        stroke: '#5B8FF9',\n        lineWidth: 1,\n        lineDash: i % 2 === 0 ? [10, 10] : [0],\n        fill: 'red',\n        fillOpacity: 0.5,\n      },\n    });\n    canvas.appendChild(circle);\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\nconst camera = canvas.getCamera();\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  // manipulate camera instead of the root of canvas\n  camera.rotate(0, 0, 1);\n});\n\n// update Camera's zoom\n// @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\nconst minZoom = 0;\nconst maxZoom = Infinity;\ncanvas\n  .getContextService()\n  .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n  .addEventListener(\n    'wheel',\n    (e) => {\n      e.preventDefault();\n      let zoom;\n      if (e.deltaY < 0) {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() / 0.95));\n      } else {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() * 0.95));\n      }\n      camera.setZoom(zoom);\n    },\n    { passive: false },\n  );\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'webgl',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['webgl', 'webgpu'])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"虚线描边的 Circle",en:"LineDashed Circle"},filename:"circle-linedash.js",isNew:!1},{id:"texts",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*utrOS5D0-d8AAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Text } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // Different fontSize\n  for (let i = 0; i < 50; i++) {\n    const text = new Text({\n      style: {\n        x: Math.random() * 600,\n        y: Math.random() * 500,\n        fontFamily: 'PingFang SC',\n        text: '测试文本' + i,\n        fontSize: 50 + Math.random() * 10,\n        fill: i % 2 === 0 ? '#1890FF' : 'red',\n      },\n    });\n    canvas.appendChild(text);\n  }\n\n  // Different content but with the same fontsize.\n  for (let i = 0; i < 5000; i++) {\n    const text = new Text({\n      style: {\n        x: Math.random() * 600,\n        y: Math.random() * 500,\n        fontFamily: 'PingFang SC',\n        text: '测试文本' + i,\n        fontSize: 6,\n        fill: 'green',\n      },\n    });\n    canvas.appendChild(text);\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\nconst camera = canvas.getCamera();\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  // manipulate camera instead of the root of canvas\n  camera.rotate(0, 0, 1);\n});\n\n// update Camera's zoom\n// @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\nconst minZoom = 0;\nconst maxZoom = Infinity;\ncanvas\n  .getContextService()\n  .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n  .addEventListener(\n    'wheel',\n    (e) => {\n      e.preventDefault();\n      let zoom;\n      if (e.deltaY < 0) {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() / 0.95));\n      } else {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() * 0.95));\n      }\n      camera.setZoom(zoom);\n    },\n    { passive: false },\n  );\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'webgl',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['webgl', 'webgpu'])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"大量文本",en:"Instanced Text"},filename:"texts.js",isNew:!1},{id:"rects",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*sQH_T5LdKdcAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Rect } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  for (let i = 0; i < 5000; i++) {\n    const rect = new Rect({\n      style: {\n        x: Math.random() * 600,\n        y: Math.random() * 500,\n        width: Math.random() * 100,\n        height: Math.random() * 100,\n        fill: '#C6E5FF',\n        stroke: '#5B8FF9',\n        lineWidth: 1,\n      },\n    });\n    canvas.appendChild(rect);\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\nconst camera = canvas.getCamera();\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  // manipulate camera instead of the root of canvas\n  camera.rotate(0, 0, 1);\n});\n\n// update Camera's zoom\n// @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\nconst minZoom = 0;\nconst maxZoom = Infinity;\ncanvas\n  .getContextService()\n  .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n  .addEventListener(\n    'wheel',\n    (e) => {\n      e.preventDefault();\n      let zoom;\n      if (e.deltaY < 0) {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() / 0.95));\n      } else {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() * 0.95));\n      }\n      camera.setZoom(zoom);\n    },\n    { passive: false },\n  );\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'webgl',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['webgl', 'webgpu'])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"大量矩形",en:"Instanced Rect"},filename:"rects.js",isNew:!1},{id:"rounded-rects",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*sQH_T5LdKdcAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Rect } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  for (let i = 0; i < 5000; i++) {\n    const rect = new Rect({\n      style: {\n        x: Math.random() * 600,\n        y: Math.random() * 500,\n        width: i % 2 === 0 ? 200 : 100,\n        height: 100,\n        fill: '#C6E5FF',\n        stroke: '#5B8FF9',\n        lineWidth: 1,\n        radius: [0, 4, 8, 16],\n      },\n    });\n    canvas.appendChild(rect);\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\nconst camera = canvas.getCamera();\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  // manipulate camera instead of the root of canvas\n  camera.rotate(0, 0, 1);\n});\n\n// update Camera's zoom\n// @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\nconst minZoom = 0;\nconst maxZoom = Infinity;\ncanvas\n  .getContextService()\n  .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n  .addEventListener(\n    'wheel',\n    (e) => {\n      e.preventDefault();\n      let zoom;\n      if (e.deltaY < 0) {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() / 0.95));\n      } else {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() * 0.95));\n      }\n      camera.setZoom(zoom);\n    },\n    { passive: false },\n  );\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'webgl',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['webgl', 'webgpu'])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"大量圆角矩形",en:"Instanced Rounded Rect"},filename:"rounded-rects.js",isNew:!1},{id:"lines",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*GNRuTqpp6BAAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Line } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  for (let i = 0; i < 5000; i++) {\n    const line = new Line({\n      style: {\n        x1: Math.random() * 600,\n        y1: Math.random() * 500,\n        x2: Math.random() * 600,\n        y2: Math.random() * 500,\n        stroke: '#5B8FF9',\n        lineWidth: 2,\n      },\n    });\n    canvas.appendChild(line);\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\nconst camera = canvas.getCamera();\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  // manipulate camera instead of the root of canvas\n  camera.rotate(0, 0, 1);\n});\n\n// update Camera's zoom\n// @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\nconst minZoom = 0;\nconst maxZoom = Infinity;\ncanvas\n  .getContextService()\n  .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n  .addEventListener(\n    'wheel',\n    (e) => {\n      e.preventDefault();\n      let zoom;\n      if (e.deltaY < 0) {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() / 0.95));\n      } else {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() * 0.95));\n      }\n      camera.setZoom(zoom);\n    },\n    { passive: false },\n  );\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'webgl',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['webgl', 'webgpu'])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst transformFolder = gui.addFolder('style');\nconst transformConfig = {\n  lineWidth: 2,\n  lineDash: 10,\n  lineDashOffset: 0,\n};\ntransformFolder\n  .add(transformConfig, 'lineWidth', 0, 20)\n  .onChange((lineWidth) => {\n    const lines = canvas.document.querySelectorAll('line');\n    lines.forEach((line) => {\n      line.style.lineWidth = lineWidth;\n    });\n  });\ntransformFolder.add(transformConfig, 'lineDash', 0, 50).onChange((dash) => {\n  const lines = canvas.document.querySelectorAll('line');\n  lines[0].style.lineDash = [dash, dash];\n});\ntransformFolder\n  .add(transformConfig, 'lineDashOffset', 0, 50)\n  .onChange((lineDashOffset) => {\n    const lines = canvas.document.querySelectorAll('line');\n    lines[0].style.lineDashOffset = lineDashOffset;\n  });\n",title:{zh:"大量直线",en:"Instanced Lines"},filename:"lines.js",isNew:!1},{id:"polygons",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Gmd-SZ3GwIkAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Polygon } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  for (let i = 0; i < 5000; i++) {\n    const polygon = new Polygon({\n      style: {\n        points:\n          i % 2 === 0\n            ? [\n                [200, 100],\n                [400, 100],\n                [\n                  400 + 200 * Math.sin(Math.PI / 6),\n                  100 + 200 * Math.cos(Math.PI / 6),\n                ],\n                [400, 100 + 200 * Math.cos(Math.PI / 6) * 2],\n                [200, 100 + 200 * Math.cos(Math.PI / 6) * 2],\n                [\n                  200 - 200 * Math.sin(Math.PI / 6),\n                  100 + 200 * Math.cos(Math.PI / 6),\n                ],\n              ]\n            : [\n                [200, 100],\n                [400, 100],\n                [400, 300],\n              ],\n        fill: '#C6E5FF',\n        stroke: '#5B8FF9',\n        lineWidth: 1,\n        transform: `translate(${Math.random() * 600}, ${\n          Math.random() * 500\n        }) scale(${Math.random()})`,\n      },\n    });\n    canvas.appendChild(polygon);\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\nconst camera = canvas.getCamera();\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  // manipulate camera instead of the root of canvas\n  camera.rotate(0, 0, 1);\n});\n\n// update Camera's zoom\n// @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\nconst minZoom = 0;\nconst maxZoom = Infinity;\ncanvas\n  .getContextService()\n  .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n  .addEventListener(\n    'wheel',\n    (e) => {\n      e.preventDefault();\n      let zoom;\n      if (e.deltaY < 0) {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() / 0.95));\n      } else {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() * 0.95));\n      }\n      camera.setZoom(zoom);\n    },\n    { passive: false },\n  );\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'webgl',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['webgl', 'webgpu'])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"大量多边形",en:"Instanced Polygons"},filename:"polygons.js",isNew:!1},{id:"polylines",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MQr5SYtG5OsAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Polyline } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  for (let i = 0; i < 5000; i++) {\n    const polyline = new Polyline({\n      style: {\n        points:\n          i % 2 === 0\n            ? [\n                [200, 100],\n                [400, 100],\n                [\n                  400 + 200 * Math.sin(Math.PI / 6),\n                  100 + 200 * Math.cos(Math.PI / 6),\n                ],\n                [400, 100 + 200 * Math.cos(Math.PI / 6) * 2],\n                [200, 100 + 200 * Math.cos(Math.PI / 6) * 2],\n                [\n                  200 - 200 * Math.sin(Math.PI / 6),\n                  100 + 200 * Math.cos(Math.PI / 6),\n                ],\n              ]\n            : [\n                [200, 100],\n                [400, 100],\n                [400, 300],\n              ],\n        stroke: '#5B8FF9',\n        lineWidth: 4,\n        transform: `translate(${Math.random() * 600}, ${\n          Math.random() * 500\n        }) scale(${Math.random()})`,\n      },\n    });\n    canvas.appendChild(polyline);\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\nconst camera = canvas.getCamera();\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  // manipulate camera instead of the root of canvas\n  camera.rotate(0, 0, 1);\n});\n\n// update Camera's zoom\n// @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\nconst minZoom = 0;\nconst maxZoom = Infinity;\ncanvas\n  .getContextService()\n  .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n  .addEventListener(\n    'wheel',\n    (e) => {\n      e.preventDefault();\n      let zoom;\n      if (e.deltaY < 0) {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() / 0.95));\n      } else {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() * 0.95));\n      }\n      camera.setZoom(zoom);\n    },\n    { passive: false },\n  );\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'webgl',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['webgl', 'webgpu'])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"大量折线",en:"Instanced Polylines"},filename:"polylines.js",isNew:!1},{id:"images",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*qvDhTaGQXl0AAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Image } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  for (let i = 0; i < 1000; i++) {\n    const image = new Image({\n      style: {\n        x: Math.random() * 600,\n        y: Math.random() * 500,\n        width: 100 + Math.random() * 100,\n        height: 100 + Math.random() * 100,\n        src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*8eoKRbfOwgAAAAAAAAAAAABkARQnAQ',\n      },\n    });\n    canvas.appendChild(image);\n  }\n  for (let i = 0; i < 1000; i++) {\n    const image = new Image({\n      style: {\n        x: Math.random() * 600,\n        y: Math.random() * 500,\n        width: 100 + Math.random() * 100,\n        height: 100 + Math.random() * 100,\n        src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n      },\n    });\n    canvas.appendChild(image);\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\nconst camera = canvas.getCamera();\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  // manipulate camera instead of the root of canvas\n  camera.rotate(0, 0, 1);\n});\n\n// update Camera's zoom\n// @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\nconst minZoom = 0;\nconst maxZoom = Infinity;\ncanvas\n  .getContextService()\n  .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n  .addEventListener(\n    'wheel',\n    (e) => {\n      e.preventDefault();\n      let zoom;\n      if (e.deltaY < 0) {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() / 0.95));\n      } else {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() * 0.95));\n      }\n      camera.setZoom(zoom);\n    },\n    { passive: false },\n  );\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'webgl',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['webgl', 'webgpu'])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"大量图片",en:"Instanced Image"},filename:"images.js",isNew:!1},{id:"one-command-curve",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*CvgZSYvSp3IAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Path } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport { vec2 } from 'gl-matrix';\n\nconst getControlPoint = (startPoint, endPoint, percent, offset) => {\n  const point = {\n    x: (1 - percent) * startPoint.x + percent * endPoint.x,\n    y: (1 - percent) * startPoint.y + percent * endPoint.y,\n  };\n\n  let tangent = [0, 0];\n  vec2.normalize(tangent, [\n    endPoint.x - startPoint.x,\n    endPoint.y - startPoint.y,\n  ]);\n\n  if (!tangent || (!tangent[0] && !tangent[1])) {\n    tangent = [0, 0];\n  }\n  const perpendicular = [-tangent[1] * offset, tangent[0] * offset]; // 垂直向量\n  point.x += perpendicular[0];\n  point.y += perpendicular[1];\n  return point;\n};\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\nfor (let i = 0; i < 5000; i++) {\n  const p1 = { x: Math.random() * 600 * 2, y: Math.random() * 500 * 2 };\n  const p2 = { x: Math.random() * 600 * 2, y: Math.random() * 500 * 2 };\n  const cp = getControlPoint(p1, p2, 0.5, 30);\n  const path = new Path({\n    style: {\n      lineWidth: 1,\n      lineDash: [10, 10],\n      stroke: '#54BECC',\n      d: [\n        ['M', p1.x, p1.y],\n        ['Q', cp.x, cp.y, p2.x, p2.y],\n      ],\n    },\n  });\n  canvas.appendChild(path);\n\n  path.addEventListener('mouseenter', () => {\n    path.style.stroke = 'red';\n  });\n  path.addEventListener('mouseleave', () => {\n    path.style.stroke = '#54BECC';\n  });\n}\n\nfor (let i = 0; i < 5000; i++) {\n  const p1 = { x: Math.random() * 600 * 2, y: Math.random() * 500 * 2 };\n  const p2 = { x: Math.random() * 600 * 2, y: Math.random() * 500 * 2 };\n  const cp1 = getControlPoint(p1, p2, 0.2, 30);\n  const cp2 = getControlPoint(p1, p2, 0.8, 30);\n  const path = new Path({\n    style: {\n      lineWidth: 1,\n      stroke: '#54BECC',\n      d: [\n        ['M', p1.x, p1.y],\n        ['C', cp1.x, cp1.y, cp2.x, cp2.y, p2.x, p2.y],\n      ],\n    },\n  });\n  canvas.appendChild(path);\n  path.addEventListener('mouseenter', () => {\n    path.style.stroke = 'red';\n  });\n  path.addEventListener('mouseleave', () => {\n    path.style.stroke = '#54BECC';\n  });\n}\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\nconst camera = canvas.getCamera();\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  // manipulate camera instead of the root of canvas\n  camera.rotate(0, 0, 1);\n});\n\n// update Camera's zoom\n// @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\nconst minZoom = 0;\nconst maxZoom = Infinity;\ncanvas\n  .getContextService()\n  .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n  .addEventListener(\n    'wheel',\n    (e) => {\n      e.preventDefault();\n      let zoom;\n      if (e.deltaY < 0) {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() / 0.95));\n      } else {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() * 0.95));\n      }\n      camera.setZoom(zoom);\n    },\n    { passive: false },\n  );\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\n\nconst transformFolder = gui.addFolder('style');\nconst transformConfig = {\n  lineWidth: 1,\n  lineDash: 10,\n  lineDashOffset: 0,\n};\ntransformFolder\n  .add(transformConfig, 'lineWidth', 0, 20)\n  .onChange((lineWidth) => {\n    const paths = canvas.document.querySelectorAll('path');\n    paths.forEach((path) => {\n      path.style.lineWidth = lineWidth;\n    });\n  });\ntransformFolder.add(transformConfig, 'lineDash', 0, 50).onChange((dash) => {\n  const paths = canvas.document.querySelectorAll('path');\n  paths[0].style.lineDash = [dash, dash];\n});\ntransformFolder\n  .add(transformConfig, 'lineDashOffset', 0, 50)\n  .onChange((lineDashOffset) => {\n    const paths = canvas.document.querySelectorAll('path');\n    paths[0].style.lineDashOffset = lineDashOffset;\n  });\n",title:{zh:"包含一条曲线命令的 Path",en:"Instanced Simple Path(one-command curve)"},filename:"one-command-curve.js",isNew:!1},{id:"arrow",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*8F-XSbz8EIkAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Path } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\nimport { vec2 } from 'gl-matrix';\n\nconst getControlPoint = (startPoint, endPoint, percent, offset) => {\n  const point = {\n    x: (1 - percent) * startPoint.x + percent * endPoint.x,\n    y: (1 - percent) * startPoint.y + percent * endPoint.y,\n  };\n\n  let tangent = [0, 0];\n  vec2.normalize(tangent, [\n    endPoint.x - startPoint.x,\n    endPoint.y - startPoint.y,\n  ]);\n\n  if (!tangent || (!tangent[0] && !tangent[1])) {\n    tangent = [0, 0];\n  }\n  const perpendicular = [-tangent[1] * offset, tangent[0] * offset]; // 垂直向量\n  point.x += perpendicular[0];\n  point.y += perpendicular[1];\n  return point;\n};\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\nfor (let i = 0; i < 1000; i++) {\n  const arrowMarker = new Path({\n    style: {\n      path: 'M 10,10 L -10,0 L 10,-10 Z',\n      stroke: '#1890FF',\n      anchor: '0.5 0.5',\n      transformOrigin: 'center',\n    },\n  });\n\n  const p1 = { x: Math.random() * 600 * 2, y: Math.random() * 500 * 2 };\n  const p2 = { x: Math.random() * 600 * 2, y: Math.random() * 500 * 2 };\n  const cp = getControlPoint(p1, p2, 0.5, 30);\n  const path = new Path({\n    style: {\n      lineWidth: 1,\n      stroke: '#54BECC',\n      d: [\n        ['M', p1.x, p1.y],\n        ['Q', cp.x, cp.y, p2.x, p2.y],\n      ],\n      markerEnd: arrowMarker,\n    },\n  });\n  canvas.appendChild(path);\n\n  path.addEventListener('mouseenter', () => {\n    path.style.stroke = 'red';\n  });\n  path.addEventListener('mouseleave', () => {\n    path.style.stroke = '#54BECC';\n  });\n}\n\nfor (let i = 0; i < 5000; i++) {\n  const arrowMarker = new Path({\n    style: {\n      path: 'M 10,10 L -10,0 L 10,-10',\n      stroke: '#1890FF',\n      anchor: '0.5 0.5',\n      transformOrigin: 'center',\n    },\n  });\n\n  const p1 = { x: Math.random() * 600 * 2, y: Math.random() * 500 * 2 };\n  const p2 = { x: Math.random() * 600 * 2, y: Math.random() * 500 * 2 };\n  const cp1 = getControlPoint(p1, p2, 0.2, 30);\n  const cp2 = getControlPoint(p1, p2, 0.8, 30);\n  const path = new Path({\n    style: {\n      lineWidth: 1,\n      stroke: '#54BECC',\n      d: [\n        ['M', p1.x, p1.y],\n        ['C', cp1.x, cp1.y, cp2.x, cp2.y, p2.x, p2.y],\n      ],\n      markerEnd: arrowMarker,\n    },\n  });\n  canvas.appendChild(path);\n  path.addEventListener('mouseenter', () => {\n    path.style.stroke = 'red';\n  });\n  path.addEventListener('mouseleave', () => {\n    path.style.stroke = '#54BECC';\n  });\n}\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\nconst camera = canvas.getCamera();\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  // manipulate camera instead of the root of canvas\n  camera.rotate(0, 0, 1);\n});\n\n// update Camera's zoom\n// @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\nconst minZoom = 0;\nconst maxZoom = Infinity;\ncanvas\n  .getContextService()\n  .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n  .addEventListener(\n    'wheel',\n    (e) => {\n      e.preventDefault();\n      let zoom;\n      if (e.deltaY < 0) {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() / 0.95));\n      } else {\n        zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() * 0.95));\n      }\n      camera.setZoom(zoom);\n    },\n    { passive: false },\n  );\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\n\nconst transformFolder = gui.addFolder('style');\nconst transformConfig = {\n  lineWidth: 1,\n  lineDash: 10,\n  lineDashOffset: 0,\n};\ntransformFolder\n  .add(transformConfig, 'lineWidth', 0, 20)\n  .onChange((lineWidth) => {\n    const paths = canvas.document.querySelectorAll('path');\n    paths.forEach((path) => {\n      path.style.lineWidth = lineWidth;\n    });\n  });\ntransformFolder.add(transformConfig, 'lineDash', 0, 50).onChange((dash) => {\n  const paths = canvas.document.querySelectorAll('path');\n  paths[0].style.lineDash = [dash, dash];\n});\ntransformFolder\n  .add(transformConfig, 'lineDashOffset', 0, 50)\n  .onChange((lineDashOffset) => {\n    const paths = canvas.document.querySelectorAll('path');\n    paths[0].style.lineDashOffset = lineDashOffset;\n  });\n",title:{zh:"大量箭头",en:"Instanced Arrow"},filename:"arrow.js",isNew:!1},{id:"circle-path",source:"import { Canvas, CanvasEvent, Circle, Path, Text } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport Stats from 'stats.js';\n\n/**\n * do `pan` action with camera\n *\n * compared with G 4.0 ～30FPS\n * @see https://codesandbox.io/s/g-4-0-data1-pan-g8t95d?file=/index.js\n */\n\nconst renderer = new WebGLRenderer();\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  let edgesNum = 2742;\n  for (let i = 0; i < edgesNum; i++) {\n    const x = Math.random() * 600;\n    const y = Math.random() * 500;\n    canvas.appendChild(\n      new Path({\n        attrs: {\n          d: `M ${x} ${y} L ${x + Math.random() * 100} ${\n            y + Math.random() * 50\n          }`,\n          lineWidth: 1,\n          stroke: '#000',\n          lineWidth: 0.3,\n        },\n      }),\n    );\n  }\n  let nodesNum = 1589;\n  for (let i = 0; i < nodesNum; i++) {\n    const x = Math.random() * 600;\n    const y = Math.random() * 500;\n    canvas.appendChild(\n      new Circle({\n        attrs: {\n          fill: '#C6E5FF',\n          stroke: '#5B8FF9',\n          r: 2,\n          cx: x,\n          cy: y,\n          lineWidth: 0.3,\n        },\n      }),\n    );\n    canvas.appendChild(\n      new Text({\n        attrs: {\n          text: 'ccc',\n          x,\n          y,\n          fill: '#ccc',\n          fontSize: 12,\n        },\n      }),\n    );\n  }\n});\n\nconst camera = canvas.getCamera();\nlet count = 0;\nlet tag = 1;\nconst animate = () => {\n  if (stats) {\n    stats.update();\n  }\n  count++;\n  if (count % 80 === 0) {\n    count = 0;\n    tag *= -1;\n  }\n  camera.pan(tag, tag);\n  requestAnimationFrame(animate);\n};\n\nrequestAnimationFrame(animate);\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n",title:{zh:"大量 Circle Path 和 Text",en:"Render Circle, Path and Text"},filename:"circle-path.js",isNew:!1},{id:"nodes-8k",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*D-57RohPWVgAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Line, Text, runtime } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport Hammer from 'hammerjs';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nruntime.enableCSSParsing = false;\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\n// ported from G6 @see https://g6.antv.vision/zh/examples/performance/perf#eva\n\nconst mapNodeSize = (nodes, propertyName, visualRange) => {\n  let minp = 9999999999;\n  let maxp = -9999999999;\n  nodes.forEach((node) => {\n    node[propertyName] = Math.pow(node[propertyName], 1 / 3);\n    minp = node[propertyName] < minp ? node[propertyName] : minp;\n    maxp = node[propertyName] > maxp ? node[propertyName] : maxp;\n  });\n  const rangepLength = maxp - minp;\n  const rangevLength = visualRange[1] - visualRange[0];\n  nodes.forEach((node) => {\n    node.size =\n      ((node[propertyName] - minp) / rangepLength) * rangevLength +\n      visualRange[0];\n  });\n};\n\n(async () => {\n  const [_, data] = await Promise.all([\n    canvas.ready,\n    fetch(\n      'https://gw.alipayobjects.com/os/basement_prod/0b9730ff-0850-46ff-84d0-1d4afecd43e6.json',\n    ).then((res) => res.json()),\n  ]);\n\n  data.nodes.forEach((node) => {\n    node.label = node.olabel;\n    node.degree = 0;\n    data.edges.forEach((edge) => {\n      if (edge.source === node.id || edge.target === node.id) {\n        node.degree++;\n      }\n    });\n  });\n  mapNodeSize(data.nodes, 'degree', [1, 15]);\n\n  /**\n   * Draw edges\n   */\n  data.edges.forEach(({ startPoint, endPoint }) => {\n    const line = new Line({\n      style: {\n        x1: startPoint.x * 10,\n        y1: startPoint.y * 10,\n        x2: endPoint.x * 10,\n        y2: endPoint.y * 10,\n        stroke: '#1890FF',\n        lineWidth: 3,\n      },\n    });\n\n    canvas.appendChild(line);\n  });\n\n  /**\n   * Draw nodes\n   */\n  data.nodes.forEach(({ size, x, y, label }) => {\n    const circle = new Circle({\n      style: {\n        cx: x * 10,\n        cy: y * 10,\n        fill: '#C6E5FF',\n        stroke: '#5B8FF9',\n        r: size * 10,\n        lineWidth: 1,\n        batchKey: 'node', // merge all circles into a single batch\n      },\n    });\n    canvas.appendChild(circle);\n\n    const text = new Text({\n      style: {\n        text: label,\n        fontSize: 12,\n        fontFamily: 'sans-serif',\n        fill: '#1890FF',\n      },\n    });\n    circle.appendChild(text);\n\n    circle.addEventListener('mouseenter', (e) => {\n      circle.style.fill = '#2FC25B';\n      text.style.fill = 'red';\n    });\n\n    circle.addEventListener('mouseleave', (e) => {\n      circle.style.fill = '#C6E5FF';\n      text.style.fill = '#1890FF';\n    });\n  });\n})();\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\nconst camera = canvas.getCamera();\ncamera.pan(1000, 800);\ncamera.setZoom(0.05);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n  // console.log(canvas.getStats());\n\n  // manipulate camera instead of the root of canvas\n  camera.rotate(0, 0, 0.1);\n});\n\n// handle mouse wheel event\nconst bindWheelHandler = () => {\n  // update Camera's zoom\n  // @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\n  const minZoom = 0;\n  const maxZoom = Infinity;\n  canvas\n    .getContextService()\n    .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n    .addEventListener(\n      'wheel',\n      (e) => {\n        e.preventDefault();\n        let zoom;\n        if (e.deltaY < 0) {\n          zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() / 0.95));\n        } else {\n          zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() * 0.95));\n        }\n        camera.setZoom(zoom);\n      },\n      { passive: false },\n    );\n};\n\n// use hammer.js\nconst hammer = new Hammer(canvas);\nhammer.on('pan', (ev) => {\n  camera.pan(\n    -ev.deltaX / Math.pow(2, camera.getZoom()),\n    -ev.deltaY / Math.pow(2, camera.getZoom()),\n  );\n});\n\nbindWheelHandler();\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'webgl',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['webgl', 'webgpu'])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    }\n    canvas.setRenderer(renderer);\n    bindWheelHandler();\n  });\nrendererFolder.open();\n",title:{zh:"包含 8k 节点的图",en:"A large graph with 8k nodes"},filename:"nodes-8k.js",isNew:!1},{id:"nodes-8k-curve-edges",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*PTs5R43dHGIAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Circle, Path, Text, runtime } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport { vec2 } from 'gl-matrix';\nimport Hammer from 'hammerjs';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nruntime.enableCSSParsing = false;\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\n// ported from G6 @see https://g6.antv.vision/zh/examples/performance/perf#eva\n\nconst mapNodeSize = (nodes, propertyName, visualRange) => {\n  let minp = 9999999999;\n  let maxp = -9999999999;\n  nodes.forEach((node) => {\n    node[propertyName] = Math.pow(node[propertyName], 1 / 3);\n    minp = node[propertyName] < minp ? node[propertyName] : minp;\n    maxp = node[propertyName] > maxp ? node[propertyName] : maxp;\n  });\n  const rangepLength = maxp - minp;\n  const rangevLength = visualRange[1] - visualRange[0];\n  nodes.forEach((node) => {\n    node.size =\n      ((node[propertyName] - minp) / rangepLength) * rangevLength +\n      visualRange[0];\n  });\n};\n\nconst getControlPoint = (startPoint, endPoint, percent, offset) => {\n  const point = {\n    x: (1 - percent) * startPoint.x + percent * endPoint.x,\n    y: (1 - percent) * startPoint.y + percent * endPoint.y,\n  };\n\n  let tangent = [0, 0];\n  vec2.normalize(tangent, [\n    endPoint.x - startPoint.x,\n    endPoint.y - startPoint.y,\n  ]);\n\n  if (!tangent || (!tangent[0] && !tangent[1])) {\n    tangent = [0, 0];\n  }\n  const perpendicular = [-tangent[1] * offset, tangent[0] * offset]; // 垂直向量\n  point.x += perpendicular[0];\n  point.y += perpendicular[1];\n  return point;\n};\n\n(async () => {\n  const [_, data] = await Promise.all([\n    canvas.ready,\n    fetch(\n      'https://gw.alipayobjects.com/os/basement_prod/0b9730ff-0850-46ff-84d0-1d4afecd43e6.json',\n    ).then((res) => res.json()),\n  ]);\n\n  data.nodes.forEach((node) => {\n    node.label = node.olabel;\n    node.degree = 0;\n    data.edges.forEach((edge) => {\n      if (edge.source === node.id || edge.target === node.id) {\n        node.degree++;\n      }\n    });\n  });\n  mapNodeSize(data.nodes, 'degree', [1, 15]);\n\n  /**\n   * Draw edges\n   */\n  data.edges.forEach(({ startPoint, endPoint }) => {\n    const cp = getControlPoint(\n      { x: startPoint.x * 10, y: startPoint.y * 10 },\n      { x: endPoint.x * 10, y: endPoint.y * 10 },\n      0.5,\n      50,\n    );\n    const path = new Path({\n      style: {\n        d: [\n          ['M', startPoint.x * 10, startPoint.y * 10],\n          ['Q', cp.x, cp.y, endPoint.x * 10, endPoint.y * 10],\n        ],\n        stroke: '#1890FF',\n        lineWidth: 3,\n      },\n    });\n\n    canvas.appendChild(path);\n    path.addEventListener('mouseenter', (e) => {\n      path.style.stroke = 'red';\n    });\n\n    path.addEventListener('mouseleave', (e) => {\n      path.style.stroke = '#1890FF';\n    });\n  });\n\n  /**\n   * Draw nodes\n   */\n  data.nodes.forEach(({ size, x, y, label }) => {\n    const circle = new Circle({\n      style: {\n        cx: x * 10,\n        cy: y * 10,\n        fill: '#C6E5FF',\n        stroke: '#5B8FF9',\n        r: size * 10,\n        lineWidth: 1,\n        batchKey: 'node', // merge all circles into a single batch\n      },\n    });\n    canvas.appendChild(circle);\n\n    const text = new Text({\n      style: {\n        text: label,\n        fontSize: 12,\n        fontFamily: 'sans-serif',\n        fill: '#1890FF',\n      },\n    });\n    circle.appendChild(text);\n\n    circle.addEventListener('mouseenter', (e) => {\n      circle.style.fill = '#2FC25B';\n      text.style.fill = 'red';\n    });\n\n    circle.addEventListener('mouseleave', (e) => {\n      circle.style.fill = '#C6E5FF';\n      text.style.fill = '#1890FF';\n    });\n  });\n})();\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\nconst camera = canvas.getCamera();\ncamera.pan(1000, 800);\ncamera.setZoom(0.05);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n  // console.log(canvas.getStats());\n\n  // manipulate camera instead of the root of canvas\n  camera.rotate(0, 0, 0.1);\n});\n\n// handle mouse wheel event\nconst bindWheelHandler = () => {\n  // update Camera's zoom\n  // @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\n  const minZoom = 0;\n  const maxZoom = Infinity;\n  canvas\n    .getContextService()\n    .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n    .addEventListener(\n      'wheel',\n      (e) => {\n        e.preventDefault();\n        let zoom;\n        if (e.deltaY < 0) {\n          zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() / 0.95));\n        } else {\n          zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() * 0.95));\n        }\n        camera.setZoom(zoom);\n      },\n      { passive: false },\n    );\n};\n\n// use hammer.js\nconst hammer = new Hammer(canvas);\nhammer.on('pan', (ev) => {\n  camera.pan(\n    -ev.deltaX / Math.pow(2, camera.getZoom()),\n    -ev.deltaY / Math.pow(2, camera.getZoom()),\n  );\n});\n\nbindWheelHandler();\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'webgl',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['webgl', 'webgpu'])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    }\n    canvas.setRenderer(renderer);\n    bindWheelHandler();\n  });\nrendererFolder.open();\n",title:{zh:"包含 8k 节点的图，使用曲线边",en:"A large graph with 8k nodes"},filename:"nodes-8k-curve-edges.js",isNew:!1},{id:"nodes-5w",screenshot:"https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*dwS2Rb3mq5IAAAAAAAAAAAAAARQnAQ",source:"import { Canvas, CanvasEvent, Circle, Line } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport Hammer from 'hammerjs';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// ported from G6 @see https://g6.antv.vision/zh/examples/performance/perf#moreData\n\n// create a renderer\nconst webglRenderer = new WebGLRenderer();\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: webglRenderer,\n});\n\nconst mapNodeSize = (nodes, propertyName, visualRange) => {\n  let minp = 9999999999;\n  let maxp = -9999999999;\n  nodes.forEach((node) => {\n    node[propertyName] = Math.pow(node[propertyName], 1 / 3);\n    minp = node[propertyName] < minp ? node[propertyName] : minp;\n    maxp = node[propertyName] > maxp ? node[propertyName] : maxp;\n  });\n  const rangepLength = maxp - minp;\n  const rangevLength = visualRange[1] - visualRange[0];\n  nodes.forEach((node) => {\n    node.size =\n      ((node[propertyName] - minp) / rangepLength) * rangevLength +\n      visualRange[0];\n  });\n};\n\n(async () => {\n  const [_, data] = await Promise.all([\n    canvas.ready,\n    fetch(\n      'https://gw.alipayobjects.com/os/bmw-prod/f1565312-d537-4231-adf5-81cb1cd3a0e8.json',\n    ).then((res) => res.json()),\n  ]);\n\n  data.nodes.forEach((node) => {\n    node.degree = 0;\n    data.edges.forEach((edge) => {\n      if (edge.source === node.id || edge.target === node.id) {\n        node.degree++;\n      }\n    });\n  });\n  mapNodeSize(data.nodes, 'degree', [1, 15]);\n\n  data.edges.forEach(({ source, target }) => {\n    const startPoint = data.nodes.find((node) => node.id === source);\n    const endPoint = data.nodes.find((node) => node.id === target);\n\n    if (startPoint && endPoint) {\n      const line = new Line({\n        style: {\n          x1: startPoint.x,\n          y1: startPoint.y,\n          x2: endPoint.x,\n          y2: endPoint.y,\n          stroke: '#1890FF',\n          lineWidth: 0.3,\n        },\n      });\n      canvas.appendChild(line);\n    }\n  });\n\n  data.nodes.forEach(({ size, x, y }) => {\n    const circle = new Circle({\n      style: {\n        cx: x,\n        cy: y,\n        fill: '#C6E5FF',\n        stroke: '#5B8FF9',\n        r: size,\n        lineWidth: 1,\n      },\n    });\n    canvas.appendChild(circle);\n  });\n})();\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\nconst camera = canvas.getCamera();\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  // manipulate camera instead of the root of canvas\n  camera.rotate(0, 0, 1);\n});\n\n// handle mouse wheel event\nconst bindWheelHandler = () => {\n  // update Camera's zoom\n  // @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\n  const minZoom = 0;\n  const maxZoom = Infinity;\n  canvas\n    .getContextService()\n    .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n    .addEventListener(\n      'wheel',\n      (e) => {\n        e.preventDefault();\n        let zoom;\n        if (e.deltaY < 0) {\n          zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() / 0.95));\n        } else {\n          zoom = Math.max(minZoom, Math.min(maxZoom, camera.getZoom() * 0.95));\n        }\n        camera.setZoom(zoom);\n      },\n      { passive: false },\n    );\n};\n\n// use hammer.js\nconst hammer = new Hammer(canvas.document);\nhammer.on('pan', (ev) => {\n  camera.pan(\n    -ev.deltaX / Math.pow(2, camera.getZoom()),\n    -ev.deltaY / Math.pow(2, camera.getZoom()),\n  );\n});\n\nbindWheelHandler();\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'webgl',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['webgl', 'webgpu'])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    }\n    canvas.setRenderer(renderer);\n    bindWheelHandler();\n  });\nrendererFolder.open();\n",title:{zh:"包含 5.5w 节点的图",en:"A large graph with 5.5w nodes"},filename:"nodes-5w.js",isNew:!1},{id:"nodes",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*GNRuTqpp6BAAAAAAAAAAAAAADmJ7AQ/original",source:"import { Canvas, CanvasEvent, Circle, Line, Group, runtime } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin } from '@antv/g-plugin-dragndrop';\nimport Stats from 'stats.js';\n\n/**\n * Compare with galaxyviz\n * @see https://github.com/galaxybase/GalaxyVis/blob/main/examples/test_all.ts#L12\n */\n\nruntime.enableCSSParsing = false;\n\nconst NODE_NUM = 5000;\nconst EDGE_NUM = 5000;\n\nconst webglRenderer = new WebGLRenderer();\nwebglRenderer.registerPlugin(\n  new Plugin({\n    isDocumentDraggable: true,\n    isDocumentDroppable: true,\n    dragstartDistanceThreshold: 10,\n    dragstartTimeThreshold: 100,\n  }),\n);\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 500,\n  height: 500,\n  renderer: webglRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  let nodes = [];\n  let colors = [\n    '#965E04',\n    '#C89435',\n    '#F7A456',\n    '#AFCF8A',\n    '#7B39DE',\n    '#B095C0',\n    '#D24556',\n    '#93C2FA',\n    '#9DB09E',\n    '#F8C821',\n  ];\n  let num = Math.floor(Math.sqrt(NODE_NUM) + 0.5);\n\n  const g1 = new Group({\n    style: {\n      zIndex: 2,\n    },\n  });\n  const g2 = new Group({\n    style: {\n      zIndex: 1,\n    },\n  });\n\n  const sourceMap = new WeakMap();\n  const targetMap = new WeakMap();\n  for (let i = 0; i < NODE_NUM; i++) {\n    const fill = colors[Math.floor(Math.random() * colors.length) || 0];\n    const circle = new Circle({\n      style: {\n        // cx: (i % num) * 10,\n        // cy: Math.floor(i / num) * 10,\n        cx: Math.random() * 500,\n        cy: Math.random() * 500,\n        fill,\n        r: 4,\n        // draggable: true\n      },\n    });\n    nodes.push(circle);\n    sourceMap.set(circle, []);\n    targetMap.set(circle, []);\n\n    circle.addEventListener('mouseenter', () => {\n      circle.style.fill = 'red';\n    });\n    circle.addEventListener('mouseleave', () => {\n      circle.style.fill = fill;\n    });\n\n    // const text = new Text({\n    //   style: {\n    //     x: 0,\n    //     y: 4,\n    //     text: `${i}`,\n    //     textBaseline: \"middle\",\n    //     textAlign: \"center\",\n    //     fontSize: 4,\n    //     fill: \"black\"\n    //   }\n    // });\n    // circle.appendChild(text);\n  }\n\n  nodes.forEach((node) => {\n    g1.appendChild(node);\n  });\n\n  for (let i = 0; i < EDGE_NUM; i++) {\n    const source = nodes[Math.floor(Math.random() * NODE_NUM)];\n    const target = nodes[Math.floor(Math.random() * NODE_NUM)];\n    const line = new Line({\n      style: {\n        x1: source.style.cx,\n        y1: source.style.cy,\n        x2: target.style.cx,\n        y2: target.style.cy,\n        lineWidth: 0.3,\n        stroke: 'grey',\n      },\n    });\n\n    const sourceEdges = sourceMap.get(source);\n    sourceEdges.push(line);\n    const targetEdges = targetMap.get(target);\n    targetEdges.push(line);\n\n    g2.appendChild(line);\n\n    // line.addEventListener(\"mouseenter\", () => {\n    //   line.style.stroke = \"red\";\n    // });\n    // line.addEventListener(\"mouseleave\", () => {\n    //   line.style.stroke = \"grey\";\n    // });\n  }\n\n  canvas.appendChild(g1);\n  canvas.appendChild(g2);\n\n  // stats\n  const stats = new Stats();\n  stats.showPanel(0);\n  const $stats = stats.dom;\n  $stats.style.position = 'absolute';\n  $stats.style.left = '0px';\n  $stats.style.top = '0px';\n  const $wrapper = document.getElementById('container');\n  $wrapper.appendChild($stats);\n  const camera = canvas.getCamera();\n  canvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n    if (stats) {\n      stats.update();\n    }\n  });\n\n  let shiftX = 0;\n  let shiftY = 0;\n  function moveAt(target, canvasX, canvasY) {\n    const x = canvasX - shiftX;\n    const y = canvasY - shiftY;\n    target.setPosition(x, y);\n    const sourceEdges = sourceMap.get(target);\n    const targetEdges = targetMap.get(target);\n    sourceEdges.forEach((edge) => {\n      edge.attr({\n        x1: x,\n        y1: y,\n      });\n    });\n    targetEdges.forEach((edge) => {\n      edge.attr({\n        x2: x,\n        y2: y,\n      });\n    });\n  }\n\n  canvas.addEventListener('dragstart', function (e) {\n    if (e.target === canvas.document) {\n    } else {\n      const [x, y] = e.target.getPosition();\n      shiftX = e.canvasX - x;\n      shiftY = e.canvasY - y;\n\n      moveAt(e.target, e.canvasX, e.canvasY);\n    }\n  });\n  canvas.addEventListener('drag', function (e) {\n    if (e.target === canvas.document) {\n      camera.pan(-e.dx, -e.dy);\n    } else {\n      moveAt(e.target, e.canvasX, e.canvasY);\n    }\n  });\n\n  // handle mouse wheel event\n  const bindWheelHandler = () => {\n    // update Camera's zoom\n    // @see https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\n    const minZoom = 0;\n    const maxZoom = Infinity;\n    canvas\n      .getContextService()\n      .getDomElement() // g-canvas/webgl 为 <canvas>，g-svg 为 <svg>\n      .addEventListener(\n        'wheel',\n        (e) => {\n          e.preventDefault();\n          let zoom;\n          if (e.deltaY < 0) {\n            zoom = Math.max(\n              minZoom,\n              Math.min(maxZoom, camera.getZoom() / 0.95),\n            );\n          } else {\n            zoom = Math.max(\n              minZoom,\n              Math.min(maxZoom, camera.getZoom() * 0.95),\n            );\n          }\n          camera.setZoom(zoom);\n        },\n        { passive: false },\n      );\n  };\n  bindWheelHandler();\n});\n",title:{zh:"大量直线",en:"Instanced Lines"},filename:"nodes.js",isNew:!1}],icon:"",id:"webgl",title:{en:"Performance of WebGL",zh:"WebGL 性能"},api:null,childrenKey:"demos",order:1},{demos:[{id:"canvas-rendering-optimization",source:"import { Canvas, Rect, Group, CanvasEvent } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport Stats from 'stats.js';\nimport * as lil from 'lil-gui';\n\nconst canvasRenderer = new CanvasRenderer({\n  enableRenderingOptimization: true,\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const { width, height } = canvas.getConfig();\n  const root = new Group();\n  const count = 1e4;\n  let rects = [];\n\n  function update() {\n    const rectsToRemove = [];\n\n    for (let i = 0; i < count; i++) {\n      const rect = rects[i];\n      rect.x -= rect.speed;\n      rect.el.setAttribute('x', rect.x);\n      if (rect.x + rect.size < 0) rectsToRemove.push(i);\n    }\n\n    rectsToRemove.forEach((i) => {\n      rects[i].x = width + rects[i].size / 2;\n    });\n  }\n\n  function render() {\n    root.destroyChildren();\n    rects = [];\n\n    for (let i = 0; i < count; i++) {\n      const x = Math.random() * width;\n      const y = Math.random() * height;\n      const size = 10 + Math.random() * 40;\n      const speed = 1 + Math.random();\n\n      const rect = new Rect({\n        style: {\n          x,\n          y,\n          width: size,\n          height: size,\n          fill: 'white',\n          stroke: '#000',\n          lineWidth: 1,\n        },\n      });\n      root.appendChild(rect);\n      rects[i] = { x, y, size, speed, el: rect };\n    }\n  }\n\n  render();\n  canvas.addEventListener(CanvasEvent.BEFORE_RENDER, () => update());\n\n  canvas.appendChild(root);\n\n  // ---\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst canvasConfig = {\n  enableRenderingOptimization: canvas.getConfig().renderer.getConfig()\n    .enableRenderingOptimization,\n};\ngui.add(canvasConfig, 'enableRenderingOptimization').onChange((value) => {\n  canvas.getConfig().renderer.getConfig().enableRenderingOptimization = value;\n});\n",title:{zh:"g-canvas 渲染优化",en:"Rendering-optimization with g-canvas"},filename:"canvas-rendering-optimization.js",isNew:!1},{id:"canvas-large-image-rendering",source:"import { Canvas, CanvasEvent, Image } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport Stats from 'stats.js';\nimport * as lil from 'lil-gui';\n\nconst canvasRenderer = new CanvasRenderer();\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const image = new Image({\n    style: {\n      x: 0,\n      y: 0,\n      // 16151/6971, 11.4MB\n      src: 'https://mdn.alipayobjects.com/huamei_fr7vu1/afts/img/A*SqloToP7R9QAAAAAAAAAAAAADkn0AQ/original',\n    },\n  });\n\n  canvas.appendChild(image);\n\n  // ---\n  const $dom = canvas.getContextService().getDomElement();\n  let currentZoom = 1;\n  let isDragging = false;\n  let lastX;\n  let lastY;\n\n  $dom.style.border = '1px solid gray';\n\n  $dom.addEventListener('wheel', (event) => {\n    event.preventDefault();\n\n    const { deltaX, deltaY } = event;\n    const d = -(deltaX || deltaY);\n\n    const ratio = 1 + (Math.min(Math.max(d, -50), 50) * 1) / 100;\n    const zoom = canvas.getCamera().getZoom();\n    currentZoom = zoom * ratio;\n\n    canvas\n      .getCamera()\n      .setZoomByViewportPoint(currentZoom, [event.offsetX, event.offsetY]);\n  });\n\n  $dom.addEventListener('mousedown', (e) => {\n    isDragging = true;\n    lastX = e.clientX;\n    lastY = e.clientY;\n  });\n  $dom.addEventListener('mousemove', (e) => {\n    if (isDragging) {\n      const dx = e.clientX - lastX;\n      const dy = e.clientY - lastY;\n      canvas.getCamera().pan(-dx / currentZoom, -dy / currentZoom);\n      lastX = e.clientX;\n      lastY = e.clientY;\n    }\n  });\n  $dom.addEventListener('mouseup', () => {\n    isDragging = false;\n  });\n\n  // ---\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst canvasConfig = {\n  enableLargeImageOptimization: false,\n};\ngui.add(canvasConfig, 'enableLargeImageOptimization').onChange((result) => {\n  canvas.context.config.enableLargeImageOptimization = result;\n});\n",title:{zh:"g-canvas 渲染高分辨率大图优化",en:"Rendering large images optimization with g-canvas"},filename:"canvas-large-image-rendering.js",isNew:!1},{id:"canvas-circle-path",source:"import { Canvas, CanvasEvent, Circle, Path, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport Stats from 'stats.js';\n\n/**\n * do `pan` action with camera\n *\n * compared with G 4.0 ～30FPS\n * @see https://codesandbox.io/s/g-4-0-data1-pan-g8t95d?file=/index.js\n */\n\nconst canvasRenderer = new CanvasRenderer();\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  let edgesNum = 2742;\n  for (let i = 0; i < edgesNum; i++) {\n    const x = Math.random() * 600;\n    const y = Math.random() * 500;\n    canvas.appendChild(\n      new Path({\n        style: {\n          d: [\n            ['M', x, y],\n            ['L', x + Math.random() * 100, y + Math.random() * 50],\n          ],\n          lineWidth: 1,\n          stroke: '#000',\n          lineWidth: 0.3,\n        },\n      }),\n    );\n  }\n  let nodesNum = 1589;\n  for (let i = 0; i < nodesNum; i++) {\n    const x = Math.random() * 600;\n    const y = Math.random() * 500;\n    canvas.appendChild(\n      new Circle({\n        style: {\n          fill: '#C6E5FF',\n          stroke: '#5B8FF9',\n          r: 2,\n          cx: x,\n          cy: y,\n          lineWidth: 0.3,\n        },\n      }),\n    );\n    canvas.appendChild(\n      new Text({\n        style: {\n          text: 'ccc',\n          x,\n          y,\n          fill: '#ccc',\n          fontSize: 12,\n        },\n      }),\n    );\n  }\n});\n\nconst camera = canvas.getCamera();\nlet count = 0;\nlet tag = 1;\nconst animate = () => {\n  if (stats) {\n    stats.update();\n  }\n  count++;\n  if (count % 80 === 0) {\n    count = 0;\n    tag *= -1;\n  }\n  camera.pan(tag, tag);\n  requestAnimationFrame(animate);\n};\n\nrequestAnimationFrame(animate);\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n",title:{zh:"g-canvas 渲染 Circle 和 Path",en:"Render Circle & Path with g-canvas"},filename:"canvas-circle-path.js",isNew:!1},{id:"canvas-dirty-rectangle",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer({\n  enableDirtyRectangleRenderingDebug: true,\n});\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  for (let i = 0; i < 1000; i++) {\n    const circle = new Circle({\n      style: {\n        cx: Math.random() * 600,\n        cy: Math.random() * 500,\n        r: 20 + Math.random() * 10,\n        fill: '#1890FF',\n        stroke: '#F04864',\n        lineWidth: 4,\n      },\n    });\n\n    canvas.appendChild(circle);\n\n    circle.on('mouseenter', () => {\n      circle.attr('fill', '#2FC25B');\n    });\n\n    circle.on('mouseleave', () => {\n      circle.attr('fill', '#1890FF');\n    });\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nlet currentRenderer = canvasRenderer;\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', ['canvas', 'webgl', 'svg'])\n  .onChange((renderer) => {\n    currentRenderer =\n      renderer === 'canvas'\n        ? canvasRenderer\n        : renderer === 'webgl'\n        ? webglRenderer\n        : svgRenderer;\n    canvas.setRenderer(currentRenderer);\n  });\nrendererFolder.open();\n\nconst folder0 = gui.addFolder('dirty rectangle');\nconst dirtyRectangleConfig = {\n  enable: true,\n};\nfolder0.add(dirtyRectangleConfig, 'enable').onChange((enable) => {\n  currentRenderer.setConfig({\n    enableDirtyRectangleRendering: enable,\n    enableDirtyRectangleRenderingDebug: enable,\n  });\n});\nfolder0.open();\n\n// display dirty rectangle\nconst $dirtyRectangle = document.createElement('div');\n$dirtyRectangle.style.cssText = `\nposition: absolute;\npointer-events: none;\nbackground: rgba(255, 0, 0, 0.5);\n`;\n$wrapper.appendChild($dirtyRectangle);\ncanvas.addEventListener(CanvasEvent.DIRTY_RECTANGLE, (e) => {\n  const { dirtyRect } = e.detail;\n  const { x, y, width, height } = dirtyRect;\n  const dpr = window.devicePixelRatio;\n\n  // convert from canvas coords to viewport\n  $dirtyRectangle.style.left = `${x / dpr}px`;\n  $dirtyRectangle.style.top = `${y / dpr}px`;\n  $dirtyRectangle.style.width = `${width / dpr}px`;\n  $dirtyRectangle.style.height = `${height / dpr}px`;\n});\n",title:{zh:"脏矩形渲染(Canvas)",en:"Rendering with dirty rectangle(Canvas)"},filename:"canvas-dirty-rectangle.js",isNew:!1},{id:"vs-g4.0",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * compared with G 4.0 ～20FPS\n * @see https://codesandbox.io/s/g-canvas-particles-2w-jyiie?file=/src/index.tsx\n */\n\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  let nodesNum = 5000;\n  for (let i = 0; i < nodesNum; i++) {\n    canvas.appendChild(\n      new Circle({\n        style: {\n          fill: '#C6E5FF',\n          stroke: '#5B8FF9',\n          r: 2,\n          cx: Math.random() * 600,\n          cy: Math.random() * 500,\n          lineWidth: 0.3,\n        },\n      }),\n    );\n  }\n});\n\nconst camera = canvas.getCamera();\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.on(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n\n  camera.rotate(0, 0, 1);\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"与 G 4.0 对比",en:"Compared with G 4.0"},filename:"vs-g4.0.js",isNew:!1}],icon:"",id:"canvas",title:{en:"Performance of Canvas",zh:"Canvas 性能"},api:null,childrenKey:"demos",order:2},{demos:[{id:"circle",source:"import { Canvas, CanvasEvent, Circle } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * G4.0 @see https://rurm4c.csb.app/\n * @see https://codesandbox.io/s/g-canvas-4-0-animation-rurm4c?file=/src/index.tsx\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  for (let i = 0; i < 5000; i++) {\n    const circle = new Circle({\n      style: {\n        cx: Math.random() * 600,\n        cy: Math.random() * 500,\n        r: 10 + Math.random() * 5,\n        fill: '#1890FF',\n        stroke: '#F04864',\n        lineWidth: 4,\n      },\n    });\n\n    canvas.appendChild(circle);\n\n    circle.animate([{ opacity: 1 }, { opacity: 0 }], {\n      duration: 1000,\n      delay: 1000,\n      fill: 'both',\n      iterations: Infinity,\n    });\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nlet currentRenderer = canvasRenderer;\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\n\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"Circle",en:"Circle"},filename:"circle.js",isNew:!1},{id:"path",source:"import { Canvas, CanvasEvent, Path } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n/**\n * G4.0 @see https://tnwwc1.csb.app/\n * @see https://codesandbox.io/s/g-canvas-4-0-animation2-tnwwc1?file=/src/index.tsx\n */\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  for (let i = 0; i < 5000; i++) {\n    const x = Math.random() * 600;\n    const y = Math.random() * 500;\n    const path = canvas.appendChild(\n      new Path({\n        style: {\n          fill: '#C6E5FF',\n          stroke: '#5B8FF9',\n          d: `M${54.4462133232839 + x},${-6.41757177038063 + y} L${\n            61.3765714868427 + x\n          },${6.41757177038063 + y} M${61.3765714868427 + x},${\n            6.41757177038063 + y\n          } L${61.54285370420826 + x},${0.5852759906612777 + y}M${\n            61.3765714868427 + x\n          },${6.41757177038063 + y}L${56.4087962879037 + x},${\n            3.3574192560847824 + y\n          }`,\n        },\n      }),\n    );\n\n    path.animate([{ opacity: 0 }, { opacity: 1 }], {\n      duration: 1000,\n      delay: 1000,\n      fill: 'both',\n      iterations: 5,\n    });\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\n\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n",title:{zh:"Path",en:"Path"},filename:"path.js",isNew:!1},{id:"group-move",source:"import { Canvas, Circle, Group, Path, Text } from '@antv/g';\nimport { Renderer } from '@antv/g-canvas';\nimport Stats from 'stats.js';\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\n// create a renderer\nconst canvasRenderer = new Renderer();\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst groups = Array(1000)\n  .fill(1)\n  .map(() => {\n    const text = new Text({\n      style: {\n        x: 100,\n        y: 100,\n        fontFamily: 'PingFang SC',\n        text: '这是测试文本This is text',\n        fontSize: 15,\n        fill: '#1890FF',\n        stroke: '#F04864',\n        lineWidth: 5,\n      },\n    });\n    const circle = new Circle({\n      style: {\n        r: 20,\n        fill: '#000',\n      },\n    });\n    const path = new Path({\n      style: {\n        d: [\n          ['M', 0, 0],\n          ['L', 100, 100],\n        ],\n        lineWidth: 2,\n        stroke: 'black',\n      },\n    });\n    const gg = new Group({\n      style: {\n        x: 100,\n        y: 100,\n      },\n    });\n    gg.appendChild(text);\n    gg.appendChild(circle);\n    gg.appendChild(path);\n    canvas.appendChild(gg);\n    return gg;\n  });\n\nconst loop = () => {\n  if (stats) {\n    stats.update();\n  }\n\n  groups.forEach((group) =>\n    // ~30FPS\n    // group.attr({\n    //   x: Math.random() * 600,\n    //   y: Math.random() * 500,\n    // }),\n    // ~60FPS\n    group.setLocalPosition(Math.random() * 600, Math.random() * 500),\n  );\n  setTimeout(loop);\n};\nloop();\n",title:{zh:"频繁移动 Group",en:"Move groups"},filename:"group-move.js",isNew:!1},{id:"redraw",source:"import { Canvas, CanvasEvent, Circle, Group } from '@antv/g';\nimport { Renderer } from '@antv/g-canvas';\nimport Stats from 'stats.js';\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: new Renderer(),\n});\n\nconst group = new Group();\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(group);\n  for (let i = 0; i < 1000; i++) {\n    const circle = new Circle({\n      style: {\n        cx: Math.random() * 600,\n        cy: Math.random() * 500,\n        r: 20 + Math.random() * 10,\n        fill: '#1890FF',\n        stroke: '#F04864',\n        lineWidth: 4,\n        cursor: 'pointer',\n      },\n    });\n    group.appendChild(circle);\n\n    circle.on('mouseenter', () => {\n      circle.attr('fill', '#2FC25B');\n    });\n\n    circle.on('mouseleave', () => {\n      circle.attr('fill', '#1890FF');\n    });\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\n\nlet t = 0;\nconst spin = () => {\n  console.log(canvas.getStats());\n  if (stats) {\n    stats.update();\n  }\n  group.translate(t < 20 ? 5 : -5);\n  if (t > 40) {\n    t = 0;\n  }\n  t++;\n  window.requestAnimationFrame(spin);\n};\n\nspin();\n",title:{zh:"移动大量节点",en:"Move nodes"},filename:"redraw.js",isNew:!1},{id:"webgl-text",source:"import { Canvas, CanvasEvent, Text, runtime } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport Stats from 'stats.js';\n\nruntime.enableCSSParsing = false;\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: new Renderer(),\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  for (let i = 0; i < 1000; i++) {\n    const text = new Text({\n      style: {\n        x: Math.random() * 600,\n        y: Math.random() * 500,\n        fontSize: 16,\n        fill: 'black',\n        text: `Text1${i}`,\n      },\n    });\n    canvas.appendChild(text);\n\n    text.animate(\n      [\n        { opacity: 0, transform: 'translate(0, 0)' },\n        { opacity: 1, transform: 'translate(100, 0)' },\n      ],\n      {\n        duration: 2000,\n        fill: 'both',\n        iterations: Infinity,\n      },\n    );\n  }\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n",title:{zh:"在 WebGL 中更新 Text 的位置",en:"Update position of Text in WebGL"},filename:"webgl-text.js",isNew:!1},{id:"webgl-opacity",source:"import { Canvas, CanvasEvent, Rect, runtime } from '@antv/g';\nimport { Renderer } from '@antv/g-webgl';\nimport Stats from 'stats.js';\n\nruntime.enableCSSParsing = false;\n\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: new Renderer(),\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  const rect1 = new Rect({\n    style: {\n      x: 200,\n      y: 200,\n      width: 200,\n      height: 200,\n      fill: 'blue',\n    },\n  });\n\n  const rect2 = new Rect({\n    style: {\n      x: 250,\n      y: 250,\n      width: 100,\n      height: 100,\n      fill: 'red',\n    },\n  });\n\n  canvas.appendChild(rect1);\n  canvas.appendChild(rect2);\n\n  rect2.animate([{ opacity: 0 }, { opacity: 1 }], {\n    duration: 2000,\n    fill: 'both',\n    iterations: Infinity,\n  });\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n",title:{zh:"在 WebGL 中更新 Opacity",en:"Update opacity of shapes in WebGL"},filename:"webgl-opacity.js",isNew:!1}],icon:"",id:"animation",title:{en:"Performance of animation",zh:"动画性能"},api:null,childrenKey:"demos",order:4},{demos:[{id:"culling",source:"import { Canvas, CanvasEvent, Rect } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 500,\n  height: 500,\n  renderer: canvasRenderer,\n});\nconst camera = canvas.getCamera();\ncamera.setZoom(0.1);\n\nconst rect = new Rect({\n  style: {\n    x: 250,\n    y: 250,\n    width: 2000,\n    height: 2000,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\n\nconst culledRect = new Rect({\n  style: {\n    x: 250 - 2500,\n    y: 250 - 2500,\n    width: 2000,\n    height: 2000,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(rect);\n  canvas.appendChild(culledRect);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst cameraFolder = gui.addFolder('camera actions');\nconst cameraConfig = {\n  panX: 0,\n  panY: 0,\n  zoom: 0.1,\n  roll: 0,\n};\nconst printVisibility = () => {\n  console.log(\"rect1's visibility:\", rect.isVisible() ? 'visible' : 'hidden');\n  console.log(\n    \"rect2's visibility:\",\n    culledRect.isVisible() ? 'visible' : 'hidden',\n  );\n};\n\nconst origin = camera.getPosition();\ncameraFolder.add(cameraConfig, 'panX', -3000, 3000).onChange((panX) => {\n  const current = camera.getPosition();\n  camera.pan(origin[0] + panX - current[0], 0);\n  printVisibility();\n});\ncameraFolder.add(cameraConfig, 'panY', -3000, 3000).onChange((panY) => {\n  const current = camera.getPosition();\n  camera.pan(0, origin[1] + panY - current[1]);\n  printVisibility();\n});\ncameraFolder.add(cameraConfig, 'roll', -90, 90).onChange((roll) => {\n  camera.rotate(0, 0, roll);\n  printVisibility();\n});\ncameraFolder.add(cameraConfig, 'zoom', 0, 1).onChange((zoom) => {\n  camera.setZoom(zoom);\n  printVisibility();\n});\ncameraFolder.open();\n",title:{zh:"视口剔除",en:"Viewport culling"},filename:"culling.js",isNew:!1},{id:"disable-css",source:"import {\n  runtime,\n  Canvas,\n  CanvasEvent,\n  Circle,\n  Image,\n  Line,\n  Path,\n} from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as CanvaskitRenderer } from '@antv/g-canvaskit';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Renderer as WebGPURenderer } from '@antv/g-webgpu';\nimport * as lil from 'lil-gui';\nimport Stats from 'stats.js';\n\nruntime.enableCSSParsing = false;\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\nconst webglRenderer = new WebGLRenderer();\nconst svgRenderer = new SVGRenderer();\nconst canvaskitRenderer = new CanvaskitRenderer({\n  wasmDir: '/',\n  fonts: [\n    {\n      name: 'Roboto',\n      url: '/Roboto-Regular.ttf',\n    },\n    {\n      name: 'sans-serif',\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*064aSK2LUPEAAAAAAAAAAAAADmJ7AQ/NotoSansCJKsc-VF.ttf',\n    },\n  ],\n});\nconst webgpuRenderer = new WebGPURenderer({\n  shaderCompilerPath: '/glsl_wgsl_compiler_bg.wasm',\n});\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst arrowMarker = new Path({\n  style: {\n    path: 'M 10,10 L -10,0 L 10,-10 Z',\n    stroke: '#1890FF',\n    lineWidth: 2,\n    anchor: '0.5 0.5',\n    transformOrigin: 'center',\n  },\n});\nconst circleMarker = new Circle({\n  style: {\n    r: 10,\n    stroke: '#1890FF',\n  },\n});\nconst imageMarker = new Image({\n  style: {\n    width: 50,\n    height: 50,\n    anchor: [0.5, 0.5],\n    transformOrigin: 'center',\n    transform: 'rotate(90deg)',\n    src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n  },\n});\n\nconst arrowLine = new Line({\n  style: {\n    x1: 200,\n    y1: 250,\n    x2: 400,\n    y2: 250,\n    stroke: '#1890FF',\n    lineWidth: 2,\n    cursor: 'pointer',\n    markerStart: arrowMarker,\n    markerEnd: circleMarker,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(arrowLine);\n});\n\n// stats\nconst stats = new Stats();\nstats.showPanel(0);\nconst $stats = stats.dom;\n$stats.style.position = 'absolute';\n$stats.style.left = '0px';\n$stats.style.top = '0px';\nconst $wrapper = document.getElementById('container');\n$wrapper.appendChild($stats);\ncanvas.addEventListener(CanvasEvent.AFTER_RENDER, () => {\n  if (stats) {\n    stats.update();\n  }\n});\n\n// GUI\nconst gui = new lil.GUI({ autoPlace: false });\n$wrapper.appendChild(gui.domElement);\nconst rendererFolder = gui.addFolder('renderer');\nconst rendererConfig = {\n  renderer: 'canvas',\n};\n\nrendererFolder\n  .add(rendererConfig, 'renderer', [\n    'canvas',\n    'svg',\n    'webgl',\n    'webgpu',\n    'canvaskit',\n  ])\n  .onChange((rendererName) => {\n    let renderer;\n    if (rendererName === 'canvas') {\n      renderer = canvasRenderer;\n    } else if (rendererName === 'svg') {\n      renderer = svgRenderer;\n    } else if (rendererName === 'webgl') {\n      renderer = webglRenderer;\n    } else if (rendererName === 'webgpu') {\n      renderer = webgpuRenderer;\n    } else if (rendererName === 'canvaskit') {\n      renderer = canvaskitRenderer;\n    }\n    canvas.setRenderer(renderer);\n  });\nrendererFolder.open();\n\nconst markerFolder = gui.addFolder('marker');\nconst markerConfig = {\n  markerStart: 'path',\n  markerEnd: 'circle',\n  markerStartOffset: 0,\n  markerEndOffset: 0,\n  x1: 200,\n  y1: 250,\n  x2: 400,\n  y2: 250,\n};\nmarkerFolder\n  .add(markerConfig, 'markerStart', ['path', 'circle', 'image', 'null'])\n  .onChange((markerStartStr) => {\n    let markerStart;\n    if (markerStartStr === 'path') {\n      markerStart = arrowMarker;\n    } else if (markerStartStr === 'circle') {\n      markerStart = circleMarker;\n    } else if (markerStartStr === 'image') {\n      markerStart = imageMarker;\n    } else {\n      markerStart = null;\n    }\n\n    arrowLine.style.markerStart = markerStart;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerEnd', ['path', 'circle', 'image', 'null'])\n  .onChange((markerEndStr) => {\n    let markerEnd;\n    if (markerEndStr === 'path') {\n      markerEnd = arrowMarker;\n    } else if (markerEndStr === 'circle') {\n      markerEnd = circleMarker;\n    } else if (markerEndStr === 'image') {\n      markerEnd = imageMarker;\n    } else {\n      markerEnd = null;\n    }\n\n    arrowLine.style.markerEnd = markerEnd;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerStartOffset', -20, 20)\n  .onChange((markerStartOffset) => {\n    arrowLine.style.markerStartOffset = markerStartOffset;\n  });\nmarkerFolder\n  .add(markerConfig, 'markerEndOffset', -20, 20)\n  .onChange((markerEndOffset) => {\n    arrowLine.style.markerEndOffset = markerEndOffset;\n  });\nmarkerFolder.add(markerConfig, 'x1', 0, 400).onChange((x1) => {\n  arrowLine.style.x1 = x1;\n});\nmarkerFolder.add(markerConfig, 'y1', 0, 400).onChange((y1) => {\n  arrowLine.style.y1 = y1;\n});\nmarkerFolder.add(markerConfig, 'x2', 0, 400).onChange((x2) => {\n  arrowLine.style.x2 = x2;\n});\nmarkerFolder.add(markerConfig, 'y2', 0, 400).onChange((y2) => {\n  arrowLine.style.y2 = y2;\n});\nmarkerFolder.open();\n",title:{zh:"关闭 CSS 解析",en:"Disable CSS parsing"},filename:"disable-css.js",isNew:!1}],icon:"",id:"basic",title:{en:"Performance tips",zh:"常见问题"},api:null,childrenKey:"demos",order:5}],childrenKey:"examples"},{id:"guide",title:{zh:"教程",en:"Guide"},examples:[{demos:[{id:"chapter2",source:"import { Canvas, CanvasEvent, Circle, Line, Text } from '@antv/g';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\n\n// create a renderer\nconst canvasRenderer = new CanvasRenderer();\n\n// create a canvas\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\nconst node1 = new Circle({\n  style: {\n    r: 40,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\nconst text1 = new Text({\n  style: {\n    text: 'Node1', // 文本内容\n    fontFamily: 'Avenir', // 字体\n    fontSize: 22, // 字号\n    fill: '#fff', // 文本颜色\n    textAlign: 'center', // 水平居中\n    textBaseline: 'middle', // 垂直居中\n  },\n});\nnode1.appendChild(text1);\nnode1.setPosition(200, 200);\n\nconst node2 = new Circle({\n  style: {\n    r: 40,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\nconst text2 = new Text({\n  style: {\n    text: 'Node2', // 文本内容\n    fontFamily: 'Avenir', // 字体\n    fontSize: 22, // 字号\n    fill: '#fff', // 文本颜色\n    textAlign: 'center', // 水平居中\n    textBaseline: 'middle', // 垂直居中\n  },\n});\nnode2.appendChild(text2);\nnode2.setPosition(400, 200);\n\nconst edge = new Line({\n  style: {\n    x1: 200,\n    y1: 200,\n    x2: 400,\n    y2: 200,\n    stroke: '#1890FF',\n    lineWidth: 2,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  canvas.appendChild(edge);\n  canvas.appendChild(node1);\n  canvas.appendChild(node2);\n});\n",title:{zh:"基础教程第二节：使用渲染器",en:"Guide chapter2: use renderer"},filename:"chapter2.js",isNew:!1},{id:"chapter3",screenshot:"https://gw.alipayobjects.com/zos/raptor/1667978028753/A_Xw7JTZTFqMgAAAAAAAAAAAAAARQnAQ.gif",source:"import { Canvas, CanvasEvent, Circle, Line, Text } from '@antv/g';\nimport { Renderer } from '@antv/g-canvas';\nimport interact from 'interactjs';\n\n// 创建 Canvas2D 渲染器\nconst canvasRenderer = new Renderer();\n\n// 创建画布\nconst canvas = new Canvas({\n  container: 'container',\n  width: 600,\n  height: 500,\n  renderer: canvasRenderer,\n});\n\n// 创建节点1\nconst node1 = new Circle({\n  style: {\n    r: 40,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n    cursor: 'pointer',\n  },\n});\nconst text1 = new Text({\n  style: {\n    text: 'Node1', // 文本内容\n    fontFamily: 'Avenir', // 字体\n    fontSize: 22, // 字号\n    fill: '#fff', // 文本颜色\n    textAlign: 'center', // 水平居中\n    textBaseline: 'middle', // 垂直居中\n  },\n});\nnode1.appendChild(text1);\nnode1.setPosition(200, 200);\n\n// 创建节点2\nconst node2 = new Circle({\n  style: {\n    r: 40,\n    fill: '#1890FF',\n    stroke: '#F04864',\n    lineWidth: 4,\n  },\n});\nconst text2 = new Text({\n  style: {\n    text: 'Node2', // 文本内容\n    fontFamily: 'Avenir', // 字体\n    fontSize: 22, // 字号\n    fill: '#fff', // 文本颜色\n    textAlign: 'center', // 水平居中\n    textBaseline: 'middle', // 垂直居中\n  },\n});\nnode2.appendChild(text2);\nnode2.setPosition(400, 200);\n\n// 创建边\nconst edge = new Line({\n  style: {\n    x1: 200,\n    y1: 200,\n    x2: 400,\n    y2: 200,\n    stroke: '#1890FF',\n    lineWidth: 2,\n  },\n});\n\ncanvas.addEventListener(CanvasEvent.READY, () => {\n  // 向画布中添加图形\n  canvas.appendChild(edge);\n  canvas.appendChild(node1);\n  canvas.appendChild(node2);\n\n  // 为节点1添加交互，鼠标悬停改变颜色\n  node1.addEventListener('mouseenter', () => {\n    node1.style.fill = 'red';\n  });\n  node1.addEventListener('mouseleave', () => {\n    node1.style.fill = '#1890FF';\n  });\n\n  // 使用 interact.js 实现拖拽\n  interact(node1, {\n    // 直接传入节点1\n    context: canvas.document, // 传入上下文\n  }).draggable({\n    onmove: function (event) {\n      // interact.js 告诉我们的偏移量\n      const { dx, dy } = event;\n      // 改变节点1位置\n      node1.translateLocal(dx, dy);\n      // 获取节点1位置\n      const [nx, ny] = node1.getLocalPosition();\n      // 改变边的端点位置\n      edge.style.x1 = nx;\n      edge.style.y1 = ny;\n    },\n  });\n});\n",title:{zh:"基础教程第三节：添加交互",en:"Guide chapter3: interaction"},filename:"chapter3.js",isNew:!1}],icon:"",id:"basic",title:{en:"Guide",zh:"教程"},api:null,childrenKey:"demos",order:1e3}],childrenKey:"examples"}]}},children:n})}}}]);