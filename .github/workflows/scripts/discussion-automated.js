const { OpenAI } = require("openai");
const { QueryAntVDocumentTool, ExtractAntVTopicTool } = require('@antv/mcp-server-antv/build/tools');

/**
 * @param {Object} param
 * @param {import('@actions/github').GitHub} param.github
 * @param {import('@actions/core')} param.core
 * @param {Object} param.context GitHub Action context
 * @param {Object} param.discussion The discussion object from the payload
 */
module.exports = async ({ github, core, context, discussion }) => {
  try {
    core.info('Starting to process discussion...', context.repo.repo);
    const library = `g`;
    if (!discussion || !discussion.node_id) { // Check if node_id exists
      core.setFailed('Could not find discussion information or node_id');
      return;
    }

    // 1. Get information from discussion object (unchanged)
    const discussionNumber = discussion.number;
    const discussionTitle = discussion.title;
    core.info(`Processing discussion #${discussionNumber}: ${discussionTitle}`);

    // 2. AI processing logic (completely unchanged)
    const combinedQuery = prepareAIPrompt(context, discussion);
    const topicExtractionResult = await ExtractAntVTopicTool.run({ query: combinedQuery });
    const aiResponse = await getAIResponse(core, topicExtractionResult.content[0].text);
    const jsonMatch = aiResponse.match(/```json\s*(\{[\s\S]*?\})\s*```/);
    const processedTopicContent = JSON.parse(jsonMatch[1]);
    const queryDocumentParams = {
      library,
      query: combinedQuery,
      topic: processedTopicContent.topic,
      intent: processedTopicContent.intent,
      tokens: 5000,
      ...(processedTopicContent.subTasks && { subTasks: processedTopicContent.subTasks }),
    };
    const documentationResult = await QueryAntVDocumentTool.run(queryDocumentParams);
    const response = await getAIResponse(core, documentationResult.content[0].text);

    // 3. Key modification: Use GraphQL Mutation to create a comment
    core.info(`Preparing to post a reply to Discussion #${discussion.number}...`);
    const mutation = `
      mutation AddDiscussionComment($discussionId: ID!, $body: String!) {
        addDiscussionComment(input: {discussionId: $discussionId, body: $body}) {
          comment {
            id
            url
          }
        }
      }`;

    const variables = {
      // Key: GraphQL needs the global node_id, not the number
      discussionId: discussion.node_id,
      body: `@${discussion.user.login} Hello! Here is an automated response to your question:\n\n${response}\n\n---\n*This is an automated response generated by AI. If you have any questions, our team will follow up as soon as possible.*`
    };

    await github.graphql(mutation, variables);

    core.info('Successfully posted the reply!');

  } catch (error) {
    core.setFailed(`Failed to process discussion: ${error.message}`);
    core.error(error.stack);
  }
};

// prepareAIPrompt 函数保持不变
function prepareAIPrompt(context, post) {
  return `
    You are an intelligent assistant for the ${context.repo.repo} project. This is an automated response system for GitHub discussions.
    Please analyze the following discussion and provide a professional, helpful response.

    ## Current Discussion
    - Title: ${post.title}
    - Content: ${post.body}

    Please provide a complete and helpful response, but avoid being too verbose. The response should be well-structured and use appropriate Markdown formatting.
`;
}

// getAIResponse 函数保持不变
async function getAIResponse(core, userQuestion) {
  try {
    core.info('Calling GitHub AI API...');
    const token = process.env.GH_TOKEN;
    if (!token) { throw new Error('GH_TOKEN environment variable not found'); }
    const endpoint = "https://models.github.ai/inference";
    const client = new OpenAI({ baseURL: endpoint, apiKey: token });
    const response = await client.chat.completions.create({
      messages: [{ role: "user", content: userQuestion }],
      temperature: 0.7,
      top_p: 1.0,
      model: "openai/gpt-4.1"
    });
    core.info('Successfully received AI response');
    return response.choices[0].message.content;
  } catch (error) {
    core.warning(`Failed to call GitHub AI API: ${error.message}`);
    return `Thank you for starting this discussion!\n\nOur team will review your question as soon as possible. Thank you for your understanding and support!`;
  }
}
