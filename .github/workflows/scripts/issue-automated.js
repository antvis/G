const { OpenAI } = require("openai");
const { QueryAntVDocumentTool, ExtractAntVTopicTool }=  require('@antv/mcp-server-antv/build/tools');


/**
 * @param {Object} param
 * @param {import('@actions/github').GitHub} param.github
 * @param {import('@actions/core')} param.core
 * @param {Object} param.context GitHub Action context
 */
module.exports = async ({ github, core, context, issue }) => {
  try {
    core.info('Starting to process issue...', context.repo.repo);
    const library = `g`;
    if (!issue) {
      core.setFailed('Could not find issue information');
      return;
    }

    const issueNumber = issue.number;
    const issueTitle = issue.title;

    core.info(`Processing issue #${issueNumber}: ${issueTitle}`);

    const combinedQuery = prepareAIPrompt(context, issue);


    const topicExtractionResult = await ExtractAntVTopicTool.run({ query: combinedQuery });

    const aiResponse = await getAIResponse(core,  topicExtractionResult.content[0].text);
    const jsonMatch = aiResponse.match(/```json\s*(\{[\s\S]*?\})\s*```/);
    const processedTopicContent = JSON.parse(jsonMatch[1]);

    const queryDocumentParams = {
        library,
        query: combinedQuery,
        topic: processedTopicContent.topic,
        intent: processedTopicContent.intent,
        tokens: 5000,
        ...(processedTopicContent.subTasks && { subTasks: processedTopicContent.subTasks }),
      };

      const documentationResult = await QueryAntVDocumentTool.run(queryDocumentParams);

      const response = await getAIResponse(core,  documentationResult.content[0].text);

        await github.rest.issues.createComment({
            issue_number: issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `@${issue.user.login} Hello! Here is an automated response to your question:\n\n${response}\n\n---\n*This is an automated response generated by AI. If you have any questions, our team will follow up as soon as possible.*`
        });

    core.info('Issue processing completed');

  } catch (error) {
    core.setFailed(`Failed to process issue: ${error.message}`);
    core.error(error.stack);
  }
};

function prepareAIPrompt(context, issue) {
    return `
    You are an intelligent assistant for the ${context.repo.repo} project. This is an automated response system for GitHub issues.
    Please analyze the following issue and provide a professional, helpful response.

    ## Current Issue
    - Title: ${issue.title}
    - Content: ${issue.body}

    Please provide a complete and helpful response, but avoid being too verbose. The response should be well-structured and use appropriate Markdown formatting.
`;
}

/**
 * 调用 GitHub AI API 获取回复
 */
async function getAIResponse(core, userQuestion) {
  try {
    core.info('Calling GitHub AI API...');

    const token = process.env.GH_TOKEN;

    if (!token) {
      throw new Error('GH_TOKEN environment variable not found');
    }

    const endpoint = "https://models.github.ai/inference";
    const model = "openai/gpt-4.1";

    const client = new OpenAI({
      baseURL: endpoint,
      apiKey: token
    });

    const response = await client.chat.completions.create({
      messages: [
        { role: "user", content: userQuestion }
      ],
      temperature: 0.7,
      top_p: 1.0,
      model: model
    });

    core.info('Successfully received AI response');
    core.info(JSON.stringify(response));
    return response.choices[0].message.content;

  } catch (error) {
    core.warning(`Failed to call GitHub AI API: ${error.message}`);
    // Default response
    return `
    Thank you for submitting this issue!

    Our team will review your issue as soon as possible. To help us resolve it faster, please make sure you've provided:

    - A detailed description of the issue
    - Steps to reproduce (if it's a bug)
    - Expected behavior vs actual behavior
    - Version information

    Thank you for your understanding and support!`
`;
  }
}


